/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/template/cork/assets/js/app.js":
/*!***********************************************!*\
  !*** ./public/template/cork/assets/js/app.js ***!
  \***********************************************/
/***/ (() => {

var App = function () {
  var MediaSize = {
    xl: 1200,
    lg: 992,
    md: 991,
    sm: 576
  };
  var ToggleClasses = {
    headerhamburger: '.toggle-sidebar',
    inputFocused: 'input-focused'
  };
  var Selector = {
    mainHeader: '.header.navbar',
    headerhamburger: '.toggle-sidebar',
    fixed: '.fixed-top',
    mainContainer: '.main-container',
    sidebar: '#sidebar',
    sidebarContent: '#sidebar-content',
    sidebarStickyContent: '.sticky-sidebar-content',
    ariaExpandedTrue: '#sidebar [aria-expanded="true"]',
    ariaExpandedFalse: '#sidebar [aria-expanded="false"]',
    contentWrapper: '#content',
    contentWrapperContent: '.container',
    mainContentArea: '.main-content',
    searchFull: '.toggle-search',
    overlay: {
      sidebar: '.overlay',
      cs: '.cs-overlay',
      search: '.search-overlay'
    }
  };
  var categoryScroll = {
    scrollCat: function scrollCat() {
      var sidebarWrapper = document.querySelectorAll('.sidebar-wrapper [aria-expanded="true"]')[0];
      var sidebarWrapperTop = sidebarWrapper.offsetTop - 20;
      setTimeout(function () {
        $('.menu-categories').animate({
          scrollTop: sidebarWrapperTop
        }, 500);
      }, 500);
    }
  };
  var toggleFunction = {
    sidebar: function sidebar($recentSubmenu) {
      $('.sidebarCollapse').on('click', function (sidebar) {
        sidebar.preventDefault();
        getSidebar = $('.sidebar-wrapper'); // console.log('drill 1')

        if ($recentSubmenu === true) {
          // console.log('drill 2')
          if ($('.collapse.submenu').hasClass('show')) {
            // console.log('drill 3')
            $('.submenu.show').addClass('mini-recent-submenu');
          } else {
            // console.log('drill 4')
            if ($(Selector.mainContainer).hasClass('sidebar-closed')) {
              // console.log('drill 5')
              if ($('.collapse.submenu').hasClass('recent-submenu')) {
                getSidebar.find('.collapse.submenu.recent-submenu').addClass('show');
                $('.collapse.submenu.recent-submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'true');
                $('.submenu').removeClass('mini-recent-submenu'); // console.log('drill 6')
              } else {
                $('li.active .submenu').addClass('recent-submenu');
                getSidebar.find('.collapse.submenu.recent-submenu').addClass('show');
                $('.collapse.submenu.recent-submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'true');
                $('.submenu').removeClass('mini-recent-submenu'); // console.log('drill 7')
              }
            }
          } // console.log('drill 2 end')

        } // console.log('end drill')


        $(Selector.mainContainer).toggleClass("sidebar-closed");
        $(Selector.mainHeader).toggleClass('expand-header');
        $(Selector.mainContainer).toggleClass("sbar-open");
        $('.overlay').toggleClass('show');
        $('html,body').toggleClass('sidebar-noneoverflow');
      });
    },
    onToggleSidebarSubmenu: function onToggleSidebarSubmenu() {
      $('.sidebar-wrapper').on('mouseenter mouseleave', function (event) {
        event.preventDefault();

        if ($('body').hasClass('alt-menu')) {
          if ($('.main-container').hasClass('sidebar-closed')) {
            if (event.type === 'mouseenter') {
              $('li .submenu').removeClass('show');
              $('li.active .submenu').addClass('recent-submenu');
              $('li.active').find('.collapse.submenu.recent-submenu').addClass('show');
              $('.collapse.submenu.recent-submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'true');
            } else if (event.type === 'mouseleave') {
              $('li').find('.collapse.submenu').removeClass('show');
              $('.collapse.submenu.recent-submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'false');
              $('.collapse.submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'false');
            }
          }
        } else {
          if ($('.main-container').hasClass('sidebar-closed')) {
            if (event.type === 'mouseenter') {
              $(this).find('.submenu.recent-submenu').addClass('show');
              $('.collapse.submenu.recent-submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'true');
            } else if (event.type === 'mouseleave') {
              $(this).find('.submenu.recent-submenu').removeClass('show');
              $('.collapse.submenu.recent-submenu').parents('.menu').find('.dropdown-toggle').attr('aria-expanded', 'false');
            }
          }
        }
      });
    },
    offToggleSidebarSubmenu: function offToggleSidebarSubmenu() {
      $('.sidebar-wrapper').off('mouseenter mouseleave');
    },
    overlay: function overlay() {
      $('#dismiss, .overlay, cs-overlay').on('click', function () {
        // hide sidebar
        $(Selector.mainContainer).addClass('sidebar-closed');
        $(Selector.mainContainer).removeClass('sbar-open'); // hide overlay

        $('.overlay').removeClass('show');
        $('html,body').removeClass('sidebar-noneoverflow');
      });
    },
    search: function search() {
      $(Selector.searchFull).click(function (event) {
        $(this).parents('.search-animated').find('.search-full').addClass(ToggleClasses.inputFocused);
        $(this).parents('.search-animated').addClass('show-search');
        $(Selector.overlay.search).addClass('show');
        $(Selector.overlay.search).addClass('show');
      });
      $(Selector.overlay.search).click(function (event) {
        $(this).removeClass('show');
        $(Selector.searchFull).parents('.search-animated').find('.search-full').removeClass(ToggleClasses.inputFocused);
        $(Selector.searchFull).parents('.search-animated').removeClass('show-search');
      });
    }
  };
  var inBuiltfunctionality = {
    mainCatActivateScroll: function mainCatActivateScroll() {
      var ps = new PerfectScrollbar('.menu-categories', {
        wheelSpeed: .5,
        swipeEasing: !0,
        minScrollbarLength: 40,
        maxScrollbarLength: 300
      });
    },
    preventScrollBody: function preventScrollBody() {
      $('#sidebar').bind('mousewheel DOMMouseScroll', function (e) {
        var scrollTo = null;

        if (e.type == 'mousewheel') {
          scrollTo = e.originalEvent.wheelDelta * -1;
        } else if (e.type == 'DOMMouseScroll') {
          scrollTo = 40 * e.originalEvent.detail;
        }

        if (scrollTo) {
          e.preventDefault();
          $(this).scrollTop(scrollTo + $(this).scrollTop());
        }
      });
    },
    languageDropdown: function languageDropdown() {
      var getDropdownElement = document.querySelectorAll('.more-dropdown .dropdown-item');

      for (var i = 0; i < getDropdownElement.length; i++) {
        getDropdownElement[i].addEventListener('click', function () {
          document.querySelectorAll('.more-dropdown .dropdown-toggle > span')[0].innerText = this.getAttribute('data-value');
          document.querySelectorAll('.more-dropdown .dropdown-toggle > img')[0].setAttribute('src', 'assets/img/' + this.getAttribute('data-img-value') + '.svg');
        });
      }
    }
  };
  var _mobileResolution = {
    onRefresh: function onRefresh() {
      var windowWidth = window.innerWidth;

      if (windowWidth <= MediaSize.md) {
        categoryScroll.scrollCat();
        toggleFunction.sidebar();
      }
    },
    onResize: function onResize() {
      $(window).on('resize', function (event) {
        event.preventDefault();
        var windowWidth = window.innerWidth;

        if (windowWidth <= MediaSize.md) {
          toggleFunction.offToggleSidebarSubmenu();
        }
      });
    }
  };
  var _desktopResolution = {
    onRefresh: function onRefresh() {
      var windowWidth = window.innerWidth;

      if (windowWidth > MediaSize.md) {
        categoryScroll.scrollCat();
        toggleFunction.sidebar(true);
        toggleFunction.onToggleSidebarSubmenu();
      }
    },
    onResize: function onResize() {
      $(window).on('resize', function (event) {
        event.preventDefault();
        var windowWidth = window.innerWidth;

        if (windowWidth > MediaSize.md) {
          toggleFunction.onToggleSidebarSubmenu();
        }
      });
    }
  };

  function sidebarFunctionality() {
    function sidebarCloser() {
      if (window.innerWidth <= 991) {
        if (!$('body').hasClass('alt-menu')) {
          $("#container").addClass("sidebar-closed");
          $('.overlay').removeClass('show');
        } else {
          $(".navbar").removeClass("expand-header");
          $('.overlay').removeClass('show');
          $('#container').removeClass('sbar-open');
          $('html, body').removeClass('sidebar-noneoverflow');
        }
      } else if (window.innerWidth > 991) {
        if (!$('body').hasClass('alt-menu')) {
          $("#container").removeClass("sidebar-closed");
          $(".navbar").removeClass("expand-header");
          $('.overlay').removeClass('show');
          $('#container').removeClass('sbar-open');
          $('html, body').removeClass('sidebar-noneoverflow');
        } else {
          $('html, body').addClass('sidebar-noneoverflow');
          $("#container").addClass("sidebar-closed");
          $(".navbar").addClass("expand-header");
          $('.overlay').addClass('show');
          $('#container').addClass('sbar-open');
          $('.sidebar-wrapper [aria-expanded="true"]').parents('li.menu').find('.collapse').removeClass('show');
        }
      }
    }

    function sidebarMobCheck() {
      if (window.innerWidth <= 991) {
        if ($('.main-container').hasClass('sbar-open')) {
          return;
        } else {
          sidebarCloser();
        }
      } else if (window.innerWidth > 991) {
        sidebarCloser();
      }
    }

    sidebarCloser();
    $(window).resize(function (event) {
      sidebarMobCheck();
    });
  }

  return {
    init: function init() {
      toggleFunction.overlay();
      toggleFunction.search();
      /*
          Desktop Resoltion fn
      */

      _desktopResolution.onRefresh();

      _desktopResolution.onResize();
      /*
          Mobile Resoltion fn
      */


      _mobileResolution.onRefresh();

      _mobileResolution.onResize();

      sidebarFunctionality();
      /*
          In Built Functionality fn
      */

      inBuiltfunctionality.mainCatActivateScroll();
      inBuiltfunctionality.preventScrollBody();
      inBuiltfunctionality.languageDropdown();
    }
  };
}();

/***/ }),

/***/ "./public/template/cork/assets/js/components/custom-counter.js":
/*!*********************************************************************!*\
  !*** ./public/template/cork/assets/js/components/custom-counter.js ***!
  \*********************************************************************/
/***/ (() => {

var cSpeed = 6000; // Simple Counter

var value = $('.s-counter2').text();
$('.s-counter2').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.s-counter3').text();
$('.s-counter3').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.s-counter4').text();
$('.s-counter4').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
}); // With Icon

var value = $('.ico-counter1').text();
$('.ico-counter1').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.ico-counter2').text();
$('.ico-counter2').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.ico-counter3').text();
$('.ico-counter3').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
}); // Circle

var value = $('.c-counter1').text();
$('.c-counter1').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.c-counter2').text();
$('.c-counter2').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.c-counter3').text();
$('.c-counter3').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});
var value = $('.c-counter4').text();
$('.c-counter4').countTo({
  from: 0,
  to: value,
  speed: cSpeed,
  formatter: function formatter(value, options) {
    return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
  }
});

/***/ }),

/***/ "./public/template/cork/assets/js/custom.js":
/*!**************************************************!*\
  !*** ./public/template/cork/assets/js/custom.js ***!
  \**************************************************/
/***/ (() => {

throw new Error("Module build failed (from ./node_modules/babel-loader/lib/index.js):\nSyntaxError: /var/www/html/public/template/cork/assets/js/custom.js: Identifier 'checkall' has already been declared (69:9)\n\n\u001b[0m \u001b[90m 67 |\u001b[39m \u001b[90m*/\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 68 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 69 |\u001b[39m \u001b[36mfunction\u001b[39m checkall(clickchk\u001b[33m,\u001b[39m relChkbox) {\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 70 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 71 |\u001b[39m     \u001b[36mvar\u001b[39m checker \u001b[33m=\u001b[39m $(\u001b[32m'#'\u001b[39m \u001b[33m+\u001b[39m clickchk)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 72 |\u001b[39m     \u001b[36mvar\u001b[39m multichk \u001b[33m=\u001b[39m $(\u001b[32m'.'\u001b[39m \u001b[33m+\u001b[39m relChkbox)\u001b[33m;\u001b[39m\u001b[0m\n    at Parser._raise (/var/www/html/node_modules/@babel/parser/lib/index.js:776:17)\n    at Parser.raiseWithData (/var/www/html/node_modules/@babel/parser/lib/index.js:769:17)\n    at Parser.raise (/var/www/html/node_modules/@babel/parser/lib/index.js:737:17)\n    at ScopeHandler.checkRedeclarationInScope (/var/www/html/node_modules/@babel/parser/lib/index.js:1453:12)\n    at ScopeHandler.declareName (/var/www/html/node_modules/@babel/parser/lib/index.js:1419:12)\n    at Parser.registerFunctionStatementId (/var/www/html/node_modules/@babel/parser/lib/index.js:13005:16)\n    at Parser.parseFunction (/var/www/html/node_modules/@babel/parser/lib/index.js:12985:12)\n    at Parser.parseFunctionStatement (/var/www/html/node_modules/@babel/parser/lib/index.js:12614:17)\n    at Parser.parseStatementContent (/var/www/html/node_modules/@babel/parser/lib/index.js:12298:21)\n    at Parser.parseStatement (/var/www/html/node_modules/@babel/parser/lib/index.js:12260:17)\n    at Parser.parseBlockOrModuleBlockBody (/var/www/html/node_modules/@babel/parser/lib/index.js:12846:25)\n    at Parser.parseBlockBody (/var/www/html/node_modules/@babel/parser/lib/index.js:12837:10)\n    at Parser.parseProgram (/var/www/html/node_modules/@babel/parser/lib/index.js:12191:10)\n    at Parser.parseTopLevel (/var/www/html/node_modules/@babel/parser/lib/index.js:12182:25)\n    at Parser.parse (/var/www/html/node_modules/@babel/parser/lib/index.js:13893:10)\n    at parse (/var/www/html/node_modules/@babel/parser/lib/index.js:13945:38)");

/***/ }),

/***/ "./public/template/cork/assets/js/scrollspyNav.js":
/*!********************************************************!*\
  !*** ./public/template/cork/assets/js/scrollspyNav.js ***!
  \********************************************************/
/***/ (() => {

// Cache selectors
var lastId,
    sidenav = $(".sidenav"),
    // All list items
menuItems = sidenav.find("a");
menuItems.on('click', function (event) {
  // Make sure this.hash has a value before overriding default behavior
  if (this.hash !== "") {
    // Prevent default anchor click behavior
    event.preventDefault(); // Store hash

    var hash = this.hash; // Using jQuery's animate() method to add smooth page scroll
    // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area

    $('html, body').animate({
      scrollTop: $(hash).offset().top + -82
    }, 800);
  } // End if

});

/***/ }),

/***/ "./public/template/cork/assets/js/widgets/modules-widgets.js":
/*!*******************************************************************!*\
  !*** ./public/template/cork/assets/js/widgets/modules-widgets.js ***!
  \*******************************************************************/
/***/ (() => {

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

try {
  /*
      ==============================
      |    @Options Charts Script   |
      ==============================
  */

  /*
      ======================================
          Visitor Statistics | Options
      ======================================
  */
  // Total Visits
  var spark1 = {
    chart: {
      id: 'unique-visits',
      group: 'sparks2',
      type: 'line',
      height: 58,
      sparkline: {
        enabled: true
      }
    },
    series: [{
      data: [21, 9, 36, 12, 44, 25, 59, 41, 66, 25]
    }],
    stroke: {
      curve: 'smooth',
      width: 2
    },
    markers: {
      size: 0
    },
    grid: {
      padding: {
        top: 0,
        bottom: 0,
        left: 0
      }
    },
    colors: ['#2196f3'],
    tooltip: {
      x: {
        show: false
      },
      y: {
        title: {
          formatter: function formatter(val) {
            return '';
          }
        }
      }
    },
    responsive: [{
      breakpoint: 576,
      options: {
        chart: {
          height: 95
        },
        grid: {
          padding: {
            top: 45,
            bottom: 0,
            left: 0
          }
        }
      }
    }]
  }; // Paid Visits

  var spark2 = {
    chart: {
      id: 'total-users',
      group: 'sparks1',
      type: 'line',
      height: 58,
      sparkline: {
        enabled: true
      }
    },
    series: [{
      data: [22, 19, 30, 47, 32, 44, 34, 55, 41, 69]
    }],
    stroke: {
      curve: 'smooth',
      width: 2
    },
    markers: {
      size: 0
    },
    grid: {
      padding: {
        top: 0,
        bottom: 0,
        left: 0
      }
    },
    colors: ['#e2a03f'],
    tooltip: {
      x: {
        show: false
      },
      y: {
        title: {
          formatter: function formatter(val) {
            return '';
          }
        }
      }
    },
    responsive: [{
      breakpoint: 576,
      options: {
        chart: {
          height: 95
        },
        grid: {
          padding: {
            top: 35,
            bottom: 0,
            left: 0
          }
        }
      }
    }]
  };
  /*
      ===================================
          Unique Visitors | Options
      ===================================
  */

  var d_1options1 = {
    chart: {
      height: 350,
      type: 'line',
      toolbar: {
        show: false
      }
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: '55%'
      }
    },
    legend: {
      offsetX: 0,
      offsetY: -10
    },
    colors: ['#61b6cd', '#805dca'],
    series: [{
      name: 'EXPANSIONS',
      type: 'column',
      data: [4400, 5050, 4140, 6710, 2270, 4130, 2010, 3520, 7520, 3200, 2570, 1600]
    }, {
      name: 'CANCELLATIONS',
      type: 'line',
      data: [230, 420, 350, 270, 430, 220, 170, 310, 220, 220, 120, 160]
    }],
    stroke: {
      show: true,
      curve: 'smooth',
      width: [0, 4],
      lineCap: 'square'
    },
    xaxis: {
      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    },
    yaxis: [{
      title: {
        text: 'EXPANSIONS'
      }
    }, {
      opposite: true,
      title: {
        text: 'EXPANSIONS'
      }
    }],
    responsive: [{
      breakpoint: 576,
      options: {
        yaxis: [{
          title: {
            text: undefined
          }
        }, {
          opposite: true,
          title: {
            text: undefined
          }
        }]
      }
    }]
  };
  /*
      ==============================
          Statistics | Options
      ==============================
  */
  // Followers

  var d_1options3 = {
    chart: {
      id: 'sparkline1',
      type: 'area',
      height: 160,
      sparkline: {
        enabled: true
      }
    },
    stroke: {
      curve: 'smooth',
      width: 2
    },
    series: [{
      name: 'Sales',
      data: [38, 60, 38, 52, 36, 40, 28]
    }],
    labels: ['1', '2', '3', '4', '5', '6', '7'],
    yaxis: {
      min: 0
    },
    colors: ['#4361ee'],
    tooltip: {
      x: {
        show: false
      }
    }
  }; // Referral

  var d_1options4 = {
    chart: {
      id: 'sparkline1',
      type: 'area',
      height: 160,
      sparkline: {
        enabled: true
      }
    },
    stroke: {
      curve: 'smooth',
      width: 2
    },
    series: [{
      name: 'Sales',
      data: [60, 28, 52, 38, 40, 36, 38]
    }],
    labels: ['1', '2', '3', '4', '5', '6', '7'],
    yaxis: {
      min: 0
    },
    colors: ['#e7515a'],
    tooltip: {
      x: {
        show: false
      }
    }
  }; // Engagement Rate

  var d_1options5 = {
    chart: {
      id: 'sparkline1',
      type: 'area',
      height: 160,
      sparkline: {
        enabled: true
      }
    },
    stroke: {
      curve: 'smooth',
      width: 2
    },
    fill: {
      opacity: 1
    },
    series: [{
      name: 'Sales',
      data: [28, 50, 36, 60, 38, 52, 38]
    }],
    labels: ['1', '2', '3', '4', '5', '6', '7'],
    yaxis: {
      min: 0
    },
    colors: ['#1abc9c'],
    tooltip: {
      x: {
        show: false
      }
    }
  };
  /*
      ==============================
      |    @Render Charts Script    |
      ==============================
  */

  /*
      ======================================
          Visitor Statistics | Script
      ======================================
  */
  // Total Visits

  d_1C_1 = new ApexCharts(document.querySelector("#total-users"), spark1);
  d_1C_1.render(); // Paid Visits

  d_1C_2 = new ApexCharts(document.querySelector("#paid-visits"), spark2);
  d_1C_2.render();
  /*
      ===================================
          Unique Visitors | Script
      ===================================
  */

  var d_1C_3 = new ApexCharts(document.querySelector("#uniqueVisits"), d_1options1);
  d_1C_3.render();
  /*
      ==============================
          Statistics | Script
      ==============================
  */
  // Followers

  var d_1C_5 = new ApexCharts(document.querySelector("#hybrid_followers"), d_1options3);
  d_1C_5.render(); // Referral

  var d_1C_6 = new ApexCharts(document.querySelector("#hybrid_followers1"), d_1options4);
  d_1C_6.render(); // Engagement Rate

  var d_1C_7 = new ApexCharts(document.querySelector("#hybrid_followers3"), d_1options5);
  d_1C_7.render();
  /*
      =============================================
          Perfect Scrollbar | Notifications
      =============================================
  */

  var ps = new PerfectScrollbar(document.querySelector('.mt-container'));
} catch (e) {
  // statements
  console.log(e);
}

try {
  var _ref;

  /*
      ==============================
      |    @Options Charts Script   |
      ==============================
  */

  /*
      =============================
          Daily Sales | Options
      =============================
  */
  var d_2options1 = {
    chart: {
      height: 160,
      type: 'bar',
      stacked: true,
      toolbar: {
        show: false
      }
    },
    dataLabels: {
      enabled: false
    },
    stroke: {
      show: true,
      width: 1
    },
    colors: ['#70B2D9', '#e7f7ff'],
    responsive: [{
      breakpoint: 480,
      options: {
        legend: {
          position: 'bottom',
          offsetX: -10,
          offsetY: 0
        }
      }
    }],
    series: [{
      name: 'Sales',
      data: [44, 55, 41, 67, 22, 43, 21]
    }, {
      name: 'Last Week',
      data: [13, 23, 20, 8, 13, 27, 33]
    }],
    xaxis: {
      labels: {
        show: false
      },
      categories: ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat']
    },
    yaxis: {
      show: false
    },
    fill: {
      opacity: 1
    },
    plotOptions: {
      bar: {
        horizontal: false,
        startingShape: 'rounded',
        endingShape: 'rounded',
        columnWidth: '25%'
      }
    },
    legend: {
      show: false
    },
    grid: {
      show: false,
      xaxis: {
        lines: {
          show: false
        }
      },
      padding: {
        top: 10,
        right: 0,
        bottom: -40,
        left: 0
      }
    }
  };
  /*
      =============================
          Total Orders | Options
      =============================
  */

  var d_2options2 = {
    chart: {
      id: 'sparkline1',
      group: 'sparklines',
      type: 'area',
      height: 315,
      sparkline: {
        enabled: true
      }
    },
    stroke: {
      curve: 'smooth',
      width: 2
    },
    fill: {
      opacity: 1
    },
    series: [{
      name: 'Sales',
      data: [28, 40, 36, 52, 38, 60, 38, 52, 36, 40]
    }],
    labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
    yaxis: {
      min: 0
    },
    grid: {
      padding: {
        top: 125,
        right: 0,
        bottom: 0,
        left: 0
      }
    },
    tooltip: {
      x: {
        show: false
      },
      theme: 'dark'
    },
    colors: ['#e7515a']
  };
  /*
      =================================
          Revenue Monthly | Options
      =================================
  */

  var options1 = {
    chart: {
      fontFamily: 'Nunito, sans-serif',
      height: 365,
      type: 'area',
      zoom: {
        enabled: false
      },
      dropShadow: {
        enabled: true,
        opacity: 0.2,
        blur: 10,
        left: -7,
        top: 22
      },
      toolbar: {
        show: false
      },
      events: {
        mounted: function mounted(ctx, config) {
          var highest1 = ctx.getHighestValueInSeries(0);
          var highest2 = ctx.getHighestValueInSeries(1);
          ctx.addPointAnnotation({
            x: new Date(ctx.w.globals.seriesX[0][ctx.w.globals.series[0].indexOf(highest1)]).getTime(),
            y: highest1,
            label: {
              style: {
                cssClass: 'd-none'
              }
            },
            customSVG: {
              SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="#2196f3" stroke="#fff" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-circle"><circle cx="12" cy="12" r="10"></circle></svg>',
              cssClass: undefined,
              offsetX: -8,
              offsetY: 5
            }
          });
          ctx.addPointAnnotation({
            x: new Date(ctx.w.globals.seriesX[1][ctx.w.globals.series[1].indexOf(highest2)]).getTime(),
            y: highest2,
            label: {
              style: {
                cssClass: 'd-none'
              }
            },
            customSVG: {
              SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="15" height="15" viewBox="0 0 24 24" fill="#6d17cb" stroke="#fff" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" class="feather feather-circle"><circle cx="12" cy="12" r="10"></circle></svg>',
              cssClass: undefined,
              offsetX: -8,
              offsetY: 5
            }
          });
        }
      }
    },
    colors: ['#2196f3', '#6d17cb'],
    dataLabels: {
      enabled: false
    },
    markers: {
      discrete: [{
        seriesIndex: 0,
        dataPointIndex: 7,
        fillColor: '#000',
        strokeColor: '#000',
        size: 5
      }, {
        seriesIndex: 2,
        dataPointIndex: 11,
        fillColor: '#000',
        strokeColor: '#000',
        size: 4
      }]
    },
    subtitle: {
      text: '$10,840',
      align: 'left',
      margin: 0,
      offsetX: 95,
      offsetY: 0,
      floating: false,
      style: {
        fontSize: '18px',
        color: '#4361ee'
      }
    },
    title: {
      text: 'Total Profit',
      align: 'left',
      margin: 0,
      offsetX: -10,
      offsetY: 0,
      floating: false,
      style: {
        fontSize: '18px',
        color: '#0e1726'
      }
    },
    stroke: {
      show: true,
      curve: 'smooth',
      width: 2,
      lineCap: 'square'
    },
    series: [{
      name: 'Income',
      data: [16800, 16800, 15500, 17800, 15500, 17000, 19000, 16000, 15000, 17000, 14000, 17000]
    }, {
      name: 'Expenses',
      data: [16500, 17500, 16200, 17300, 16000, 19500, 16000, 17000, 16000, 19000, 18000, 19000]
    }],
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    xaxis: {
      axisBorder: {
        show: false
      },
      axisTicks: {
        show: false
      },
      crosshairs: {
        show: true
      },
      labels: {
        offsetX: 0,
        offsetY: 5,
        style: {
          fontSize: '12px',
          fontFamily: 'Nunito, sans-serif',
          cssClass: 'apexcharts-xaxis-title'
        }
      }
    },
    yaxis: {
      labels: {
        formatter: function formatter(value, index) {
          return value / 1000 + 'K';
        },
        offsetX: -22,
        offsetY: 0,
        style: {
          fontSize: '12px',
          fontFamily: 'Nunito, sans-serif',
          cssClass: 'apexcharts-yaxis-title'
        }
      }
    },
    grid: {
      borderColor: '#e0e6ed',
      strokeDashArray: 5,
      xaxis: {
        lines: {
          show: true
        }
      },
      yaxis: {
        lines: {
          show: false
        }
      },
      padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: -10
      }
    },
    legend: {
      position: 'top',
      horizontalAlign: 'right',
      offsetY: -50,
      fontSize: '16px',
      fontFamily: 'Nunito, sans-serif',
      markers: {
        width: 10,
        height: 10,
        strokeWidth: 0,
        strokeColor: '#fff',
        fillColors: undefined,
        radius: 12,
        onClick: undefined,
        offsetX: 0,
        offsetY: 0
      },
      itemMargin: {
        horizontal: 0,
        vertical: 20
      }
    },
    tooltip: {
      theme: 'dark',
      marker: {
        show: true
      },
      x: {
        show: false
      }
    },
    fill: {
      type: "gradient",
      gradient: {
        type: "vertical",
        shadeIntensity: 1,
        inverseColors: !1,
        opacityFrom: .28,
        opacityTo: .05,
        stops: [45, 100]
      }
    },
    responsive: [{
      breakpoint: 575,
      options: {
        legend: {
          offsetY: -30
        }
      }
    }]
  };
  /*
      ==================================
          Sales By Category | Options
      ==================================
  */

  var options = {
    chart: {
      type: 'donut',
      width: 397
    },
    colors: ['#2196f3', '#e2a03f', '#8738a7'],
    dataLabels: {
      enabled: false
    },
    legend: {
      position: 'bottom',
      horizontalAlign: 'center',
      fontSize: '14px',
      markers: {
        width: 10,
        height: 10
      },
      itemMargin: {
        horizontal: 0,
        vertical: 8
      }
    },
    plotOptions: {
      pie: {
        donut: {
          size: '65%',
          background: 'transparent',
          labels: {
            show: true,
            name: {
              show: true,
              fontSize: '29px',
              fontFamily: 'Nunito, sans-serif',
              color: undefined,
              offsetY: -10
            },
            value: {
              show: true,
              fontSize: '26px',
              fontFamily: 'Nunito, sans-serif',
              color: '20',
              offsetY: 16,
              formatter: function formatter(val) {
                return val;
              }
            },
            total: {
              show: true,
              showAlways: true,
              label: 'Total',
              color: '#888ea8',
              formatter: function formatter(w) {
                return w.globals.seriesTotals.reduce(function (a, b) {
                  return a + b;
                }, 0);
              }
            }
          }
        }
      }
    },
    stroke: {
      show: true,
      width: 25
    },
    series: [985, 737, 270],
    labels: ['Apparel', 'Sports', 'Others'],
    responsive: [(_ref = {
      breakpoint: 1599,
      options: {
        chart: {
          width: '350px',
          height: '400px'
        },
        legend: {
          position: 'bottom'
        }
      }
    }, _defineProperty(_ref, "breakpoint", 1439), _defineProperty(_ref, "options", {
      chart: {
        width: '250px',
        height: '390px'
      },
      legend: {
        position: 'bottom'
      },
      plotOptions: {
        pie: {
          donut: {
            size: '65%'
          }
        }
      }
    }), _ref)]
  };
  /*
      ==============================
      |    @Render Charts Script    |
      ==============================
  */

  /*
      ============================
          Daily Sales | Render
      ============================
  */

  var d_2C_1 = new ApexCharts(document.querySelector("#daily-sales"), d_2options1);
  d_2C_1.render();
  /*
      ============================
          Total Orders | Render
      ============================
  */

  var d_2C_2 = new ApexCharts(document.querySelector("#total-orders"), d_2options2);
  d_2C_2.render();
  /*
      ================================
          Revenue Monthly | Render
      ================================
  */

  var chart1 = new ApexCharts(document.querySelector("#revenueMonthly"), options1);
  chart1.render();
  /*
      =================================
          Sales By Category | Render
      =================================
  */

  var chart = new ApexCharts(document.querySelector("#chart-2"), options);
  chart.render();
  /*
      =============================================
          Perfect Scrollbar | Recent Activities
      =============================================
  */

  $('.mt-container').each(function () {
    var ps = new PerfectScrollbar($(this)[0]);
  });
  var topSellingProduct = new PerfectScrollbar('.widget-table-three .table-scroll table', {
    wheelSpeed: .5,
    swipeEasing: !0,
    minScrollbarLength: 40,
    maxScrollbarLength: 100,
    suppressScrollY: true
  });
} catch (e) {
  console.log(e);
}

/***/ }),

/***/ "./public/template/cork/plugins/apex/apexcharts.min.js":
/*!*************************************************************!*\
  !*** ./public/template/cork/plugins/apex/apexcharts.min.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * ApexCharts v3.6.12
 * (c) 2018-2019 Juned Chhipa
 * Released under the MIT License.
 */
!function (t, e) {
  "object" == ( false ? 0 : _typeof(exports)) && "undefined" != "object" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;
}(this, function () {
  "use strict";

  function t(e) {
    return (t = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : _typeof(t);
    })(e);
  }

  function e(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }

  function i(t, e) {
    for (var i = 0; i < e.length; i++) {
      var s = e[i];
      s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(t, s.key, s);
    }
  }

  function s(t, e, s) {
    return e && i(t.prototype, e), s && i(t, s), t;
  }

  function a(t, e, i) {
    return e in t ? Object.defineProperty(t, e, {
      value: i,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : t[e] = i, t;
  }

  function n(t) {
    for (var e = 1; e < arguments.length; e++) {
      var i = null != arguments[e] ? arguments[e] : {},
          s = Object.keys(i);
      "function" == typeof Object.getOwnPropertySymbols && (s = s.concat(Object.getOwnPropertySymbols(i).filter(function (t) {
        return Object.getOwnPropertyDescriptor(i, t).enumerable;
      }))), s.forEach(function (e) {
        a(t, e, i[e]);
      });
    }

    return t;
  }

  function r(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), e && l(t, e);
  }

  function o(t) {
    return (o = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    })(t);
  }

  function l(t, e) {
    return (l = Object.setPrototypeOf || function (t, e) {
      return t.__proto__ = e, t;
    })(t, e);
  }

  function h(t, e) {
    return !e || "object" != _typeof(e) && "function" != typeof e ? function (t) {
      if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return t;
    }(t) : e;
  }

  function c(t) {
    return function (t) {
      if (Array.isArray(t)) {
        for (var e = 0, i = new Array(t.length); e < t.length; e++) {
          i[e] = t[e];
        }

        return i;
      }
    }(t) || function (t) {
      if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) return Array.from(t);
    }(t) || function () {
      throw new TypeError("Invalid attempt to spread non-iterable instance");
    }();
  }

  var d = function () {
    function i() {
      e(this, i);
    }

    return s(i, [{
      key: "shadeRGBColor",
      value: function value(t, e) {
        var i = e.split(","),
            s = t < 0 ? 0 : 255,
            a = t < 0 ? -1 * t : t,
            n = parseInt(i[0].slice(4)),
            r = parseInt(i[1]),
            o = parseInt(i[2]);
        return "rgb(" + (Math.round((s - n) * a) + n) + "," + (Math.round((s - r) * a) + r) + "," + (Math.round((s - o) * a) + o) + ")";
      }
    }, {
      key: "shadeHexColor",
      value: function value(t, e) {
        var i = parseInt(e.slice(1), 16),
            s = t < 0 ? 0 : 255,
            a = t < 0 ? -1 * t : t,
            n = i >> 16,
            r = i >> 8 & 255,
            o = 255 & i;
        return "#" + (16777216 + 65536 * (Math.round((s - n) * a) + n) + 256 * (Math.round((s - r) * a) + r) + (Math.round((s - o) * a) + o)).toString(16).slice(1);
      }
    }, {
      key: "shadeColor",
      value: function value(t, e) {
        return e.length > 7 ? this.shadeRGBColor(t, e) : this.shadeHexColor(t, e);
      }
    }], [{
      key: "bind",
      value: function value(t, e) {
        return function () {
          return t.apply(e, arguments);
        };
      }
    }, {
      key: "isObject",
      value: function value(e) {
        return e && "object" === t(e) && !Array.isArray(e) && null != e;
      }
    }, {
      key: "listToArray",
      value: function value(t) {
        var e,
            i = [];

        for (e = 0; e < t.length; e++) {
          i[e] = t[e];
        }

        return i;
      }
    }, {
      key: "extend",
      value: function value(t, e) {
        var i = this;
        "function" != typeof Object.assign && (Object.assign = function (t) {
          if (null == t) throw new TypeError("Cannot convert undefined or null to object");

          for (var e = Object(t), i = 1; i < arguments.length; i++) {
            var s = arguments[i];
            if (null != s) for (var a in s) {
              s.hasOwnProperty(a) && (e[a] = s[a]);
            }
          }

          return e;
        });
        var s = Object.assign({}, t);
        return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function (n) {
          i.isObject(e[n]) && n in t ? s[n] = i.extend(t[n], e[n]) : Object.assign(s, a({}, n, e[n]));
        }), s;
      }
    }, {
      key: "extendArray",
      value: function value(t, e) {
        var s = [];
        return t.map(function (t) {
          s.push(i.extend(e, t));
        }), t = s;
      }
    }, {
      key: "monthMod",
      value: function value(t) {
        return t % 12;
      }
    }, {
      key: "addProps",
      value: function value(t, e, i) {
        "string" == typeof e && (e = e.split(".")), t[e[0]] = t[e[0]] || {};
        var s = t[e[0]];
        return e.length > 1 ? (e.shift(), this.addProps(s, e, i)) : t[e[0]] = i, t;
      }
    }, {
      key: "clone",
      value: function value(e) {
        if ("[object Array]" === Object.prototype.toString.call(e)) {
          for (var i = [], s = 0; s < e.length; s++) {
            i[s] = this.clone(e[s]);
          }

          return i;
        }

        if ("object" === t(e)) {
          var a = {};

          for (var n in e) {
            e.hasOwnProperty(n) && (a[n] = this.clone(e[n]));
          }

          return a;
        }

        return e;
      }
    }, {
      key: "log10",
      value: function value(t) {
        return Math.log(t) / Math.LN10;
      }
    }, {
      key: "roundToBase10",
      value: function value(t) {
        return Math.pow(10, Math.floor(Math.log10(t)));
      }
    }, {
      key: "roundToBase",
      value: function value(t, e) {
        return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));
      }
    }, {
      key: "parseNumber",
      value: function value(t) {
        return null === t ? t : parseFloat(t);
      }
    }, {
      key: "noExponents",
      value: function value(t) {
        var e = String(t).split(/[eE]/);
        if (1 == e.length) return e[0];
        var i = "",
            s = t < 0 ? "-" : "",
            a = e[0].replace(".", ""),
            n = Number(e[1]) + 1;

        if (n < 0) {
          for (i = s + "0."; n++;) {
            i += "0";
          }

          return i + a.replace(/^\-/, "");
        }

        for (n -= a.length; n--;) {
          i += "0";
        }

        return a + i;
      }
    }, {
      key: "getDimensions",
      value: function value(t) {
        var e = getComputedStyle(t),
            i = [],
            s = t.clientHeight,
            a = t.clientWidth;
        return s -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight), i.push(a), i.push(s), i;
      }
    }, {
      key: "getBoundingClientRect",
      value: function value(t) {
        var e = t.getBoundingClientRect();
        return {
          top: e.top,
          right: e.right,
          bottom: e.bottom,
          left: e.left,
          width: e.width,
          height: e.height,
          x: e.x,
          y: e.y
        };
      }
    }, {
      key: "hexToRgba",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999",
            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;
        "#" !== t.substring(0, 1) && (t = "#999999");
        var i = t.replace("#", "");
        i = i.match(new RegExp("(.{" + i.length / 3 + "})", "g"));

        for (var s = 0; s < i.length; s++) {
          i[s] = parseInt(1 === i[s].length ? i[s] + i[s] : i[s], 16);
        }

        return void 0 !== e && i.push(e), "rgba(" + i.join(",") + ")";
      }
    }, {
      key: "getOpacityFromRGBA",
      value: function value(t) {
        return (t = t.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i))[3];
      }
    }, {
      key: "rgb2hex",
      value: function value(t) {
        return (t = t.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t.length ? "#" + ("0" + parseInt(t[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t[3], 10).toString(16)).slice(-2) : "";
      }
    }, {
      key: "isColorHex",
      value: function value(t) {
        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t);
      }
    }, {
      key: "polarToCartesian",
      value: function value(t, e, i, s) {
        var a = (s - 90) * Math.PI / 180;
        return {
          x: t + i * Math.cos(a),
          y: e + i * Math.sin(a)
        };
      }
    }, {
      key: "escapeString",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x",
            i = t.toString().slice();
        return i = i.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, e);
      }
    }, {
      key: "negToZero",
      value: function value(t) {
        return t < 0 ? 0 : t;
      }
    }, {
      key: "moveIndexInArray",
      value: function value(t, e, i) {
        if (i >= t.length) for (var s = i - t.length + 1; s--;) {
          t.push(void 0);
        }
        return t.splice(i, 0, t.splice(e, 1)[0]), t;
      }
    }, {
      key: "extractNumber",
      value: function value(t) {
        return parseFloat(t.replace(/[^\d\.]*/g, ""));
      }
    }, {
      key: "randomString",
      value: function value(t) {
        for (var e = "", i = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz", s = 0; s < t; s++) {
          e += i.charAt(Math.floor(Math.random() * i.length));
        }

        return e;
      }
    }, {
      key: "findAncestor",
      value: function value(t, e) {
        for (; (t = t.parentElement) && !t.classList.contains(e);) {
          ;
        }

        return t;
      }
    }, {
      key: "setELstyles",
      value: function value(t, e) {
        for (var i in e) {
          e.hasOwnProperty(i) && (t.style.key = e[i]);
        }
      }
    }, {
      key: "isNumber",
      value: function value(t) {
        return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));
      }
    }, {
      key: "isFloat",
      value: function value(t) {
        return Number(t) === t && t % 1 != 0;
      }
    }, {
      key: "isSafari",
      value: function value() {
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      }
    }, {
      key: "isFirefox",
      value: function value() {
        return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      }
    }, {
      key: "isIE11",
      value: function value() {
        if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1) return !0;
      }
    }, {
      key: "isIE",
      value: function value() {
        var t = window.navigator.userAgent,
            e = t.indexOf("MSIE ");
        if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(".", e)), 10);

        if (t.indexOf("Trident/") > 0) {
          var i = t.indexOf("rv:");
          return parseInt(t.substring(i + 3, t.indexOf(".", i)), 10);
        }

        var s = t.indexOf("Edge/");
        return s > 0 && parseInt(t.substring(s + 5, t.indexOf(".", s)), 10);
      }
    }]), i;
  }(),
      u = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "getDefaultFilter",
      value: function value(t, e) {
        var i = this.w;
        t.unfilter(!0), new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), "none" !== i.config.states.normal.filter ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value) : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);
      }
    }, {
      key: "addNormalFilter",
      value: function value(t, e) {
        var i = this.w;
        i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);
      }
    }, {
      key: "addLightenFilter",
      value: function value(t, e, i) {
        var s = this,
            a = this.w,
            n = i.intensity;

        if (!d.isFirefox()) {
          t.unfilter(!0);
          var r = new window.SVG.Filter();
          r.size("120%", "180%", "-5%", "-40%"), t.filter(function (t) {
            var i = a.config.chart.dropShadow;
            (r = i.enabled ? s.addShadow(t, e, i) : t).componentTransfer({
              rgb: {
                type: "linear",
                slope: 1.5,
                intercept: n
              }
            });
          }), t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse");
        }
      }
    }, {
      key: "addDarkenFilter",
      value: function value(t, e, i) {
        var s = this,
            a = this.w,
            n = i.intensity;

        if (!d.isFirefox()) {
          t.unfilter(!0);
          var r = new window.SVG.Filter();
          r.size("120%", "180%", "-5%", "-40%"), t.filter(function (t) {
            var i = a.config.chart.dropShadow;
            (r = i.enabled ? s.addShadow(t, e, i) : t).componentTransfer({
              rgb: {
                type: "linear",
                slope: n
              }
            });
          }), t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse");
        }
      }
    }, {
      key: "applyFilter",
      value: function value(t, e, i) {
        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;

        switch (i) {
          case "none":
            this.addNormalFilter(t, e);
            break;

          case "lighten":
            this.addLightenFilter(t, e, {
              intensity: s
            });
            break;

          case "darken":
            this.addDarkenFilter(t, e, {
              intensity: s
            });
        }
      }
    }, {
      key: "addShadow",
      value: function value(t, e, i) {
        var s = i.blur,
            a = i.top,
            n = i.left,
            r = i.color,
            o = i.opacity,
            l = t.flood(Array.isArray(r) ? r[e] : r, o).composite(t.sourceAlpha, "in").offset(n, a).gaussianBlur(s).merge(t.source);
        return t.blend(t.source, l);
      }
    }, {
      key: "dropShadow",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
            s = e.top,
            a = e.left,
            n = e.blur,
            r = e.color,
            o = e.opacity,
            l = e.noUserSpaceOnUse;
        return t.unfilter(!0), r = Array.isArray(r) ? r[i] : r, new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"), t.filter(function (t) {
          var e = null;
          e = d.isSafari() || d.isFirefox() || d.isIE() ? t.flood(r, o).composite(t.sourceAlpha, "in").offset(a, s).gaussianBlur(n) : t.flood(r, o).composite(t.sourceAlpha, "in").offset(a, s).gaussianBlur(n).merge(t.source), t.blend(t.source, e);
        }), l || t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), t;
      }
    }, {
      key: "setSelectionFilter",
      value: function value(t, e, i) {
        var s = this.w;

        if (void 0 !== s.globals.selectedDataPoints[e] && s.globals.selectedDataPoints[e].indexOf(i) > -1) {
          t.node.setAttribute("selected", !0);
          var a = s.config.states.active.filter;
          "none" !== a && this.applyFilter(t, e, a.type, a.value);
        }
      }
    }]), t;
  }(),
      g = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.setEasingFunctions();
    }

    return s(t, [{
      key: "setEasingFunctions",
      value: function value() {
        var t;

        switch (this.w.config.chart.animations.easing) {
          case "linear":
            t = "-";
            break;

          case "easein":
            t = "<";
            break;

          case "easeout":
            t = ">";
            break;

          case "easeinout":
            t = "<>";
            break;

          case "swing":
            t = function t(_t) {
              var e = 1.70158;
              return (_t -= 1) * _t * ((e + 1) * _t + e) + 1;
            };

            break;

          case "bounce":
            t = function t(_t2) {
              return _t2 < 1 / 2.75 ? 7.5625 * _t2 * _t2 : _t2 < 2 / 2.75 ? 7.5625 * (_t2 -= 1.5 / 2.75) * _t2 + .75 : _t2 < 2.5 / 2.75 ? 7.5625 * (_t2 -= 2.25 / 2.75) * _t2 + .9375 : 7.5625 * (_t2 -= 2.625 / 2.75) * _t2 + .984375;
            };

            break;

          case "elastic":
            t = function t(_t3) {
              return _t3 === !!_t3 ? _t3 : Math.pow(2, -10 * _t3) * Math.sin((_t3 - .075) * (2 * Math.PI) / .3) + 1;
            };

            break;

          default:
            t = "<>";
        }

        this.w.globals.easing = t;
      }
    }, {
      key: "animateLine",
      value: function value(t, e, i, s) {
        t.attr(e).animate(s).attr(i);
      }
    }, {
      key: "animateCircleRadius",
      value: function value(t, e, i, s, a) {
        e || (e = 0), t.attr({
          r: e
        }).animate(s, a).attr({
          r: i
        });
      }
    }, {
      key: "animateCircle",
      value: function value(t, e, i, s, a) {
        t.attr({
          r: e.r,
          cx: e.cx,
          cy: e.cy
        }).animate(s, a).attr({
          r: i.r,
          cx: i.cx,
          cy: i.cy
        });
      }
    }, {
      key: "animateRect",
      value: function value(t, e, i, s, a) {
        t.attr(e).animate(s).attr(i).afterAll(function () {
          a();
        });
      }
    }, {
      key: "animatePathsGradually",
      value: function value(t) {
        var e = t.el,
            i = t.j,
            s = t.pathFrom,
            a = t.pathTo,
            n = t.speed,
            r = t.delay,
            o = t.strokeWidth,
            l = this.w,
            h = 0;
        l.config.chart.animations.animateGradually.enabled && (h = l.config.chart.animations.animateGradually.delay), l.config.chart.animations.dynamicAnimation.enabled && l.globals.dataChanged && (h = 0), this.morphSVG(e, i, s, a, n, o, r * h);
      }
    }, {
      key: "showDelayedElements",
      value: function value() {
        this.w.globals.delayedElements.forEach(function (t) {
          t.el.classList.remove("hidden");
        });
      }
    }, {
      key: "morphSVG",
      value: function value(t, e, i, s, a, n, r) {
        var o = this,
            l = this.w;
        i || (i = t.attr("pathFrom")), s || (s = t.attr("pathTo")), (!i || i.indexOf("undefined") > -1 || i.indexOf("NaN") > -1) && (i = "M 0 ".concat(l.globals.gridHeight), a = 1), (s.indexOf("undefined") > -1 || s.indexOf("NaN") > -1) && (s = "M 0 ".concat(l.globals.gridHeight), a = 1), l.globals.shouldAnimate || (a = 1), t.plot(i).animate(1, l.globals.easing, r).plot(i).animate(a, l.globals.easing, r).plot(s).afterAll(function () {
          d.isNumber(e) ? e === l.globals.series[l.globals.maxValsInArrayIndex].length - 2 && l.globals.shouldAnimate && (l.globals.animationEnded = !0) : l.globals.shouldAnimate && (l.globals.animationEnded = !0, "function" == typeof l.config.chart.events.animationEnd && l.config.chart.events.animationEnd(o.ctx, l)), o.showDelayedElements();
        });
      }
    }]), t;
  }(),
      f = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "drawLine",
      value: function value(t, e, i, s) {
        var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8",
            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
            r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null;
        return this.w.globals.dom.Paper.line().attr({
          x1: t,
          y1: e,
          x2: i,
          y2: s,
          stroke: a,
          "stroke-dasharray": n,
          "stroke-width": r
        });
      }
    }, {
      key: "drawRect",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
            a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
            n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe",
            r = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,
            o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
            l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
            h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,
            c = this.w.globals.dom.Paper.rect();
        return c.attr({
          x: t,
          y: e,
          width: i > 0 ? i : 0,
          height: s > 0 ? s : 0,
          rx: a,
          ry: a,
          fill: n,
          opacity: r,
          "stroke-width": null !== o ? o : 0,
          stroke: null !== l ? l : "none",
          "stroke-dasharray": h
        }), c;
      }
    }, {
      key: "drawPolygon",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1",
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "none";
        return this.w.globals.dom.Paper.polygon(t).attr({
          fill: i,
          stroke: e
        });
      }
    }, {
      key: "drawCircle",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            i = this.w.globals.dom.Paper.circle(2 * t);
        return null !== e && i.attr(e), i;
      }
    }, {
      key: "drawPath",
      value: function value(t) {
        var e = t.d,
            i = void 0 === e ? "" : e,
            s = t.stroke,
            a = void 0 === s ? "#a8a8a8" : s,
            n = t.strokeWidth,
            r = void 0 === n ? 1 : n,
            o = t.fill,
            l = t.fillOpacity,
            h = void 0 === l ? 1 : l,
            c = t.strokeOpacity,
            d = void 0 === c ? 1 : c,
            u = t.classes,
            g = t.strokeLinecap,
            f = void 0 === g ? null : g,
            p = t.strokeDashArray,
            x = void 0 === p ? 0 : p,
            b = this.w;
        return null === f && (f = b.config.stroke.lineCap), (i.indexOf("undefined") > -1 || i.indexOf("NaN") > -1) && (i = "M 0 ".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({
          fill: o,
          "fill-opacity": h,
          stroke: a,
          "stroke-opacity": d,
          "stroke-linecap": f,
          "stroke-width": r,
          "stroke-dasharray": x,
          "class": u
        });
      }
    }, {
      key: "group",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            e = this.w.globals.dom.Paper.group();
        return null !== t && e.attr(t), e;
      }
    }, {
      key: "move",
      value: function value(t, e) {
        var i = ["M", t, e].join(" ");
        return i;
      }
    }, {
      key: "line",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            s = null;
        return null === i ? s = ["L", t, e].join(" ") : "H" === i ? s = ["H", t].join(" ") : "V" === i && (s = ["V", e].join(" ")), s;
      }
    }, {
      key: "curve",
      value: function value(t, e, i, s, a, n) {
        var r = ["C", t, e, i, s, a, n].join(" ");
        return r;
      }
    }, {
      key: "quadraticCurve",
      value: function value(t, e, i, s) {
        return ["Q", t, e, i, s].join(" ");
      }
    }, {
      key: "arc",
      value: function value(t, e, i, s, a, n, r) {
        var o = "A";
        arguments.length > 7 && void 0 !== arguments[7] && arguments[7] && (o = "a");
        var l = [o, t, e, i, s, a, n, r].join(" ");
        return l;
      }
    }, {
      key: "renderPaths",
      value: function value(t) {
        var e,
            i = t.i,
            s = t.j,
            a = t.realIndex,
            r = t.pathFrom,
            o = t.pathTo,
            l = t.stroke,
            h = t.strokeWidth,
            c = t.strokeLinecap,
            d = t.fill,
            f = t.animationDelay,
            p = t.initialSpeed,
            x = t.dataChangeSpeed,
            b = t.className,
            m = t.id,
            v = t.shouldClipToGrid,
            y = void 0 === v || v,
            w = t.bindEventsOnPaths,
            k = void 0 === w || w,
            A = t.drawShadow,
            S = void 0 === A || A,
            C = this.w,
            L = new u(this.ctx),
            z = new g(this.ctx),
            P = this.w.config.chart.animations.enabled,
            M = P && this.w.config.chart.animations.dynamicAnimation.enabled,
            E = !!(P && !C.globals.resized || M && C.globals.dataChanged && C.globals.shouldAnimate);
        E ? e = r : (e = o, this.w.globals.animationEnded = !0);
        var T = C.config.stroke.dashArray,
            X = 0;
        X = Array.isArray(T) ? T[a] : C.config.stroke.dashArray;
        var I = this.drawPath({
          d: e,
          stroke: l,
          strokeWidth: h,
          fill: d,
          fillOpacity: 1,
          classes: b,
          strokeLinecap: c,
          strokeDashArray: X
        });
        if (I.attr("id", "".concat(m, "-").concat(i)), I.attr("index", a), y && I.attr({
          "clip-path": "url(#gridRectMask".concat(C.globals.cuid, ")")
        }), "none" !== C.config.states.normal.filter.type) L.getDefaultFilter(I, a);else if (C.config.chart.dropShadow.enabled && S && (!C.config.chart.dropShadow.enabledSeries || C.config.chart.dropShadow.enabledSeries && -1 !== C.config.chart.dropShadow.enabledSeries.indexOf(a))) {
          var Y = C.config.chart.dropShadow;
          L.dropShadow(I, Y, a);
        }
        k && (I.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, I)), I.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, I)), I.node.addEventListener("mousedown", this.pathMouseDown.bind(this, I))), I.attr({
          pathTo: o,
          pathFrom: r
        });
        var F = {
          el: I,
          j: s,
          pathFrom: r,
          pathTo: o,
          strokeWidth: h
        };
        return !P || C.globals.resized || C.globals.dataChanged ? !C.globals.resized && C.globals.dataChanged || z.showDelayedElements() : z.animatePathsGradually(n({}, F, {
          speed: p,
          delay: f
        })), C.globals.dataChanged && M && E && z.animatePathsGradually(n({}, F, {
          speed: x
        })), I;
      }
    }, {
      key: "drawPattern",
      value: function value(t, e, i) {
        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8",
            a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
        return this.w.globals.dom.Paper.pattern(e, i, function (n) {
          "horizontalLines" === t ? n.line(0, 0, i, 0).stroke({
            color: s,
            width: a + 1
          }) : "verticalLines" === t ? n.line(0, 0, 0, e).stroke({
            color: s,
            width: a + 1
          }) : "slantedLines" === t ? n.line(0, 0, e, i).stroke({
            color: s,
            width: a
          }) : "squares" === t ? n.rect(e, i).fill("none").stroke({
            color: s,
            width: a
          }) : "circles" === t && n.circle(e).fill("none").stroke({
            color: s,
            width: a
          });
        });
      }
    }, {
      key: "drawGradient",
      value: function value(t, e, i, s, a) {
        var n,
            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
            l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
            h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
            c = this.w;
        e = d.hexToRgba(e, s), i = d.hexToRgba(i, a);
        var u = 0,
            g = 1,
            f = 1,
            p = null;
        null !== o && (u = void 0 !== o[0] ? o[0] / 100 : 0, g = void 0 !== o[1] ? o[1] / 100 : 1, f = void 0 !== o[2] ? o[2] / 100 : 1, p = void 0 !== o[3] ? o[3] / 100 : null);
        var x = !("donut" !== c.config.chart.type && "pie" !== c.config.chart.type && "bubble" !== c.config.chart.type);

        if (n = null === l || 0 === l.length ? c.globals.dom.Paper.gradient(x ? "radial" : "linear", function (t) {
          t.at(u, e, s), t.at(g, i, a), t.at(f, i, a), null !== p && t.at(p, e, s);
        }) : c.globals.dom.Paper.gradient(x ? "radial" : "linear", function (t) {
          (Array.isArray(l[h]) ? l[h] : l).forEach(function (e) {
            t.at(e.offset / 100, e.color, e.opacity);
          });
        }), x) {
          var b = c.globals.gridWidth / 2,
              m = c.globals.gridHeight / 2;
          "bubble" !== c.config.chart.type ? n.attr({
            gradientUnits: "userSpaceOnUse",
            cx: b,
            cy: m,
            r: r
          }) : n.attr({
            cx: .5,
            cy: .5,
            r: .8,
            fx: .2,
            fy: .2
          });
        } else "vertical" === t ? n.from(0, 0).to(0, 1) : "diagonal" === t ? n.from(0, 0).to(1, 1) : "horizontal" === t ? n.from(0, 1).to(1, 1) : "diagonal2" === t && n.from(0, 1).to(2, 2);

        return n;
      }
    }, {
      key: "drawText",
      value: function value(t) {
        var e,
            i = this.w,
            s = t.x,
            a = t.y,
            n = t.text,
            r = t.textAnchor,
            o = t.fontSize,
            l = t.fontFamily,
            h = t.foreColor,
            c = t.opacity;
        return void 0 === n && (n = ""), r || (r = "start"), h || (h = i.config.chart.foreColor), l = l || i.config.chart.fontFamily, (e = Array.isArray(n) ? i.globals.dom.Paper.text(function (t) {
          for (var e = 0; e < n.length; e++) {
            t.tspan(n[e]);
          }
        }) : i.globals.dom.Paper.plain(n)).attr({
          x: s,
          y: a,
          "text-anchor": r,
          "dominant-baseline": "auto",
          "font-size": o,
          "font-family": l,
          fill: h,
          "class": (t.cssClass, t.cssClass)
        }), e.node.style.fontFamily = l, e.node.style.opacity = c, e;
      }
    }, {
      key: "addTspan",
      value: function value(t, e, i) {
        var s = t.tspan(e);
        i || (i = this.w.config.chart.fontFamily), s.node.style.fontFamily = i;
      }
    }, {
      key: "drawMarker",
      value: function value(t, e, i) {
        t = t || 0;
        var s = i.pSize || 0,
            a = null;

        if ("square" === i.shape) {
          var n = void 0 === i.pRadius ? s / 2 : i.pRadius;
          null === e && (s = 0, n = 0);
          var r = 1.2 * s + n,
              o = this.drawRect(r, r, r, r, n);
          o.attr({
            x: t - r / 2,
            y: e - r / 2,
            cx: t,
            cy: e,
            "class": i["class"] ? i["class"] : "",
            fill: i.pointFillColor,
            "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
            stroke: i.pointStrokeColor,
            "stroke-width": i.pWidth ? i.pWidth : 0,
            "stroke-opacity": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1
          }), a = o;
        } else "circle" === i.shape && (d.isNumber(e) || (s = 0, e = 0), a = this.drawCircle(s, {
          cx: t,
          cy: e,
          "class": i["class"] ? i["class"] : "",
          stroke: i.pointStrokeColor,
          fill: i.pointFillColor,
          "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
          "stroke-width": i.pWidth ? i.pWidth : 0,
          "stroke-opacity": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1
        }));

        return a;
      }
    }, {
      key: "pathMouseEnter",
      value: function value(t, e) {
        var i = this.w,
            s = new u(this.ctx),
            a = parseInt(t.node.getAttribute("index")),
            n = parseInt(t.node.getAttribute("j"));

        if ("function" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {
          seriesIndex: a,
          dataPointIndex: n,
          w: i
        }), this.ctx.fireEvent("dataPointMouseEnter", [e, this.ctx, {
          seriesIndex: a,
          dataPointIndex: n,
          w: i
        }]), ("none" === i.config.states.active.filter.type || "true" !== t.node.getAttribute("selected")) && "none" !== i.config.states.hover.filter.type && "none" !== i.config.states.active.filter.type && !i.globals.isTouchDevice) {
          var r = i.config.states.hover.filter;
          s.applyFilter(t, a, r.type, r.value);
        }
      }
    }, {
      key: "pathMouseLeave",
      value: function value(t, e) {
        var i = this.w,
            s = new u(this.ctx),
            a = parseInt(t.node.getAttribute("index")),
            n = parseInt(t.node.getAttribute("j"));
        "function" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {
          seriesIndex: a,
          dataPointIndex: n,
          w: i
        }), this.ctx.fireEvent("dataPointMouseLeave", [e, this.ctx, {
          seriesIndex: a,
          dataPointIndex: n,
          w: i
        }]), "none" !== i.config.states.active.filter.type && "true" === t.node.getAttribute("selected") || "none" !== i.config.states.hover.filter.type && s.getDefaultFilter(t, a);
      }
    }, {
      key: "pathMouseDown",
      value: function value(t, e) {
        var i = this.w,
            s = new u(this.ctx),
            a = parseInt(t.node.getAttribute("index")),
            n = parseInt(t.node.getAttribute("j")),
            r = "false";

        if ("true" === t.node.getAttribute("selected")) {
          if (t.node.setAttribute("selected", "false"), i.globals.selectedDataPoints[a].indexOf(n) > -1) {
            var o = i.globals.selectedDataPoints[a].indexOf(n);
            i.globals.selectedDataPoints[a].splice(o, 1);
          }
        } else {
          if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {
            i.globals.selectedDataPoints = [];
            var l = i.globals.dom.Paper.select(".apexcharts-series path").members,
                h = i.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members;
            l.forEach(function (t) {
              t.node.setAttribute("selected", "false"), s.getDefaultFilter(t, a);
            }), h.forEach(function (t) {
              t.node.setAttribute("selected", "false"), s.getDefaultFilter(t, a);
            });
          }

          t.node.setAttribute("selected", "true"), r = "true", void 0 === i.globals.selectedDataPoints[a] && (i.globals.selectedDataPoints[a] = []), i.globals.selectedDataPoints[a].push(n);
        }

        if ("true" === r) {
          var c = i.config.states.active.filter;
          "none" !== c && s.applyFilter(t, a, c.type, c.value);
        } else "none" !== i.config.states.active.filter.type && s.getDefaultFilter(t, a);

        "function" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {
          selectedDataPoints: i.globals.selectedDataPoints,
          seriesIndex: a,
          dataPointIndex: n,
          w: i
        }), this.ctx.fireEvent("dataPointSelection", [e, this.ctx, {
          selectedDataPoints: i.globals.selectedDataPoints,
          seriesIndex: a,
          dataPointIndex: n,
          w: i
        }]);
      }
    }, {
      key: "rotateAroundCenter",
      value: function value(t) {
        var e = t.getBBox();
        return {
          x: e.x + e.width / 2,
          y: e.y + e.height / 2
        };
      }
    }, {
      key: "getTextRects",
      value: function value(t, e, i, s) {
        var a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
            n = this.w,
            r = this.drawText({
          x: -200,
          y: -200,
          text: t,
          textAnchor: "start",
          fontSize: e,
          fontFamily: i,
          foreColor: "#fff",
          opacity: 0
        });
        s && r.attr("transform", s), n.globals.dom.Paper.add(r);
        var o = r.bbox();
        return a || (o = r.node.getBoundingClientRect()), r.remove(), {
          width: o.width,
          height: o.height
        };
      }
    }, {
      key: "placeTextWithEllipsis",
      value: function value(t, e, i) {
        if (t.textContent = e, e.length > 0 && t.getSubStringLength(0, e.length) >= i) {
          for (var s = e.length - 3; s > 0; s -= 3) {
            if (t.getSubStringLength(0, s) <= i) return void (t.textContent = e.substring(0, s) + "...");
          }

          t.textContent = "...";
        }
      }
    }], [{
      key: "setAttrs",
      value: function value(t, e) {
        for (var i in e) {
          e.hasOwnProperty(i) && t.setAttribute(i, e[i]);
        }
      }
    }]), t;
  }();

  var p = {
    name: "en",
    options: {
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      toolbar: {
        exportToSVG: "Download SVG",
        exportToPNG: "Download PNG",
        menu: "Menu",
        selection: "Selection",
        selectionZoom: "Selection Zoom",
        zoomIn: "Zoom In",
        zoomOut: "Zoom Out",
        pan: "Panning",
        reset: "Reset Zoom"
      }
    }
  },
      x = function () {
    function t() {
      e(this, t), this.yAxis = {
        show: !0,
        showAlways: !1,
        seriesName: void 0,
        opposite: !1,
        reversed: !1,
        logarithmic: !1,
        tickAmount: void 0,
        forceNiceScale: !1,
        max: void 0,
        min: void 0,
        floating: !1,
        decimalsInFloat: void 0,
        labels: {
          show: !0,
          minWidth: 0,
          maxWidth: 160,
          offsetX: 0,
          offsetY: 0,
          align: void 0,
          rotate: 0,
          padding: 20,
          style: {
            colors: [],
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: ""
          },
          formatter: void 0
        },
        axisBorder: {
          show: !1,
          color: "#78909C",
          offsetX: 0,
          offsetY: 0
        },
        axisTicks: {
          show: !1,
          color: "#78909C",
          width: 6,
          offsetX: 0,
          offsetY: 0
        },
        title: {
          text: void 0,
          rotate: 90,
          offsetY: 0,
          offsetX: 0,
          style: {
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: ""
          }
        },
        tooltip: {
          enabled: !1,
          offsetX: 0
        },
        crosshairs: {
          show: !0,
          position: "front",
          stroke: {
            color: "#b6b6b6",
            width: 1,
            dashArray: 0
          }
        }
      }, this.xAxisAnnotation = {
        x: 0,
        x2: null,
        strokeDashArray: 1,
        fillColor: "#c2c2c2",
        borderColor: "#c2c2c2",
        opacity: .3,
        offsetX: 0,
        offsetY: 0,
        label: {
          borderColor: "#c2c2c2",
          borderWidth: 1,
          text: void 0,
          textAnchor: "middle",
          orientation: "vertical",
          position: "top",
          offsetX: 0,
          offsetY: 0,
          style: {
            background: "#fff",
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: "",
            padding: {
              left: 5,
              right: 5,
              top: 2,
              bottom: 2
            }
          }
        }
      }, this.yAxisAnnotation = {
        y: 0,
        y2: null,
        strokeDashArray: 1,
        fillColor: "#c2c2c2",
        borderColor: "#c2c2c2",
        opacity: .3,
        offsetX: 0,
        offsetY: 0,
        yAxisIndex: 0,
        label: {
          borderColor: "#c2c2c2",
          borderWidth: 1,
          text: void 0,
          textAnchor: "end",
          position: "right",
          offsetX: 0,
          offsetY: -3,
          style: {
            background: "#fff",
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: "",
            padding: {
              left: 5,
              right: 5,
              top: 0,
              bottom: 2
            }
          }
        }
      }, this.pointAnnotation = {
        x: 0,
        y: null,
        yAxisIndex: 0,
        seriesIndex: 0,
        marker: {
          size: 0,
          fillColor: "#fff",
          strokeWidth: 2,
          strokeColor: "#0e1726",
          shape: "circle",
          offsetX: 0,
          offsetY: 0,
          radius: 2,
          cssClass: ""
        },
        label: {
          borderColor: "#c2c2c2",
          borderWidth: 1,
          text: void 0,
          textAnchor: "middle",
          offsetX: 0,
          offsetY: -15,
          style: {
            background: "#fff",
            color: void 0,
            fontSize: "11px",
            fontFamily: void 0,
            cssClass: "",
            padding: {
              left: 5,
              right: 5,
              top: 0,
              bottom: 2
            }
          }
        },
        customSVG: {
          SVG: void 0,
          cssClass: void 0,
          offsetX: 0,
          offsetY: 0
        }
      };
    }

    return s(t, [{
      key: "init",
      value: function value() {
        return {
          annotations: {
            position: "front",
            yaxis: [this.yAxisAnnotation],
            xaxis: [this.xAxisAnnotation],
            points: [this.pointAnnotation]
          },
          chart: {
            animations: {
              enabled: !0,
              easing: "easeinout",
              speed: 800,
              animateGradually: {
                delay: 150,
                enabled: !0
              },
              dynamicAnimation: {
                enabled: !0,
                speed: 350
              }
            },
            background: "transparent",
            locales: [p],
            defaultLocale: "en",
            dropShadow: {
              enabled: !1,
              enabledSeries: void 0,
              top: 2,
              left: 2,
              blur: 4,
              color: "#000",
              opacity: .35
            },
            events: {
              animationEnd: void 0,
              beforeMount: void 0,
              mounted: void 0,
              updated: void 0,
              click: void 0,
              legendClick: void 0,
              markerClick: void 0,
              selection: void 0,
              dataPointSelection: void 0,
              dataPointMouseEnter: void 0,
              dataPointMouseLeave: void 0,
              beforeZoom: void 0,
              zoomed: void 0,
              scrolled: void 0
            },
            foreColor: "#373d3f",
            fontFamily: "Helvetica, Arial, sans-serif",
            height: "auto",
            parentHeightOffset: 15,
            id: void 0,
            group: void 0,
            offsetX: 0,
            offsetY: 0,
            selection: {
              enabled: !1,
              type: "x",
              fill: {
                color: "#24292e",
                opacity: .1
              },
              stroke: {
                width: 1,
                color: "#24292e",
                opacity: .4,
                dashArray: 3
              },
              xaxis: {
                min: void 0,
                max: void 0
              },
              yaxis: {
                min: void 0,
                max: void 0
              }
            },
            sparkline: {
              enabled: !1
            },
            brush: {
              enabled: !1,
              autoScaleYaxis: !1,
              target: void 0
            },
            stacked: !1,
            stackType: "normal",
            toolbar: {
              show: !0,
              tools: {
                download: !0,
                selection: !0,
                zoom: !0,
                zoomin: !0,
                zoomout: !0,
                pan: !0,
                reset: !0,
                customIcons: []
              },
              autoSelected: "zoom"
            },
            type: "line",
            width: "100%",
            zoom: {
              enabled: !0,
              type: "x",
              zoomedArea: {
                fill: {
                  color: "#90CAF9",
                  opacity: .4
                },
                stroke: {
                  color: "#0D47A1",
                  opacity: .4,
                  width: 1
                }
              }
            }
          },
          plotOptions: {
            bar: {
              horizontal: !1,
              columnWidth: "70%",
              barHeight: "70%",
              distributed: !1,
              endingShape: "flat",
              colors: {
                ranges: [],
                backgroundBarColors: [],
                backgroundBarOpacity: 1
              },
              dataLabels: {
                maxItems: 100,
                hideOverflowingLabels: !0,
                position: "top"
              }
            },
            candlestick: {
              colors: {
                upward: "#00B746",
                downward: "#EF403C"
              },
              wick: {
                useFillColor: !0
              }
            },
            heatmap: {
              radius: 2,
              enableShades: !0,
              shadeIntensity: .5,
              reverseNegativeShade: !0,
              distributed: !1,
              colorScale: {
                inverse: !1,
                ranges: [],
                min: void 0,
                max: void 0
              }
            },
            radialBar: {
              size: void 0,
              inverseOrder: !1,
              startAngle: 0,
              endAngle: 360,
              offsetX: 0,
              offsetY: 0,
              hollow: {
                margin: 5,
                size: "50%",
                background: "transparent",
                image: void 0,
                imageWidth: 150,
                imageHeight: 150,
                imageOffsetX: 0,
                imageOffsetY: 0,
                imageClipped: !0,
                position: "front",
                dropShadow: {
                  enabled: !1,
                  top: 0,
                  left: 0,
                  blur: 3,
                  color: "#000",
                  opacity: .5
                }
              },
              track: {
                show: !0,
                startAngle: void 0,
                endAngle: void 0,
                background: "#f2f2f2",
                strokeWidth: "97%",
                opacity: 1,
                margin: 5,
                dropShadow: {
                  enabled: !1,
                  top: 0,
                  left: 0,
                  blur: 3,
                  color: "#000",
                  opacity: .5
                }
              },
              dataLabels: {
                show: !0,
                name: {
                  show: !0,
                  fontSize: "16px",
                  fontFamily: void 0,
                  color: void 0,
                  offsetY: 0
                },
                value: {
                  show: !0,
                  fontSize: "14px",
                  fontFamily: void 0,
                  color: void 0,
                  offsetY: 16,
                  formatter: function formatter(t) {
                    return t + "%";
                  }
                },
                total: {
                  show: !1,
                  label: "Total",
                  color: void 0,
                  formatter: function formatter(t) {
                    return t.globals.seriesTotals.reduce(function (t, e) {
                      return t + e;
                    }, 0) / t.globals.series.length + "%";
                  }
                }
              }
            },
            rangeBar: {},
            pie: {
              size: void 0,
              customScale: 1,
              offsetX: 0,
              offsetY: 0,
              expandOnClick: !0,
              dataLabels: {
                offset: 0,
                minAngleToShowLabel: 10
              },
              donut: {
                size: "65%",
                background: "transparent",
                labels: {
                  show: !1,
                  name: {
                    show: !0,
                    fontSize: "16px",
                    fontFamily: void 0,
                    color: void 0,
                    offsetY: -10
                  },
                  value: {
                    show: !0,
                    fontSize: "20px",
                    fontFamily: void 0,
                    color: void 0,
                    offsetY: 10,
                    formatter: function formatter(t) {
                      return t;
                    }
                  },
                  total: {
                    show: !1,
                    label: "Total",
                    color: void 0,
                    formatter: function formatter(t) {
                      return t.globals.seriesTotals.reduce(function (t, e) {
                        return t + e;
                      }, 0);
                    }
                  }
                }
              }
            },
            radar: {
              size: void 0,
              offsetX: 0,
              offsetY: 0,
              polygons: {
                strokeColors: "#e8e8e8",
                connectorColors: "#e8e8e8",
                fill: {
                  colors: void 0
                }
              }
            }
          },
          colors: void 0,
          dataLabels: {
            enabled: !0,
            enabledOnSeries: void 0,
            formatter: function formatter(t) {
              return t;
            },
            textAnchor: "middle",
            offsetX: 0,
            offsetY: 0,
            style: {
              fontSize: "12px",
              fontFamily: void 0,
              colors: void 0
            },
            dropShadow: {
              enabled: !1,
              top: 1,
              left: 1,
              blur: 1,
              color: "#000",
              opacity: .45
            }
          },
          fill: {
            type: "solid",
            colors: void 0,
            opacity: .85,
            gradient: {
              shade: "dark",
              type: "horizontal",
              shadeIntensity: .5,
              gradientToColors: void 0,
              inverseColors: !0,
              opacityFrom: 1,
              opacityTo: 1,
              stops: [0, 50, 100],
              colorStops: []
            },
            image: {
              src: [],
              width: void 0,
              height: void 0
            },
            pattern: {
              style: "sqaures",
              width: 6,
              height: 6,
              strokeWidth: 2
            }
          },
          grid: {
            show: !0,
            borderColor: "#e0e0e0",
            strokeDashArray: 0,
            position: "back",
            xaxis: {
              lines: {
                show: !1,
                animate: !1
              }
            },
            yaxis: {
              lines: {
                show: !0,
                animate: !1
              }
            },
            row: {
              colors: void 0,
              opacity: .5
            },
            column: {
              colors: void 0,
              opacity: .5
            },
            padding: {
              top: 0,
              right: 10,
              bottom: 0,
              left: 12
            }
          },
          labels: [],
          legend: {
            show: !0,
            showForSingleSeries: !1,
            showForNullSeries: !0,
            showForZeroSeries: !0,
            floating: !1,
            position: "bottom",
            horizontalAlign: "center",
            fontSize: "12px",
            fontFamily: void 0,
            width: void 0,
            height: void 0,
            formatter: void 0,
            offsetX: -20,
            offsetY: 0,
            labels: {
              colors: void 0,
              useSeriesColors: !1
            },
            markers: {
              width: 12,
              height: 12,
              strokeWidth: 0,
              strokeColor: "#fff",
              radius: 12,
              customHTML: void 0,
              offsetX: 0,
              offsetY: 0,
              onClick: void 0
            },
            itemMargin: {
              horizontal: 0,
              vertical: 5
            },
            onItemClick: {
              toggleDataSeries: !0
            },
            onItemHover: {
              highlightDataSeries: !0
            }
          },
          markers: {
            discrete: [],
            size: 0,
            colors: void 0,
            strokeColors: "#fff",
            strokeWidth: 2,
            strokeOpacity: .9,
            fillOpacity: 1,
            shape: "circle",
            radius: 2,
            offsetX: 0,
            offsetY: 0,
            hover: {
              size: void 0,
              sizeOffset: 3
            }
          },
          noData: {
            text: void 0,
            align: "center",
            verticalAlign: "middle",
            offsetX: 0,
            offsetY: 0,
            style: {
              color: void 0,
              fontSize: "14px",
              fontFamily: void 0
            }
          },
          responsive: [],
          series: void 0,
          states: {
            normal: {
              filter: {
                type: "none",
                value: 0
              }
            },
            hover: {
              filter: {
                type: "lighten",
                value: .15
              }
            },
            active: {
              allowMultipleDataPointsSelection: !1,
              filter: {
                type: "darken",
                value: .65
              }
            }
          },
          title: {
            text: void 0,
            align: "left",
            margin: 10,
            offsetX: 0,
            offsetY: 0,
            floating: !1,
            style: {
              fontSize: "14px",
              fontFamily: void 0,
              color: void 0
            }
          },
          subtitle: {
            text: void 0,
            align: "left",
            margin: 10,
            offsetX: 0,
            offsetY: 30,
            floating: !1,
            style: {
              fontSize: "12px",
              fontFamily: void 0,
              color: void 0
            }
          },
          stroke: {
            show: !0,
            curve: "smooth",
            lineCap: "butt",
            width: 2,
            colors: void 0,
            dashArray: 0
          },
          tooltip: {
            enabled: !0,
            enabledOnSeries: void 0,
            shared: !0,
            followCursor: !1,
            intersect: !1,
            inverseOrder: !1,
            custom: void 0,
            fillSeriesColor: !1,
            theme: "light",
            style: {
              fontSize: "12px",
              fontFamily: void 0
            },
            onDatasetHover: {
              highlightDataSeries: !1
            },
            x: {
              show: !0,
              format: "dd MMM",
              formatter: void 0
            },
            y: {
              formatter: void 0,
              title: {
                formatter: function formatter(t) {
                  return t;
                }
              }
            },
            z: {
              formatter: void 0,
              title: "Size: "
            },
            marker: {
              show: !0
            },
            items: {
              display: "flex"
            },
            fixed: {
              enabled: !1,
              position: "topRight",
              offsetX: 0,
              offsetY: 0
            }
          },
          xaxis: {
            type: "category",
            categories: [],
            offsetX: 0,
            offsetY: 0,
            labels: {
              show: !0,
              rotate: -45,
              rotateAlways: !1,
              hideOverlappingLabels: !0,
              trim: !0,
              minHeight: void 0,
              maxHeight: 120,
              showDuplicates: !0,
              style: {
                colors: [],
                fontSize: "12px",
                fontFamily: void 0,
                cssClass: ""
              },
              offsetX: 0,
              offsetY: 0,
              format: void 0,
              formatter: void 0,
              datetimeFormatter: {
                year: "yyyy",
                month: "MMM 'yy",
                day: "dd MMM",
                hour: "HH:mm",
                minute: "HH:mm:ss"
              }
            },
            axisBorder: {
              show: !0,
              color: "#78909C",
              width: "100%",
              height: 1,
              offsetX: 0,
              offsetY: 0
            },
            axisTicks: {
              show: !0,
              color: "#78909C",
              height: 6,
              offsetX: 0,
              offsetY: 0
            },
            tickAmount: void 0,
            tickPlacement: "on",
            min: void 0,
            max: void 0,
            range: void 0,
            floating: !1,
            position: "bottom",
            title: {
              text: void 0,
              offsetX: 0,
              offsetY: 0,
              style: {
                color: void 0,
                fontSize: "12px",
                fontFamily: void 0,
                cssClass: ""
              }
            },
            crosshairs: {
              show: !0,
              width: 1,
              position: "back",
              opacity: .9,
              stroke: {
                color: "#b6b6b6",
                width: 1,
                dashArray: 3
              },
              fill: {
                type: "solid",
                color: "#B1B9C4",
                gradient: {
                  colorFrom: "#D8E3F0",
                  colorTo: "#BED1E6",
                  stops: [0, 100],
                  opacityFrom: .4,
                  opacityTo: .5
                }
              },
              dropShadow: {
                enabled: !1,
                left: 0,
                top: 0,
                blur: 1,
                opacity: .4
              }
            },
            tooltip: {
              enabled: !0,
              offsetY: 0,
              formatter: void 0,
              style: {
                fontSize: "12px",
                fontFamily: void 0
              }
            }
          },
          yaxis: this.yAxis,
          theme: {
            mode: "light",
            palette: "palette1",
            monochrome: {
              enabled: !1,
              color: "#008FFB",
              shadeTo: "light",
              shadeIntensity: .65
            }
          }
        };
      }
    }]), t;
  }(),
      b = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.graphics = new f(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;
    }

    return s(t, [{
      key: "drawAnnotations",
      value: function value() {
        var t = this.w;

        if (t.globals.axisCharts) {
          for (var e = this.drawYAxisAnnotations(), i = this.drawXAxisAnnotations(), s = this.drawPointAnnotations(), a = t.config.chart.animations.enabled, n = [e, i, s], r = [i.node, e.node, s.node], o = 0; o < 3; o++) {
            t.globals.dom.elGraphical.add(n[o]), !a || t.globals.resized || t.globals.dataChanged || r[o].classList.add("hidden"), t.globals.delayedElements.push({
              el: r[o],
              index: 0
            });
          }

          this.annotationsBackground();
        }
      }
    }, {
      key: "addXaxisAnnotation",
      value: function value(t, e, i) {
        var s = this.w,
            a = this.invertAxis ? s.globals.minY : s.globals.minX,
            n = this.invertAxis ? s.globals.yRange[0] : s.globals.xRange,
            r = (t.x - a) / (n / s.globals.gridWidth),
            o = t.label.text;

        if ("category" === s.config.xaxis.type || s.config.xaxis.convertedCatToNumeric) {
          var l = s.globals.labels.indexOf(t.x),
              h = s.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (l + 1) + ")");
          h && (r = parseFloat(h.getAttribute("x")));
        }

        var c = t.strokeDashArray;

        if (!(r < 0 || r > s.globals.gridWidth)) {
          if (null === t.x2) {
            var d = this.graphics.drawLine(r + t.offsetX, 0 + t.offsetY, r + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, c);
            e.appendChild(d.node);
          } else {
            var u = (t.x2 - a) / (n / s.globals.gridWidth);

            if (u < r) {
              var g = r;
              r = u, u = g;
            }

            if (o) {
              var f = this.graphics.drawRect(r + t.offsetX, 0 + t.offsetY, u - r, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, c);
              e.appendChild(f.node);
            }
          }

          var p = "top" === t.label.position ? -3 : s.globals.gridHeight,
              x = this.graphics.drawText({
            x: r + t.label.offsetX,
            y: p + t.label.offsetY,
            text: o,
            textAnchor: t.label.textAnchor,
            fontSize: t.label.style.fontSize,
            fontFamily: t.label.style.fontFamily,
            foreColor: t.label.style.color,
            cssClass: "apexcharts-xaxis-annotation-label " + t.label.style.cssClass
          });
          x.attr({
            rel: i
          }), e.appendChild(x.node), this.setOrientations(t, i);
        }
      }
    }, {
      key: "drawXAxisAnnotations",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.graphics.group({
          "class": "apexcharts-xaxis-annotations"
        });
        return e.config.annotations.xaxis.map(function (e, s) {
          t.addXaxisAnnotation(e, i.node, s);
        }), i;
      }
    }, {
      key: "addYaxisAnnotation",
      value: function value(t, e, i) {
        var s,
            a,
            n = this.w,
            r = t.strokeDashArray;

        if (this.invertAxis) {
          var o = n.globals.labels.indexOf(t.y),
              l = n.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (o + 1) + ")");
          l && (s = parseFloat(l.getAttribute("y")));
        } else s = n.globals.gridHeight - (t.y - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight), n.config.yaxis[t.yAxisIndex] && n.config.yaxis[t.yAxisIndex].reversed && (s = (t.y - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight));

        var h = t.label.text;

        if (null === t.y2) {
          var c = this.graphics.drawLine(0 + t.offsetX, s + t.offsetY, n.globals.gridWidth + t.offsetX, s + t.offsetY, t.borderColor, r);
          e.appendChild(c.node);
        } else {
          if (this.invertAxis) {
            var d = n.globals.labels.indexOf(t.y2),
                u = n.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (d + 1) + ")");
            u && (a = parseFloat(u.getAttribute("y")));
          } else a = n.globals.gridHeight - (t.y2 - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight), n.config.yaxis[t.yAxisIndex] && n.config.yaxis[t.yAxisIndex].reversed && (a = (t.y2 - n.globals.minYArr[t.yAxisIndex]) / (n.globals.yRange[t.yAxisIndex] / n.globals.gridHeight));

          if (a > s) {
            var g = s;
            s = a, a = g;
          }

          if (h) {
            var f = this.graphics.drawRect(0 + t.offsetX, a + t.offsetY, n.globals.gridWidth + t.offsetX, s - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);
            e.appendChild(f.node);
          }
        }

        var p = "right" === t.label.position ? n.globals.gridWidth : 0,
            x = this.graphics.drawText({
          x: p + t.label.offsetX,
          y: (a || s) + t.label.offsetY - 3,
          text: h,
          textAnchor: t.label.textAnchor,
          fontSize: t.label.style.fontSize,
          fontFamily: t.label.style.fontFamily,
          foreColor: t.label.style.color,
          cssClass: "apexcharts-yaxis-annotation-label " + t.label.style.cssClass
        });
        x.attr({
          rel: i
        }), e.appendChild(x.node);
      }
    }, {
      key: "drawYAxisAnnotations",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.graphics.group({
          "class": "apexcharts-yaxis-annotations"
        });
        return e.config.annotations.yaxis.map(function (e, s) {
          t.addYaxisAnnotation(e, i.node, s);
        }), i;
      }
    }, {
      key: "clearAnnotations",
      value: function value(t) {
        var e = t.w.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
        (e = d.listToArray(e)).forEach(function (t) {
          for (; t.firstChild;) {
            t.removeChild(t.firstChild);
          }
        });
      }
    }, {
      key: "addPointAnnotation",
      value: function value(t, e, i) {
        var s = this.w,
            a = 0,
            n = 0,
            r = 0;

        if (this.invertAxis && console.warn("Point annotation is not supported in horizontal bar charts."), "string" == typeof t.x) {
          var o = s.globals.labels.indexOf(t.x),
              l = s.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (o + 1) + ")");
          a = parseFloat(l.getAttribute("x"));
          var h = t.y;
          null === t.y && (h = s.globals.series[t.seriesIndex][o]), n = s.globals.gridHeight - (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) - parseInt(t.label.style.fontSize) - t.marker.size, r = s.globals.gridHeight - (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight), s.config.yaxis[t.yAxisIndex] && s.config.yaxis[t.yAxisIndex].reversed && (n = (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) + parseInt(t.label.style.fontSize) + t.marker.size, r = (h - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight));
        } else a = (t.x - s.globals.minX) / (s.globals.xRange / s.globals.gridWidth), n = s.globals.gridHeight - (parseFloat(t.y) - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) - parseInt(t.label.style.fontSize) - t.marker.size, r = s.globals.gridHeight - (t.y - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight), s.config.yaxis[t.yAxisIndex] && s.config.yaxis[t.yAxisIndex].reversed && (n = (parseFloat(t.y) - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight) - parseInt(t.label.style.fontSize) - t.marker.size, r = (t.y - s.globals.minYArr[t.yAxisIndex]) / (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight));

        if (!(a < 0 || a > s.globals.gridWidth)) {
          var c = {
            pSize: t.marker.size,
            pWidth: t.marker.strokeWidth,
            pointFillColor: t.marker.fillColor,
            pointStrokeColor: t.marker.strokeColor,
            shape: t.marker.shape,
            radius: t.marker.radius,
            "class": "apexcharts-point-annotation-marker " + t.marker.cssClass
          },
              d = this.graphics.drawMarker(a + t.marker.offsetX, r + t.marker.offsetY, c);
          e.appendChild(d.node);
          var u = t.label.text ? t.label.text : "",
              g = this.graphics.drawText({
            x: a + t.label.offsetX,
            y: n + t.label.offsetY,
            text: u,
            textAnchor: t.label.textAnchor,
            fontSize: t.label.style.fontSize,
            fontFamily: t.label.style.fontFamily,
            foreColor: t.label.style.color,
            cssClass: "apexcharts-point-annotation-label " + t.label.style.cssClass
          });

          if (g.attr({
            rel: i
          }), e.appendChild(g.node), t.customSVG.SVG) {
            var f = this.graphics.group({
              "class": "apexcharts-point-annotations-custom-svg " + t.customSVG.cssClass
            });
            f.attr({
              transform: "translate(".concat(a + t.customSVG.offsetX, ", ").concat(n + t.customSVG.offsetY, ")")
            }), f.node.innerHTML = t.customSVG.SVG, e.appendChild(f.node);
          }
        }
      }
    }, {
      key: "drawPointAnnotations",
      value: function value() {
        var t = this,
            e = this.w,
            i = this.graphics.group({
          "class": "apexcharts-point-annotations"
        });
        return e.config.annotations.points.map(function (e, s) {
          t.addPointAnnotation(e, i.node, s);
        }), i;
      }
    }, {
      key: "setOrientations",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            i = this.w;

        if ("vertical" === t.label.orientation) {
          var s = null !== e ? e : 0,
              a = i.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(s, "']"));

          if (null !== a) {
            var n = a.getBoundingClientRect();
            a.setAttribute("x", parseFloat(a.getAttribute("x")) - n.height + 4), "top" === t.label.position ? a.setAttribute("y", parseFloat(a.getAttribute("y")) + n.width) : a.setAttribute("y", parseFloat(a.getAttribute("y")) - n.width);
            var r = this.graphics.rotateAroundCenter(a),
                o = r.x,
                l = r.y;
            a.setAttribute("transform", "rotate(-90 ".concat(o, " ").concat(l, ")"));
          }
        }
      }
    }, {
      key: "addBackgroundToAnno",
      value: function value(t, e) {
        var i = this.w;
        if (!e.label.text) return null;
        var s = i.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),
            a = t.getBoundingClientRect(),
            n = e.label.style.padding.left,
            r = e.label.style.padding.right,
            o = e.label.style.padding.top,
            l = e.label.style.padding.bottom;
        "vertical" === e.label.orientation && (o = e.label.style.padding.left, l = e.label.style.padding.right, n = e.label.style.padding.top, r = e.label.style.padding.bottom);
        var h = a.left - s.left - n,
            c = a.top - s.top - o;
        return this.graphics.drawRect(h, c, a.width + n + r, a.height + o + l, 0, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);
      }
    }, {
      key: "annotationsBackground",
      value: function value() {
        var t = this,
            e = this.w,
            i = function i(_i, s, a) {
          var n = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(a, "-annotations .apexcharts-").concat(a, "-annotation-label[rel='").concat(s, "']"));

          if (n) {
            var r = n.parentNode,
                o = t.addBackgroundToAnno(n, _i);
            o && r.insertBefore(o.node, n);
          }
        };

        e.config.annotations.xaxis.map(function (t, e) {
          i(t, e, "xaxis");
        }), e.config.annotations.yaxis.map(function (t, e) {
          i(t, e, "yaxis");
        }), e.config.annotations.points.map(function (t, e) {
          i(t, e, "point");
        });
      }
    }, {
      key: "addText",
      value: function value(t, e, i) {
        var s = t.x,
            a = t.y,
            n = t.text,
            r = t.textAnchor,
            o = t.appendTo,
            l = void 0 === o ? ".apexcharts-inner" : o,
            h = t.foreColor,
            c = t.fontSize,
            d = t.fontFamily,
            u = t.cssClass,
            g = t.backgroundColor,
            f = t.borderWidth,
            p = t.strokeDashArray,
            x = t.radius,
            b = t.borderColor,
            m = t.paddingLeft,
            v = void 0 === m ? 4 : m,
            y = t.paddingRight,
            w = void 0 === y ? 4 : y,
            k = t.paddingBottom,
            A = void 0 === k ? 2 : k,
            S = t.paddingTop,
            C = void 0 === S ? 2 : S,
            L = i,
            z = L.w,
            P = z.globals.dom.baseEl.querySelector(l),
            M = this.graphics.drawText({
          x: s,
          y: a,
          text: n,
          textAnchor: r || "start",
          fontSize: c || "12px",
          fontFamily: d || z.config.chart.fontFamily,
          foreColor: h || z.config.chart.foreColor,
          cssClass: u
        });
        P.appendChild(M.node);
        var E = M.bbox();

        if (n) {
          var T = this.graphics.drawRect(E.x - v, E.y - C, E.width + v + w, E.height + A + C, x, g, 1, f, b, p);
          M.before(T);
        }

        return e && z.globals.memory.methodsToExec.push({
          context: L,
          method: L.addText,
          params: {
            x: s,
            y: a,
            text: n,
            textAnchor: r,
            appendTo: l,
            foreColor: h,
            fontSize: c,
            cssClass: u,
            backgroundColor: g,
            borderWidth: f,
            strokeDashArray: p,
            radius: x,
            borderColor: b,
            paddingLeft: v,
            paddingRight: w,
            paddingBottom: A,
            paddingTop: C
          }
        }), i;
      }
    }, {
      key: "addPointAnnotationExternal",
      value: function value(t, e, i) {
        return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({
          params: t,
          pushToMemory: e,
          context: i,
          type: "point",
          contextMethod: i.addPointAnnotation
        }), i;
      }
    }, {
      key: "addYaxisAnnotationExternal",
      value: function value(t, e, i) {
        return this.addAnnotationExternal({
          params: t,
          pushToMemory: e,
          context: i,
          type: "yaxis",
          contextMethod: i.addYaxisAnnotation
        }), i;
      }
    }, {
      key: "addXaxisAnnotationExternal",
      value: function value(t, e, i) {
        return this.addAnnotationExternal({
          params: t,
          pushToMemory: e,
          context: i,
          type: "xaxis",
          contextMethod: i.addXaxisAnnotation
        }), i;
      }
    }, {
      key: "addAnnotationExternal",
      value: function value(t) {
        var e = t.params,
            i = t.pushToMemory,
            s = t.context,
            a = t.type,
            n = t.contextMethod,
            r = s,
            o = r.w,
            l = o.globals.dom.baseEl.querySelector(".apexcharts-".concat(a, "-annotations")),
            h = l.childNodes.length + 1,
            c = new x(),
            u = Object.assign({}, "xaxis" === a ? c.xAxisAnnotation : "yaxis" === a ? c.yAxisAnnotation : c.pointAnnotation),
            g = d.extend(u, e);

        switch (a) {
          case "xaxis":
            this.addXaxisAnnotation(g, l, h);
            break;

          case "yaxis":
            this.addYaxisAnnotation(g, l, h);
            break;

          case "point":
            this.addPointAnnotation(g, l, h);
        }

        var f = o.globals.dom.baseEl.querySelector(".apexcharts-".concat(a, "-annotations .apexcharts-").concat(a, "-annotation-label[rel='").concat(h, "']")),
            p = this.addBackgroundToAnno(f, g);
        return p && l.insertBefore(p.node, f), i && o.globals.memory.methodsToExec.push({
          context: r,
          method: n,
          params: e
        }), s;
      }
    }]), t;
  }(),
      m = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
    }

    return s(t, [{
      key: "isValidDate",
      value: function value(t) {
        return !isNaN(this.parseDate(t));
      }
    }, {
      key: "getUTCTimeStamp",
      value: function value(t) {
        return Date.parse(t) ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : t;
      }
    }, {
      key: "parseDate",
      value: function value(t) {
        var e = Date.parse(t);
        if (!isNaN(e)) return this.getUTCTimeStamp(t);
        var i = Date.parse(t.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
        return i = this.getUTCTimeStamp(i);
      }
    }, {
      key: "treatAsUtc",
      value: function value(t) {
        var e = new Date(t);
        return e.setMinutes(e.getMinutes() - e.getTimezoneOffset()), e;
      }
    }, {
      key: "formatDate",
      value: function value(t, e) {
        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
            a = this.w.globals.locale,
            n = ["\0"].concat(c(a.months)),
            r = ["\x01"].concat(c(a.shortMonths)),
            o = ["\x02"].concat(c(a.days)),
            l = ["\x03"].concat(c(a.shortDays));

        function h(t, e) {
          var i = t + "";

          for (e = e || 2; i.length < e;) {
            i = "0" + i;
          }

          return i;
        }

        s && (t = this.treatAsUtc(t));
        var d = i ? t.getUTCFullYear() : t.getFullYear();
        e = (e = (e = e.replace(/(^|[^\\])yyyy+/g, "$1" + d)).replace(/(^|[^\\])yy/g, "$1" + d.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + d);
        var u = (i ? t.getUTCMonth() : t.getMonth()) + 1;
        e = (e = (e = (e = e.replace(/(^|[^\\])MMMM+/g, "$1" + n[0])).replace(/(^|[^\\])MMM/g, "$1" + r[0])).replace(/(^|[^\\])MM/g, "$1" + h(u))).replace(/(^|[^\\])M/g, "$1" + u);
        var g = i ? t.getUTCDate() : t.getDate();
        e = (e = (e = (e = e.replace(/(^|[^\\])dddd+/g, "$1" + o[0])).replace(/(^|[^\\])ddd/g, "$1" + l[0])).replace(/(^|[^\\])dd/g, "$1" + h(g))).replace(/(^|[^\\])d/g, "$1" + g);
        var f = i ? t.getUTCHours() : t.getHours(),
            p = f > 12 ? f - 12 : 0 === f ? 12 : f;
        e = (e = (e = (e = e.replace(/(^|[^\\])HH+/g, "$1" + h(f))).replace(/(^|[^\\])H/g, "$1" + f)).replace(/(^|[^\\])hh+/g, "$1" + h(p))).replace(/(^|[^\\])h/g, "$1" + p);
        var x = i ? t.getUTCMinutes() : t.getMinutes();
        e = (e = e.replace(/(^|[^\\])mm+/g, "$1" + h(x))).replace(/(^|[^\\])m/g, "$1" + x);
        var b = i ? t.getUTCSeconds() : t.getSeconds();
        e = (e = e.replace(/(^|[^\\])ss+/g, "$1" + h(b))).replace(/(^|[^\\])s/g, "$1" + b);
        var m = i ? t.getUTCMilliseconds() : t.getMilliseconds();
        e = e.replace(/(^|[^\\])fff+/g, "$1" + h(m, 3)), m = Math.round(m / 10), e = e.replace(/(^|[^\\])ff/g, "$1" + h(m)), m = Math.round(m / 10);
        var v = f < 12 ? "AM" : "PM";
        e = (e = (e = e.replace(/(^|[^\\])f/g, "$1" + m)).replace(/(^|[^\\])TT+/g, "$1" + v)).replace(/(^|[^\\])T/g, "$1" + v.charAt(0));
        var y = v.toLowerCase();
        e = (e = e.replace(/(^|[^\\])tt+/g, "$1" + y)).replace(/(^|[^\\])t/g, "$1" + y.charAt(0));
        var w = -t.getTimezoneOffset(),
            k = i || !w ? "Z" : w > 0 ? "+" : "-";

        if (!i) {
          var A = (w = Math.abs(w)) % 60;
          k += h(Math.floor(w / 60)) + ":" + h(A);
        }

        e = e.replace(/(^|[^\\])K/g, "$1" + k);
        var S = (i ? t.getUTCDay() : t.getDay()) + 1;
        return e = (e = (e = (e = (e = e.replace(new RegExp(o[0], "g"), o[S])).replace(new RegExp(l[0], "g"), l[S])).replace(new RegExp(n[0], "g"), n[u])).replace(new RegExp(r[0], "g"), r[u])).replace(/\\(.)/g, "$1");
      }
    }, {
      key: "getTimeUnitsfromTimestamp",
      value: function value(t, e) {
        var i = this.w;
        void 0 !== i.config.xaxis.min && (t = i.config.xaxis.min), void 0 !== i.config.xaxis.max && (e = i.config.xaxis.max);
        var s = new Date(t).getFullYear(),
            a = new Date(e).getFullYear(),
            n = new Date(t).getMonth(),
            r = new Date(e).getMonth(),
            o = new Date(t).getDate(),
            l = new Date(e).getDate(),
            h = new Date(t).getHours(),
            c = new Date(e).getHours();
        return {
          minMinute: new Date(t).getMinutes(),
          maxMinute: new Date(e).getMinutes(),
          minHour: h,
          maxHour: c,
          minDate: o,
          maxDate: l,
          minMonth: n,
          maxMonth: r,
          minYear: s,
          maxYear: a
        };
      }
    }, {
      key: "isLeapYear",
      value: function value(t) {
        return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;
      }
    }, {
      key: "calculcateLastDaysOfMonth",
      value: function value(t, e, i) {
        return this.determineDaysOfMonths(t, e) - i;
      }
    }, {
      key: "determineDaysOfYear",
      value: function value(t) {
        var e = 365;
        return this.isLeapYear(t) && (e = 366), e;
      }
    }, {
      key: "determineRemainingDaysOfYear",
      value: function value(t, e, i) {
        var s = this.daysCntOfYear[e] + i;
        return e > 1 && this.isLeapYear() && s++, s;
      }
    }, {
      key: "determineDaysOfMonths",
      value: function value(t, e) {
        var i = 30;

        switch (t = d.monthMod(t), !0) {
          case this.months30.indexOf(t) > -1:
            2 === t && (i = this.isLeapYear(e) ? 29 : 28);
            break;

          case this.months31.indexOf(t) > -1:
          default:
            i = 31;
        }

        return i;
      }
    }]), t;
  }(),
      v = function () {
    function t(i) {
      e(this, t), this.opts = i;
    }

    return s(t, [{
      key: "line",
      value: function value() {
        return {
          chart: {
            animations: {
              easing: "swing"
            }
          },
          dataLabels: {
            enabled: !1
          },
          stroke: {
            width: 5,
            curve: "straight"
          },
          markers: {
            size: 0,
            hover: {
              sizeOffset: 6
            }
          },
          xaxis: {
            crosshairs: {
              width: 1
            }
          }
        };
      }
    }, {
      key: "sparkline",
      value: function value(t) {
        this.opts.yaxis[0].labels.show = !1, this.opts.yaxis[0].floating = !0;
        return d.extend(t, {
          grid: {
            show: !1,
            padding: {
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
            }
          },
          legend: {
            show: !1
          },
          xaxis: {
            labels: {
              show: !1
            },
            tooltip: {
              enabled: !1
            },
            axisBorder: {
              show: !1
            }
          },
          chart: {
            toolbar: {
              show: !1
            },
            zoom: {
              enabled: !1
            }
          },
          dataLabels: {
            enabled: !1
          }
        });
      }
    }, {
      key: "bar",
      value: function value() {
        return {
          chart: {
            stacked: !1,
            animations: {
              easing: "swing"
            }
          },
          plotOptions: {
            bar: {
              dataLabels: {
                position: "center"
              }
            }
          },
          dataLabels: {
            style: {
              colors: ["#fff"]
            }
          },
          stroke: {
            width: 0
          },
          fill: {
            opacity: .85
          },
          legend: {
            markers: {
              shape: "square",
              radius: 2,
              size: 8
            }
          },
          tooltip: {
            shared: !1
          },
          xaxis: {
            tooltip: {
              enabled: !1
            },
            crosshairs: {
              width: "barWidth",
              position: "back",
              fill: {
                type: "gradient"
              },
              dropShadow: {
                enabled: !1
              },
              stroke: {
                width: 0
              }
            }
          }
        };
      }
    }, {
      key: "candlestick",
      value: function value() {
        return {
          stroke: {
            width: 1,
            colors: ["#0e1726"]
          },
          dataLabels: {
            enabled: !1
          },
          tooltip: {
            shared: !0,
            custom: function custom(t) {
              var e = t.seriesIndex,
                  i = t.dataPointIndex,
                  s = t.w;
              return '<div class="apexcharts-tooltip-candlestick"><div>Open: <span class="value">' + s.globals.seriesCandleO[e][i] + '</span></div><div>High: <span class="value">' + s.globals.seriesCandleH[e][i] + '</span></div><div>Low: <span class="value">' + s.globals.seriesCandleL[e][i] + '</span></div><div>Close: <span class="value">' + s.globals.seriesCandleC[e][i] + "</span></div></div>";
            }
          },
          states: {
            active: {
              filter: {
                type: "none"
              }
            }
          },
          xaxis: {
            crosshairs: {
              width: 1
            }
          }
        };
      }
    }, {
      key: "rangeBar",
      value: function value() {
        return {
          stroke: {
            width: 0
          },
          plotOptions: {
            bar: {
              dataLabels: {
                position: "center"
              }
            }
          },
          dataLabels: {
            enabled: !1,
            formatter: function formatter(t, e) {
              e.ctx;
              var i = e.seriesIndex,
                  s = e.dataPointIndex,
                  a = e.w,
                  n = a.globals.seriesRangeStart[i][s];
              return a.globals.seriesRangeEnd[i][s] - n;
            },
            style: {
              colors: ["#fff"]
            }
          },
          tooltip: {
            shared: !1,
            followCursor: !0,
            custom: function custom(t) {
              var e = t.ctx,
                  i = t.seriesIndex,
                  s = t.dataPointIndex,
                  a = t.w,
                  n = a.globals.seriesRangeStart[i][s],
                  r = a.globals.seriesRangeEnd[i][s],
                  o = "",
                  l = "",
                  h = a.globals.colors[i];
              if (void 0 === a.config.tooltip.x.formatter) {
                if ("datetime" === a.config.xaxis.type) {
                  var c = new m(e);
                  o = c.formatDate(new Date(n), a.config.tooltip.x.format, !0, !0), l = c.formatDate(new Date(r), a.config.tooltip.x.format, !0, !0);
                } else o = n, l = r;
              } else o = a.config.tooltip.x.formatter(n), l = a.config.tooltip.x.formatter(r);
              var d = a.globals.labels[s];
              return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + h + '">' + (a.config.series[i].name ? a.config.series[i].name : "") + '</span></div><div> <span class="category">' + d + ': </span> <span class="value start-value">' + o + '</span> <span class="separator">-</span> <span class="value end-value">' + l + "</span></div></div>";
            }
          },
          xaxis: {
            tooltip: {
              enabled: !1
            },
            crosshairs: {
              stroke: {
                width: 0
              }
            }
          }
        };
      }
    }, {
      key: "area",
      value: function value() {
        return {
          stroke: {
            width: 4
          },
          fill: {
            type: "gradient",
            gradient: {
              inverseColors: !1,
              shade: "light",
              type: "vertical",
              opacityFrom: .65,
              opacityTo: .5,
              stops: [0, 100, 100]
            }
          },
          markers: {
            size: 0,
            hover: {
              sizeOffset: 6
            }
          },
          tooltip: {
            followCursor: !1
          }
        };
      }
    }, {
      key: "brush",
      value: function value(t) {
        return d.extend(t, {
          chart: {
            toolbar: {
              autoSelected: "selection",
              show: !1
            },
            zoom: {
              enabled: !1
            }
          },
          dataLabels: {
            enabled: !1
          },
          stroke: {
            width: 1
          },
          tooltip: {
            enabled: !1
          },
          xaxis: {
            tooltip: {
              enabled: !1
            }
          }
        });
      }
    }, {
      key: "stacked100",
      value: function value() {
        var t = this;
        this.opts.dataLabels = this.opts.dataLabels || {}, this.opts.dataLabels.formatter = this.opts.dataLabels.formatter || void 0;
        var e = this.opts.dataLabels.formatter;
        this.opts.yaxis.forEach(function (e, i) {
          t.opts.yaxis[i].min = 0, t.opts.yaxis[i].max = 100;
        }), "bar" === this.opts.chart.type && (this.opts.dataLabels.formatter = e || function (t) {
          return "number" == typeof t && t ? t.toFixed(0) + "%" : t;
        });
      }
    }, {
      key: "bubble",
      value: function value() {
        return {
          dataLabels: {
            style: {
              colors: ["#fff"]
            }
          },
          tooltip: {
            shared: !1,
            intersect: !0
          },
          xaxis: {
            crosshairs: {
              width: 0
            }
          },
          fill: {
            type: "solid",
            gradient: {
              shade: "light",
              inverse: !0,
              shadeIntensity: .55,
              opacityFrom: .4,
              opacityTo: .8
            }
          }
        };
      }
    }, {
      key: "scatter",
      value: function value() {
        return {
          dataLabels: {
            enabled: !1
          },
          tooltip: {
            shared: !1,
            intersect: !0
          },
          markers: {
            size: 6,
            strokeWidth: 2,
            hover: {
              sizeOffset: 2
            }
          }
        };
      }
    }, {
      key: "heatmap",
      value: function value() {
        return {
          chart: {
            stacked: !1,
            zoom: {
              enabled: !1
            }
          },
          fill: {
            opacity: 1
          },
          dataLabels: {
            style: {
              colors: ["#fff"]
            }
          },
          stroke: {
            colors: ["#fff"]
          },
          tooltip: {
            followCursor: !0,
            marker: {
              show: !1
            },
            x: {
              show: !1
            }
          },
          legend: {
            position: "top",
            markers: {
              shape: "square",
              size: 10,
              offsetY: 2
            }
          },
          grid: {
            padding: {
              right: 20
            }
          }
        };
      }
    }, {
      key: "pie",
      value: function value() {
        return {
          chart: {
            toolbar: {
              show: !1
            }
          },
          plotOptions: {
            pie: {
              donut: {
                labels: {
                  show: !1
                }
              }
            }
          },
          dataLabels: {
            formatter: function formatter(t) {
              return t.toFixed(1) + "%";
            },
            style: {
              colors: ["#fff"]
            },
            dropShadow: {
              enabled: !0
            }
          },
          stroke: {
            colors: ["#fff"]
          },
          fill: {
            opacity: 1,
            gradient: {
              shade: "dark",
              shadeIntensity: .35,
              inverseColors: !1,
              stops: [0, 100, 100]
            }
          },
          padding: {
            right: 0,
            left: 0
          },
          tooltip: {
            theme: "dark",
            fillSeriesColor: !0
          },
          legend: {
            position: "right"
          }
        };
      }
    }, {
      key: "donut",
      value: function value() {
        return {
          chart: {
            toolbar: {
              show: !1
            }
          },
          dataLabels: {
            formatter: function formatter(t) {
              return t.toFixed(1) + "%";
            },
            style: {
              colors: ["#fff"]
            },
            dropShadow: {
              enabled: !0
            }
          },
          stroke: {
            colors: ["#fff"]
          },
          fill: {
            opacity: 1,
            gradient: {
              shade: "dark",
              shadeIntensity: .4,
              inverseColors: !1,
              type: "vertical",
              opacityFrom: 1,
              opacityTo: 1,
              stops: [70, 98, 100]
            }
          },
          padding: {
            right: 0,
            left: 0
          },
          tooltip: {
            theme: "dark",
            fillSeriesColor: !0
          },
          legend: {
            position: "right"
          }
        };
      }
    }, {
      key: "radar",
      value: function value() {
        return this.opts.yaxis[0].labels.style.fontSize = "13px", this.opts.yaxis[0].labels.offsetY = 6, {
          dataLabels: {
            enabled: !0,
            style: {
              colors: ["#a8a8a8"],
              fontSize: "11px"
            }
          },
          stroke: {
            width: 2
          },
          markers: {
            size: 3,
            strokeWidth: 1,
            strokeOpacity: 1
          },
          fill: {
            opacity: .2
          },
          tooltip: {
            shared: !1,
            intersect: !0,
            followCursor: !0
          },
          grid: {
            show: !1
          },
          xaxis: {
            tooltip: {
              enabled: !1
            },
            crosshairs: {
              show: !1
            }
          }
        };
      }
    }, {
      key: "radialBar",
      value: function value() {
        return {
          chart: {
            animations: {
              dynamicAnimation: {
                enabled: !0,
                speed: 800
              }
            },
            toolbar: {
              show: !1
            }
          },
          fill: {
            gradient: {
              shade: "dark",
              shadeIntensity: .4,
              inverseColors: !1,
              type: "diagonal2",
              opacityFrom: 1,
              opacityTo: 1,
              stops: [70, 98, 100]
            }
          },
          padding: {
            right: 0,
            left: 0
          },
          legend: {
            show: !1,
            position: "right"
          },
          tooltip: {
            enabled: !1,
            fillSeriesColor: !0
          }
        };
      }
    }], [{
      key: "convertCatToNumeric",
      value: function value(t) {
        t.xaxis.type = "numeric", t.xaxis.convertedCatToNumeric = !0, t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function (t) {
          return t;
        }, t.chart = t.chart || {}, t.chart.zoom = t.chart.zoom || window.Apex.chart && window.Apex.chart.zoom || {};
        var e = t.xaxis.labels.formatter,
            i = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;
        return i && i.length && (t.xaxis.labels.formatter = function (t) {
          return e(i[t - 1]);
        }), t.xaxis.categories = [], t.labels = [], t.chart.zoom.enabled = t.chart.zoom.enabled || !1, t;
      }
    }]), t;
  }(),
      y = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "getStackedSeriesTotals",
      value: function value() {
        for (var t = this.w, e = [], i = 0; i < t.globals.series[t.globals.maxValsInArrayIndex].length; i++) {
          for (var s = 0, a = 0; a < t.globals.series.length; a++) {
            s += t.globals.series[a][i];
          }

          e.push(s);
        }

        return t.globals.stackedSeriesTotals = e, e;
      }
    }, {
      key: "getSeriesTotalByIndex",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return null === t ? this.w.config.series.reduce(function (t, e) {
          return t + e;
        }, 0) : this.w.globals.series[t].reduce(function (t, e) {
          return t + e;
        }, 0);
      }
    }, {
      key: "isSeriesNull",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return 0 === (null === t ? this.w.config.series.filter(function (t) {
          return null !== t;
        }) : this.w.globals.series[t].filter(function (t) {
          return null !== t;
        })).length;
      }
    }, {
      key: "seriesHaveSameValues",
      value: function value(t) {
        return this.w.globals.series[t].every(function (t, e, i) {
          return t === i[0];
        });
      }
    }, {
      key: "getLargestSeries",
      value: function value() {
        var t = this.w;
        t.globals.maxValsInArrayIndex = t.globals.series.map(function (t) {
          return t.length;
        }).indexOf(Math.max.apply(Math, t.globals.series.map(function (t) {
          return t.length;
        })));
      }
    }, {
      key: "getLargestMarkerSize",
      value: function value() {
        var t = this.w,
            e = 0;
        return t.globals.markers.size.forEach(function (t) {
          e = Math.max(e, t);
        }), t.globals.markers.largestSize = e, e;
      }
    }, {
      key: "getSeriesTotals",
      value: function value() {
        var t = this.w;
        t.globals.seriesTotals = t.globals.series.map(function (t, e) {
          var i = 0;
          if (Array.isArray(t)) for (var s = 0; s < t.length; s++) {
            i += t[s];
          } else i += t;
          return i;
        });
      }
    }, {
      key: "getSeriesTotalsXRange",
      value: function value(t, e) {
        var i = this.w;
        return i.globals.series.map(function (s, a) {
          for (var n = 0, r = 0; r < s.length; r++) {
            i.globals.seriesX[a][r] > t && i.globals.seriesX[a][r] < e && (n += s[r]);
          }

          return n;
        });
      }
    }, {
      key: "getPercentSeries",
      value: function value() {
        var t = this.w;
        t.globals.seriesPercent = t.globals.series.map(function (e, i) {
          var s = [];
          if (Array.isArray(e)) for (var a = 0; a < e.length; a++) {
            var n = t.globals.stackedSeriesTotals[a],
                r = 100 * e[a] / n;
            s.push(r);
          } else {
            var o = 100 * e / t.globals.seriesTotals.reduce(function (t, e) {
              return t + e;
            }, 0);
            s.push(o);
          }
          return s;
        });
      }
    }, {
      key: "getCalculatedRatios",
      value: function value() {
        var t,
            e,
            i,
            s,
            a,
            n = this.w.globals,
            r = [],
            o = [],
            l = .1,
            h = 0;
        if (n.yRange = [], n.isMultipleYAxis) for (var c = 0; c < n.minYArr.length; c++) {
          n.yRange.push(Math.abs(n.minYArr[c] - n.maxYArr[c])), o.push(0);
        } else n.yRange.push(Math.abs(n.minY - n.maxY));
        n.xRange = Math.abs(n.maxX - n.minX), n.zRange = Math.abs(n.maxZ - n.minZ);

        for (var d = 0; d < n.yRange.length; d++) {
          r.push(n.yRange[d] / n.gridHeight);
        }

        if (e = n.xRange / n.gridWidth, i = Math.abs(n.initialmaxX - n.initialminX) / n.gridWidth, t = n.yRange / n.gridWidth, s = n.xRange / n.gridHeight, a = n.zRange / n.gridHeight * 16, n.minY !== Number.MIN_VALUE && 0 !== Math.abs(n.minY) && (n.hasNegs = !0), n.isMultipleYAxis) {
          o = [];

          for (var u = 0; u < r.length; u++) {
            o.push(-n.minYArr[u] / r[u]);
          }
        } else o.push(-n.minY / r[0]), n.minY !== Number.MIN_VALUE && 0 !== Math.abs(n.minY) && (l = -n.minY / t, h = n.minX / e);

        return {
          yRatio: r,
          invertedYRatio: t,
          zRatio: a,
          xRatio: e,
          initialXRatio: i,
          invertedXRatio: s,
          baseLineInvertedY: l,
          baseLineY: o,
          baseLineX: h
        };
      }
    }, {
      key: "getLogSeries",
      value: function value(t) {
        var e = this.w;
        return e.globals.seriesLog = t.map(function (t, i) {
          return e.config.yaxis[i] && e.config.yaxis[i].logarithmic ? t.map(function (t) {
            return null === t ? null : (Math.log(t) - Math.log(e.globals.minYArr[i])) / (Math.log(e.globals.maxYArr[i]) - Math.log(e.globals.minYArr[i]));
          }) : t;
        }), e.globals.seriesLog;
      }
    }, {
      key: "getLogYRatios",
      value: function value(t) {
        var e = this,
            i = this.w,
            s = this.w.globals;
        return s.yLogRatio = t.slice(), s.logYRange = s.yRange.map(function (t, a) {
          if (i.config.yaxis[a] && e.w.config.yaxis[a].logarithmic) {
            var n,
                r = -Number.MAX_VALUE,
                o = Number.MIN_VALUE;
            return s.seriesLog.forEach(function (t, e) {
              t.forEach(function (t) {
                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (r = Math.max(t, r), o = Math.min(t, o));
              });
            }), n = Math.pow(s.yRange[a], Math.abs(o - r) / s.yRange[a]), s.yLogRatio[a] = n / s.gridHeight, n;
          }
        }), s.yLogRatio;
      }
    }], [{
      key: "checkComboSeries",
      value: function value(t) {
        var e = !1,
            i = !1;
        return t.length && void 0 !== t[0].type && (e = !0, t.forEach(function (t) {
          "bar" !== t.type && "column" !== t.type || (i = !0);
        })), {
          comboCharts: e,
          comboChartsHasBars: i
        };
      }
    }, {
      key: "extendArrayProps",
      value: function value(t, e) {
        return e.yaxis && (e = t.extendYAxis(e)), e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))), e;
      }
    }]), t;
  }(),
      w = function () {
    function i(t) {
      e(this, i), this.opts = t;
    }

    return s(i, [{
      key: "init",
      value: function value() {
        var e = this.opts,
            i = new x(),
            s = new v(e);
        this.chartType = e.chart.type, "histogram" === this.chartType && (e.chart.type = "bar", e = d.extend({
          plotOptions: {
            bar: {
              columnWidth: "99.99%"
            }
          }
        }, e)), e.series = this.checkEmptySeries(e.series), e = this.extendYAxis(e), e = this.extendAnnotations(e);
        var a = i.init(),
            n = {};

        if (e && "object" === t(e)) {
          var r = {};

          switch (this.chartType) {
            case "line":
              r = s.line();
              break;

            case "area":
              r = s.area();
              break;

            case "bar":
              r = s.bar();
              break;

            case "candlestick":
              r = s.candlestick();
              break;

            case "rangeBar":
              r = s.rangeBar();
              break;

            case "histogram":
              r = s.bar();
              break;

            case "bubble":
              r = s.bubble();
              break;

            case "scatter":
              r = s.scatter();
              break;

            case "heatmap":
              r = s.heatmap();
              break;

            case "pie":
              r = s.pie();
              break;

            case "donut":
              r = s.donut();
              break;

            case "radar":
              r = s.radar();
              break;

            case "radialBar":
              r = s.radialBar();
              break;

            default:
              r = s.line();
          }

          e.chart.brush && e.chart.brush.enabled && (r = s.brush(r)), e.chart.stacked && "100%" === e.chart.stackType && s.stacked100(), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(e), e.xaxis = e.xaxis || window.Apex.xaxis || {};
          var o = y.checkComboSeries(e.series);
          "line" !== e.chart.type && "area" !== e.chart.type && "scatter" !== e.chart.type || o.comboChartsHasBars || "datetime" === e.xaxis.type || "numeric" === e.xaxis.type || "between" === e.xaxis.tickPlacement || (e = v.convertCatToNumeric(e)), (e.chart.sparkline && e.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (r = s.sparkline(r)), n = d.extend(a, r);
        }

        var l = d.extend(n, window.Apex);
        return a = d.extend(l, e), a = this.handleUserInputErrors(a);
      }
    }, {
      key: "extendYAxis",
      value: function value(t) {
        var e = new x();
        return void 0 === t.yaxis && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = d.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [d.extend(e.yAxis, t.yaxis)] : t.yaxis = d.extendArray(t.yaxis, e.yAxis), t;
      }
    }, {
      key: "extendAnnotations",
      value: function value(t) {
        return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);
      }
    }, {
      key: "extendYAxisAnnotations",
      value: function value(t) {
        var e = new x();
        return t.annotations.yaxis = d.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;
      }
    }, {
      key: "extendXAxisAnnotations",
      value: function value(t) {
        var e = new x();
        return t.annotations.xaxis = d.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;
      }
    }, {
      key: "extendPointAnnotations",
      value: function value(t) {
        var e = new x();
        return t.annotations.points = d.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;
      }
    }, {
      key: "checkForDarkTheme",
      value: function value(t) {
        t.theme && "dark" === t.theme.mode && (t.tooltip || (t.tooltip = {}), "light" !== t.tooltip.theme && (t.tooltip.theme = "dark"), t.chart.foreColor || (t.chart.foreColor = "#f6f7f8"), t.theme.palette || (t.theme.palette = "palette4"));
      }
    }, {
      key: "checkEmptySeries",
      value: function value(t) {
        return 0 === t.length ? [{
          data: []
        }] : t;
      }
    }, {
      key: "handleUserInputErrors",
      value: function value(t) {
        var e = t;
        if (e.tooltip.shared && e.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");

        if (e.chart.scroller && console.warn("Scroller has been deprecated since v2.0.0. Please remove the configuration for chart.scroller"), ("bar" === e.chart.type || "rangeBar" === e.chart.type) && e.plotOptions.bar.horizontal) {
          if (e.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
          e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;
        }

        return "bar" !== e.chart.type && "rangeBar" !== e.chart.type || e.tooltip.shared && ("barWidth" === e.xaxis.crosshairs.width && e.series.length > 1 && (console.warn('crosshairs.width = "barWidth" is only supported in single series, not in a multi-series barChart.'), e.xaxis.crosshairs.width = "tickWidth"), e.plotOptions.bar.horizontal && (e.states.hover.type = "none", e.tooltip.shared = !1), e.tooltip.followCursor || (console.warn("followCursor option in shared columns cannot be turned off. Please set %ctooltip.followCursor: true", "color: blue;"), e.tooltip.followCursor = !0)), "candlestick" === e.chart.type && e.yaxis[0].reversed && (console.warn("Reversed y-axis in candlestick chart is not supported."), e.yaxis[0].reversed = !1), e.chart.group && 0 === e.yaxis[0].labels.minWidth && console.warn("It looks like you have multiple charts in synchronization. You must provide yaxis.labels.minWidth which must be EQUAL for all grouped charts to prevent incorrect behaviour."), Array.isArray(e.stroke.width) && "line" !== e.chart.type && "area" !== e.chart.type && (console.warn("stroke.width option accepts array only for line and area charts. Reverted back to Number"), e.stroke.width = e.stroke.width[0]), e;
      }
    }]), i;
  }(),
      k = function () {
    function t() {
      e(this, t);
    }

    return s(t, [{
      key: "globalVars",
      value: function value(t) {
        return {
          chartID: null,
          cuid: null,
          events: {
            beforeMount: [],
            mounted: [],
            updated: [],
            clicked: [],
            selection: [],
            dataPointSelection: [],
            zoomed: [],
            scrolled: []
          },
          colors: [],
          clientX: null,
          clientY: null,
          fill: {
            colors: []
          },
          stroke: {
            colors: []
          },
          dataLabels: {
            style: {
              colors: []
            }
          },
          radarPolygons: {
            fill: {
              colors: []
            }
          },
          markers: {
            colors: [],
            size: t.markers.size,
            largestSize: 0
          },
          animationEnded: !1,
          isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
          isDirty: !1,
          initialConfig: null,
          lastXAxis: [],
          lastYAxis: [],
          series: [],
          seriesRangeStart: [],
          seriesRangeEnd: [],
          seriesPercent: [],
          seriesTotals: [],
          stackedSeriesTotals: [],
          seriesX: [],
          seriesZ: [],
          labels: [],
          timelineLabels: [],
          invertedTimelineLabels: [],
          seriesNames: [],
          noLabelsProvided: !1,
          allSeriesCollapsed: !1,
          collapsedSeries: [],
          collapsedSeriesIndices: [],
          ancillaryCollapsedSeries: [],
          ancillaryCollapsedSeriesIndices: [],
          risingSeries: [],
          dataFormatXNumeric: !1,
          selectedDataPoints: [],
          ignoreYAxisIndexes: [],
          padHorizontal: 0,
          maxValsInArrayIndex: 0,
          zoomEnabled: "zoom" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,
          panEnabled: "pan" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,
          selectionEnabled: "selection" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,
          yaxis: null,
          minY: Number.MIN_VALUE,
          maxY: -Number.MAX_VALUE,
          minYArr: [],
          maxYArr: [],
          maxX: -Number.MAX_VALUE,
          initialmaxX: -Number.MAX_VALUE,
          minX: Number.MIN_VALUE,
          initialminX: Number.MIN_VALUE,
          minZ: Number.MIN_VALUE,
          maxZ: -Number.MAX_VALUE,
          minXDiff: Number.MAX_VALUE,
          mousedown: !1,
          lastClientPosition: {},
          visibleXRange: void 0,
          yRange: [],
          zRange: 0,
          xRange: 0,
          yValueDecimal: 0,
          total: 0,
          SVGNS: "http://www.w3.org/2000/svg",
          svgWidth: 0,
          svgHeight: 0,
          noData: !1,
          locale: {},
          dom: {},
          memory: {
            methodsToExec: []
          },
          shouldAnimate: !0,
          skipLastTimelinelabel: !1,
          delayedElements: [],
          axisCharts: !0,
          isXNumeric: !1,
          isDataXYZ: !1,
          resized: !1,
          resizeTimer: null,
          comboCharts: !1,
          comboChartsHasBars: !1,
          dataChanged: !1,
          previousPaths: [],
          seriesXvalues: [],
          seriesYvalues: [],
          seriesCandleO: [],
          seriesCandleH: [],
          seriesCandleL: [],
          seriesCandleC: [],
          allSeriesHasEqualX: !0,
          dataPoints: 0,
          pointsArray: [],
          dataLabelsRects: [],
          lastDrawnDataLabelsIndexes: [],
          hasNullValues: !1,
          easing: null,
          zoomed: !1,
          gridWidth: 0,
          gridHeight: 0,
          yAxisScale: [],
          xAxisScale: null,
          xAxisTicksPositions: [],
          timescaleTicks: [],
          rotateXLabels: !1,
          defaultLabels: !1,
          xLabelFormatter: void 0,
          yLabelFormatters: [],
          xaxisTooltipFormatter: void 0,
          ttKeyFormatter: void 0,
          ttVal: void 0,
          ttZFormatter: void 0,
          LINE_HEIGHT_RATIO: 1.618,
          xAxisLabelsHeight: 0,
          yAxisLabelsWidth: 0,
          scaleX: 1,
          scaleY: 1,
          translateX: 0,
          translateY: 0,
          translateYAxisX: [],
          yLabelsCoords: [],
          yTitleCoords: [],
          yAxisWidths: [],
          translateXAxisY: 0,
          translateXAxisX: 0,
          tooltip: null,
          tooltipOpts: null
        };
      }
    }, {
      key: "init",
      value: function value(t) {
        var e = this.globalVars(t);
        return e.initialConfig = d.extend({}, t), e.initialSeries = JSON.parse(JSON.stringify(e.initialConfig.series)), e.lastXAxis = JSON.parse(JSON.stringify(e.initialConfig.xaxis)), e.lastYAxis = JSON.parse(JSON.stringify(e.initialConfig.yaxis)), e;
      }
    }]), t;
  }(),
      A = function () {
    function t(i) {
      e(this, t), this.opts = i;
    }

    return s(t, [{
      key: "init",
      value: function value() {
        var t = new w(this.opts).init();
        return {
          config: t,
          globals: new k().init(t)
        };
      }
    }]), t;
  }(),
      S = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.opts = null, this.seriesIndex = 0;
    }

    return s(t, [{
      key: "clippedImgArea",
      value: function value(t) {
        var e = this.w,
            i = e.config,
            s = parseInt(e.globals.gridWidth),
            a = parseInt(e.globals.gridHeight),
            n = s > a ? s : a,
            r = t.image,
            o = 0,
            l = 0;
        void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (o = i.fill.image.width + 1, l = i.fill.image.height) : (o = n + 1, l = n) : (o = t.width, l = t.height);
        var h = document.createElementNS(e.globals.SVGNS, "pattern");
        f.setAttrs(h, {
          id: t.patternID,
          patternUnits: t.patternUnits ? t.patternUnits : "userSpaceOnUse",
          width: o + "px",
          height: l + "px"
        });
        var c = document.createElementNS(e.globals.SVGNS, "image");
        h.appendChild(c), c.setAttributeNS("http://www.w3.org/1999/xlink", "href", r), f.setAttrs(c, {
          x: 0,
          y: 0,
          preserveAspectRatio: "none",
          width: o + "px",
          height: l + "px"
        }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);
      }
    }, {
      key: "getSeriesIndex",
      value: function value(t) {
        var e = this.w;
        return "bar" === e.config.chart.type && e.config.plotOptions.bar.distributed || "heatmap" === e.config.chart.type ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;
      }
    }, {
      key: "fillPath",
      value: function value(t) {
        var e = this.w;
        this.opts = t;
        var i,
            s,
            a,
            n = this.w.config;
        this.seriesIndex = this.getSeriesIndex(t);
        var r = this.getFillColors(),
            o = r[this.seriesIndex];
        "function" == typeof o && (o = o({
          seriesIndex: this.seriesIndex,
          value: t.value,
          w: e
        }));
        var l = this.getFillType(this.seriesIndex),
            h = Array.isArray(n.fill.opacity) ? n.fill.opacity[this.seriesIndex] : n.fill.opacity,
            c = o;
        return t.color && (o = t.color), -1 === o.indexOf("rgb") ? c = d.hexToRgba(o, h) : o.indexOf("rgba") > -1 && (h = "0." + d.getOpacityFromRGBA(r[this.seriesIndex])), "pattern" === l && (s = this.handlePatternFill(s, o, h, c)), "gradient" === l && (a = this.handleGradientFill(a, o, h, this.seriesIndex)), n.fill.image.src.length > 0 && "image" === l ? t.seriesNumber < n.fill.image.src.length ? (this.clippedImgArea({
          opacity: h,
          image: n.fill.image.src[t.seriesNumber],
          patternUnits: t.patternUnits,
          patternID: "pattern".concat(e.globals.cuid).concat(t.seriesNumber + 1)
        }), i = "url(#pattern".concat(e.globals.cuid).concat(t.seriesNumber + 1, ")")) : i = c : i = "gradient" === l ? a : "pattern" === l ? s : c, t.solid && (i = c), i;
      }
    }, {
      key: "getFillType",
      value: function value(t) {
        var e = this.w;
        return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;
      }
    }, {
      key: "getFillColors",
      value: function value() {
        var t = this.w,
            e = t.config,
            i = this.opts,
            s = [];
        return t.globals.comboCharts ? "line" === t.config.series[this.seriesIndex].type ? t.globals.stroke.colors instanceof Array ? s = t.globals.stroke.colors : s.push(t.globals.stroke.colors) : t.globals.fill.colors instanceof Array ? s = t.globals.fill.colors : s.push(t.globals.fill.colors) : "line" === e.chart.type ? t.globals.stroke.colors instanceof Array ? s = t.globals.stroke.colors : s.push(t.globals.stroke.colors) : t.globals.fill.colors instanceof Array ? s = t.globals.fill.colors : s.push(t.globals.fill.colors), void 0 !== i.fillColors && (s = [], i.fillColors instanceof Array ? s = i.fillColors.slice() : s.push(i.fillColors)), s;
      }
    }, {
      key: "handlePatternFill",
      value: function value(t, e, i, s) {
        var a = this.w.config,
            n = this.opts,
            r = new f(this.ctx),
            o = void 0 === a.fill.pattern.strokeWidth ? Array.isArray(a.stroke.width) ? a.stroke.width[this.seriesIndex] : a.stroke.width : Array.isArray(a.fill.pattern.strokeWidth) ? a.fill.pattern.strokeWidth[this.seriesIndex] : a.fill.pattern.strokeWidth,
            l = e;
        a.fill.pattern.style instanceof Array ? t = void 0 !== a.fill.pattern.style[n.seriesNumber] ? r.drawPattern(a.fill.pattern.style[n.seriesNumber], a.fill.pattern.width, a.fill.pattern.height, l, o, i) : s : t = r.drawPattern(a.fill.pattern.style, a.fill.pattern.width, a.fill.pattern.height, l, o, i);
        return t;
      }
    }, {
      key: "handleGradientFill",
      value: function value(t, e, i, s) {
        var a,
            n,
            r = this.w.config,
            o = this.opts,
            l = new f(this.ctx),
            h = new d(),
            c = r.fill.gradient.type,
            u = void 0 === r.fill.gradient.opacityFrom ? i : Array.isArray(r.fill.gradient.opacityFrom) ? r.fill.gradient.opacityFrom[s] : r.fill.gradient.opacityFrom,
            g = void 0 === r.fill.gradient.opacityTo ? i : Array.isArray(r.fill.gradient.opacityTo) ? r.fill.gradient.opacityTo[s] : r.fill.gradient.opacityTo;

        if (a = e, n = void 0 === r.fill.gradient.gradientToColors || 0 === r.fill.gradient.gradientToColors.length ? "dark" === r.fill.gradient.shade ? h.shadeColor(-1 * parseFloat(r.fill.gradient.shadeIntensity), e) : h.shadeColor(parseFloat(r.fill.gradient.shadeIntensity), e) : r.fill.gradient.gradientToColors[o.seriesNumber], r.fill.gradient.inverseColors) {
          var p = a;
          a = n, n = p;
        }

        return l.drawGradient(c, a, n, u, g, o.size, r.fill.gradient.stops, r.fill.gradient.colorStops, s);
      }
    }]), t;
  }(),
      C = function () {
    function t(i, s) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "setGlobalMarkerSize",
      value: function value() {
        var t = this.w;

        if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size], t.globals.markers.size.length > 0) {
          if (t.globals.markers.size.length < t.globals.series.length + 1) for (var e = 0; e <= t.globals.series.length; e++) {
            void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);
          }
        } else t.globals.markers.size = t.config.series.map(function (e) {
          return t.config.markers.size;
        });
      }
    }, {
      key: "plotChartMarkers",
      value: function value(t, e, i) {
        var s,
            a = this,
            n = this.w,
            r = e,
            o = t,
            l = null,
            h = new f(this.ctx);
        if (n.globals.markers.size[e] > 0 && (l = h.group({
          "class": "apexcharts-series-markers"
        })).attr("clip-path", "url(#gridRectMarkerMask".concat(n.globals.cuid, ")")), o.x instanceof Array) for (var c = function c(t) {
          var c = i;
          1 === i && 0 === t && (c = 0), 1 === i && 1 === t && (c = 1);
          var g = "apexcharts-marker";

          if ("line" !== n.config.chart.type && "area" !== n.config.chart.type || n.globals.comboCharts || n.config.tooltip.intersect || (g += " no-pointer-events"), Array.isArray(n.config.markers.size) ? n.globals.markers.size[e] > 0 : n.config.markers.size > 0) {
            d.isNumber(o.y[t]) ? g += " w".concat((Math.random() + 1).toString(36).substring(4)) : g = "apexcharts-nullpoint";
            var f = a.getMarkerConfig(g, e);
            n.config.markers.discrete.map(function (t) {
              t.seriesIndex === e && t.dataPointIndex === c && (f.pointStrokeColor = t.strokeColor, f.pointFillColor = t.fillColor, f.pSize = t.size);
            }), n.config.series[r].data[i] && (n.config.series[r].data[i].fillColor && (f.pointFillColor = n.config.series[r].data[i].fillColor), n.config.series[r].data[i].strokeColor && (f.pointStrokeColor = n.config.series[r].data[i].strokeColor)), (s = h.drawMarker(o.x[t], o.y[t], f)).attr("rel", c), s.attr("j", c), s.attr("index", e), s.node.setAttribute("default-marker-size", f.pSize), new u(a.ctx).setSelectionFilter(s, e, c), a.addEvents(s), l && l.add(s);
          } else void 0 === n.globals.pointsArray[e] && (n.globals.pointsArray[e] = []), n.globals.pointsArray[e].push([o.x[t], o.y[t]]);
        }, g = 0; g < o.x.length; g++) {
          c(g);
        }
        return l;
      }
    }, {
      key: "getMarkerConfig",
      value: function value(t, e) {
        var i = this.w,
            s = this.getMarkerStyle(e);
        return {
          pSize: i.globals.markers.size[e],
          pRadius: i.config.markers.radius,
          pWidth: i.config.markers.strokeWidth,
          pointStrokeColor: s.pointStrokeColor,
          pointFillColor: s.pointFillColor,
          shape: i.config.markers.shape instanceof Array ? i.config.markers.shape[e] : i.config.markers.shape,
          "class": t,
          pointStrokeOpacity: i.config.markers.strokeOpacity,
          pointFillOpacity: i.config.markers.fillOpacity,
          seriesIndex: e
        };
      }
    }, {
      key: "addEvents",
      value: function value(t) {
        var e = new f(this.ctx);
        t.node.addEventListener("mouseenter", e.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener("mouseleave", e.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener("mousedown", e.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener("touchstart", e.pathMouseDown.bind(this.ctx, t), {
          passive: !0
        });
      }
    }, {
      key: "getMarkerStyle",
      value: function value(t) {
        var e = this.w,
            i = e.globals.markers.colors,
            s = e.config.markers.strokeColor || e.config.markers.strokeColors;
        return {
          pointStrokeColor: s instanceof Array ? s[t] : s,
          pointFillColor: i instanceof Array ? i[t] : i
        };
      }
    }]), t;
  }(),
      L = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.radiusSizes = [];
    }

    return s(t, [{
      key: "draw",
      value: function value(t, e, i) {
        var s = this.w,
            a = new f(this.ctx),
            n = i.realIndex,
            r = i.pointsPos,
            o = i.zRatio,
            l = i.elParent,
            h = a.group({
          "class": "apexcharts-series-markers apexcharts-series-".concat(s.config.chart.type)
        });
        if (h.attr("clip-path", "url(#gridRectMarkerMask".concat(s.globals.cuid, ")")), r.x instanceof Array) for (var c = 0; c < r.x.length; c++) {
          var d = e + 1,
              u = !0;
          0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);
          var g = 0,
              p = s.globals.markers.size[n];
          o !== 1 / 0 && (p = s.globals.seriesZ[n][d] / o, void 0 === this.radiusSizes[n] && this.radiusSizes.push([]), this.radiusSizes[n].push(p)), s.config.chart.animations.enabled || (g = p);
          var x = r.x[c],
              b = r.y[c];

          if (g = g || 0, (0 === x && 0 === b || null === b || void 0 === s.globals.series[n][d]) && (u = !1), u) {
            var m = this.drawPoint(x, b, g, p, n, d, e);
            h.add(m);
          }

          l.add(h);
        }
      }
    }, {
      key: "drawPoint",
      value: function value(t, e, i, s, a, n, r) {
        var o = this.w,
            l = a,
            h = new g(this.ctx),
            c = new u(this.ctx),
            d = new S(this.ctx),
            p = new C(this.ctx),
            x = new f(this.ctx),
            b = p.getMarkerConfig("apexcharts-marker", l),
            m = d.fillPath({
          seriesNumber: a,
          patternUnits: "objectBoundingBox",
          value: o.globals.series[a][r]
        }),
            v = x.drawCircle(i);

        if (o.config.series[l].data[n] && o.config.series[l].data[n].fillColor && (m = o.config.series[l].data[n].fillColor), v.attr({
          cx: t,
          cy: e,
          fill: m,
          stroke: b.pointStrokeColor,
          strokeWidth: b.pWidth
        }), o.config.chart.dropShadow.enabled) {
          var y = o.config.chart.dropShadow;
          c.dropShadow(v, y, a);
        }

        if (this.initialAnim && !o.globals.dataChanged) {
          var w = 1;
          o.globals.resized || (w = o.config.chart.animations.speed), h.animateCircleRadius(v, 0, s, w, o.globals.easing);
        }

        if (o.globals.dataChanged) if (this.dynamicAnim) {
          var k,
              A,
              L,
              z,
              P = o.config.chart.animations.dynamicAnimation.speed;
          null != (z = o.globals.previousPaths[a] && o.globals.previousPaths[a][r]) && (k = z.x, A = z.y, L = void 0 !== z.r ? z.r : s);

          for (var M = 0; M < o.globals.collapsedSeries.length; M++) {
            o.globals.collapsedSeries[M].index === a && (P = 1, s = 0);
          }

          0 === t && 0 === e && (s = 0), h.animateCircle(v, {
            cx: k,
            cy: A,
            r: L
          }, {
            cx: t,
            cy: e,
            r: s
          }, P, o.globals.easing);
        } else v.attr({
          r: s
        });
        return v.attr({
          rel: n,
          j: n,
          index: a,
          "default-marker-size": s
        }), c.setSelectionFilter(v, a, n), p.addEvents(v), v.node.classList.add("apexcharts-marker"), v;
      }
    }, {
      key: "centerTextInBubble",
      value: function value(t) {
        var e = this.w;
        return {
          y: t += parseInt(e.config.dataLabels.style.fontSize) / 4
        };
      }
    }]), t;
  }(),
      z = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "dataLabelsCorrection",
      value: function value(t, e, i, s, a, n, r) {
        var o = this.w,
            l = !1,
            h = new f(this.ctx).getTextRects(i, r),
            c = h.width,
            d = h.height;
        void 0 === o.globals.dataLabelsRects[s] && (o.globals.dataLabelsRects[s] = []), o.globals.dataLabelsRects[s].push({
          x: t,
          y: e,
          width: c,
          height: d
        });
        var u = o.globals.dataLabelsRects[s].length - 2,
            g = void 0 !== o.globals.lastDrawnDataLabelsIndexes[s] ? o.globals.lastDrawnDataLabelsIndexes[s][o.globals.lastDrawnDataLabelsIndexes[s].length - 1] : 0;

        if (void 0 !== o.globals.dataLabelsRects[s][u]) {
          var p = o.globals.dataLabelsRects[s][g];
          (t > p.x + p.width + 2 || e > p.y + p.height + 2 || t + c < p.x) && (l = !0);
        }

        return (0 === a || n) && (l = !0), {
          x: t,
          y: e,
          drawnextLabel: l
        };
      }
    }, {
      key: "drawDataLabel",
      value: function value(t, e, i) {
        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "top",
            a = this.w,
            n = new f(this.ctx),
            r = a.config.dataLabels,
            o = 0,
            l = 0,
            h = i,
            c = null;
        if (!r.enabled || t.x instanceof Array != !0) return c;
        (c = n.group({
          "class": "apexcharts-data-labels"
        })).attr("clip-path", "url(#gridRectMarkerMask".concat(a.globals.cuid, ")"));

        for (var d = 0; d < t.x.length; d++) {
          if (o = t.x[d] + r.offsetX, l = t.y[d] + r.offsetY - a.globals.markers.size[e] - 5, "bottom" === s && (l = l + 2 * a.globals.markers.size[e] + 1.4 * parseInt(r.style.fontSize)), !isNaN(o)) {
            1 === i && 0 === d && (h = 0), 1 === i && 1 === d && (h = 1);
            var u = a.globals.series[e][h],
                g = "";
            if ("bubble" === a.config.chart.type) g = a.globals.seriesZ[e][h], l = t.y[d] + a.config.dataLabels.offsetY, l = new L(this.ctx).centerTextInBubble(l, e, h).y;else null != u && (g = a.config.dataLabels.formatter(u, {
              ctx: this.ctx,
              seriesIndex: e,
              dataPointIndex: h,
              w: a
            }));
            this.plotDataLabelsText({
              x: o,
              y: l,
              text: g,
              i: e,
              j: h,
              parent: c,
              offsetCorrection: !0,
              dataLabelsConfig: a.config.dataLabels
            });
          }
        }

        return c;
      }
    }, {
      key: "plotDataLabelsText",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = t.x,
            a = t.y,
            n = t.i,
            r = t.j,
            o = t.text,
            l = t.textAnchor,
            h = t.parent,
            c = t.dataLabelsConfig,
            d = t.alwaysDrawDataLabel,
            g = t.offsetCorrection;

        if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(n) > -1)) {
          var p = {
            x: s,
            y: a,
            drawnextLabel: !0
          };

          if (g && (p = this.dataLabelsCorrection(s, a, o, n, r, d, parseInt(c.style.fontSize))), e.globals.zoomed || (s = p.x, a = p.y), p.drawnextLabel) {
            var x = i.drawText({
              width: 100,
              height: parseInt(c.style.fontSize),
              x: s,
              y: a,
              foreColor: e.globals.dataLabels.style.colors[n],
              textAnchor: l || c.textAnchor,
              text: o,
              fontSize: c.style.fontSize,
              fontFamily: c.style.fontFamily
            });

            if (x.attr({
              "class": "apexcharts-datalabel",
              cx: s,
              cy: a
            }), c.dropShadow.enabled) {
              var b = c.dropShadow;
              new u(this.ctx).dropShadow(x, b);
            }

            h.add(x), void 0 === e.globals.lastDrawnDataLabelsIndexes[n] && (e.globals.lastDrawnDataLabelsIndexes[n] = []), e.globals.lastDrawnDataLabelsIndexes[n].push(r);
          }
        }
      }
    }]), t;
  }(),
      P = function () {
    function t(i, s) {
      e(this, t), this.ctx = i, this.w = i.w;
      var a = this.w;
      this.barOptions = a.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = a.config.stroke.width, this.isNullValue = !1, this.xyRatios = s, null !== this.xyRatios && (this.xRatio = s.xRatio, this.yRatio = s.yRatio, this.invertedXRatio = s.invertedXRatio, this.invertedYRatio = s.invertedYRatio, this.baseLineY = s.baseLineY, this.baseLineInvertedY = s.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0;
    }

    return s(t, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w,
            s = new f(this.ctx),
            a = new y(this.ctx, i);
        t = a.getLogSeries(t), this.series = t, this.yRatio = a.getLogYRatios(this.yRatio), this.initVariables(t);
        var n = s.group({
          "class": "apexcharts-bar-series apexcharts-plot-series"
        });
        i.config.dataLabels.enabled && this.totalItems > i.config.plotOptions.bar.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");

        for (var r = 0, o = 0; r < t.length; r++, o++) {
          var l,
              h,
              c,
              u,
              g = void 0,
              p = void 0,
              x = void 0,
              b = void 0,
              m = [],
              v = [],
              w = i.globals.comboCharts ? e[r] : r,
              k = s.group({
            "class": "apexcharts-series",
            rel: r + 1,
            seriesName: d.escapeString(i.globals.seriesNames[w]),
            "data:realIndex": w
          });
          this.ctx.series.addCollapsedClassToSeries(k, w), t[r].length > 0 && (this.visibleI = this.visibleI + 1);
          var A = 0,
              S = 0,
              C = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = w), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;
          var L = this.initialPositions();
          b = L.y, S = L.barHeight, h = L.yDivision, u = L.zeroW, x = L.x, C = L.barWidth, l = L.xDivision, c = L.zeroH, this.horizontal || v.push(x + C / 2);

          for (var z = s.group({
            "class": "apexcharts-datalabels"
          }), P = 0, M = i.globals.dataPoints; P < i.globals.dataPoints; P++, M--) {
            void 0 === this.series[r][P] || null === t[r][P] ? this.isNullValue = !0 : this.isNullValue = !1, i.config.stroke.show && (A = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[w] : this.strokeWidth);
            var E = null;
            this.isHorizontal ? (E = this.drawBarPaths({
              indexes: {
                i: r,
                j: P,
                realIndex: w,
                bc: o
              },
              barHeight: S,
              strokeWidth: A,
              pathTo: g,
              pathFrom: p,
              zeroW: u,
              x: x,
              y: b,
              yDivision: h,
              elSeries: k
            }), C = this.series[r][P] / this.invertedYRatio) : (E = this.drawColumnPaths({
              indexes: {
                i: r,
                j: P,
                realIndex: w,
                bc: o
              },
              x: x,
              y: b,
              xDivision: l,
              pathTo: g,
              pathFrom: p,
              barWidth: C,
              zeroH: c,
              strokeWidth: A,
              elSeries: k
            }), S = this.series[r][P] / this.yRatio[this.yaxisIndex]), g = E.pathTo, p = E.pathFrom, b = E.y, x = E.x, P > 0 && v.push(x + C / 2), m.push(b);
            var T = this.getPathFillColor(t, r, P, w);
            k = this.renderSeries({
              realIndex: w,
              pathFill: T,
              j: P,
              i: r,
              pathFrom: p,
              pathTo: g,
              strokeWidth: A,
              elSeries: k,
              x: x,
              y: b,
              series: t,
              barHeight: S,
              barWidth: C,
              elDataLabelsWrap: z,
              visibleSeries: this.visibleI,
              type: "bar"
            });
          }

          i.globals.seriesXvalues[w] = v, i.globals.seriesYvalues[w] = m, n.add(k);
        }

        return n;
      }
    }, {
      key: "getPathFillColor",
      value: function value(t, e, i, s) {
        var a = this.w,
            n = new S(this.ctx),
            r = null,
            o = this.barOptions.distributed ? i : e;
        this.barOptions.colors.ranges.length > 0 && this.barOptions.colors.ranges.map(function (s) {
          t[e][i] >= s.from && t[e][i] <= s.to && (r = s.color);
        });
        return a.config.series[e].data[i] && a.config.series[e].data[i].fillColor && (r = a.config.series[e].data[i].fillColor), n.fillPath({
          seriesNumber: this.barOptions.distributed ? o : s,
          color: r,
          value: t[e][i]
        });
      }
    }, {
      key: "renderSeries",
      value: function value(t) {
        var e = t.realIndex,
            i = t.pathFill,
            s = t.lineFill,
            a = t.j,
            n = t.i,
            r = t.pathFrom,
            o = t.pathTo,
            l = t.strokeWidth,
            h = t.elSeries,
            c = t.x,
            d = t.y,
            g = t.series,
            p = t.barHeight,
            x = t.barWidth,
            b = t.elDataLabelsWrap,
            m = t.visibleSeries,
            v = t.type,
            y = this.w,
            w = new f(this.ctx);
        s || (s = this.barOptions.distributed ? y.globals.stroke.colors[a] : y.globals.stroke.colors[e]), y.config.series[n].data[a] && y.config.series[n].data[a].strokeColor && (s = y.config.series[n].data[a].strokeColor), this.isNullValue && (i = "none");
        var k = a / y.config.chart.animations.animateGradually.delay * (y.config.chart.animations.speed / y.globals.dataPoints) / 2.4,
            A = w.renderPaths({
          i: n,
          j: a,
          realIndex: e,
          pathFrom: r,
          pathTo: o,
          stroke: s,
          strokeWidth: l,
          strokeLineCap: y.config.stroke.lineCap,
          fill: i,
          animationDelay: k,
          initialSpeed: y.config.chart.animations.speed,
          dataChangeSpeed: y.config.chart.animations.dynamicAnimation.speed,
          className: "apexcharts-".concat(v, "-area"),
          id: "apexcharts-".concat(v, "-area")
        });
        A.attr("clip-path", "url(#gridRectMask".concat(y.globals.cuid, ")")), new u(this.ctx).setSelectionFilter(A, e, a), h.add(A);
        var S = this.calculateDataLabelsPos({
          x: c,
          y: d,
          i: n,
          j: a,
          series: g,
          realIndex: e,
          barHeight: p,
          barWidth: x,
          renderedPath: A,
          visibleSeries: m
        });
        return null !== S && b.add(S), h.add(b), h;
      }
    }, {
      key: "initVariables",
      value: function value(t) {
        var e = this.w;
        this.series = t, this.totalItems = 0, this.seriesLen = 0, this.visibleI = -1, this.visibleItems = 1;

        for (var i = 0; i < t.length; i++) {
          if (t[i].length > 0 && (this.seriesLen = this.seriesLen + 1, this.totalItems += t[i].length), e.globals.isXNumeric) for (var s = 0; s < t[i].length; s++) {
            e.globals.seriesX[i][s] > e.globals.minX && e.globals.seriesX[i][s] < e.globals.maxX && this.visibleItems++;
          } else this.visibleItems = e.globals.dataPoints;
        }

        0 === this.seriesLen && (this.seriesLen = 1);
      }
    }, {
      key: "initialPositions",
      value: function value() {
        var t,
            e,
            i,
            s,
            a,
            n,
            r,
            o,
            l = this.w;
        return this.isHorizontal ? (a = (i = l.globals.gridHeight / l.globals.dataPoints) / this.seriesLen, l.globals.isXNumeric && (a = (i = l.globals.gridHeight / this.totalItems) / this.seriesLen), a = a * parseInt(this.barOptions.barHeight) / 100, o = this.baseLineInvertedY + l.globals.padHorizontal + (this.isReversed ? l.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (i - a * this.seriesLen) / 2) : (n = (s = l.globals.gridWidth / this.visibleItems) / this.seriesLen * parseInt(this.barOptions.columnWidth) / 100, l.globals.isXNumeric && (n = (s = l.globals.minXDiff / this.xRatio) / this.seriesLen * parseInt(this.barOptions.columnWidth) / 100), r = l.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? l.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = l.globals.padHorizontal + (s - n * this.seriesLen) / 2), {
          x: t,
          y: e,
          yDivision: i,
          xDivision: s,
          barHeight: a,
          barWidth: n,
          zeroH: r,
          zeroW: o
        };
      }
    }, {
      key: "drawBarPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.barHeight,
            s = t.strokeWidth,
            a = t.pathTo,
            n = t.pathFrom,
            r = t.zeroW,
            o = t.x,
            l = t.y,
            h = t.yDivision,
            c = t.elSeries,
            d = this.w,
            u = new f(this.ctx),
            g = e.i,
            p = e.j,
            x = e.realIndex,
            b = e.bc;
        d.globals.isXNumeric && (l = (d.globals.seriesX[g][p] - d.globals.minX) / this.invertedXRatio - i);
        var m = l + i * this.visibleI;
        a = u.move(r, m), n = u.move(r, m), d.globals.previousPaths.length > 0 && (n = this.getPathFrom(x, p));
        var v = {
          barHeight: i,
          strokeWidth: s,
          barYPosition: m,
          x: o = void 0 === this.series[g][p] || null === this.series[g][p] ? r : r + this.series[g][p] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g][p] / this.invertedYRatio : 0),
          zeroW: r
        },
            y = this.barEndingShape(d, v, this.series, g, p);

        if (a = a + u.line(y.newX, m) + y.path + u.line(r, m + i - s) + u.line(r, m), n = n + u.line(r, m) + y.ending_p_from + u.line(r, m + i - s) + u.line(r, m + i - s) + u.line(r, m), d.globals.isXNumeric || (l += h), this.barOptions.colors.backgroundBarColors.length > 0 && 0 === g) {
          b >= this.barOptions.colors.backgroundBarColors.length && (b = 0);
          var w = this.barOptions.colors.backgroundBarColors[b],
              k = u.drawRect(0, m - i * this.visibleI, d.globals.gridWidth, i * this.seriesLen, 0, w, this.barOptions.colors.backgroundBarOpacity);
          c.add(k), k.node.classList.add("apexcharts-backgroundBar");
        }

        return {
          pathTo: a,
          pathFrom: n,
          x: o,
          y: l,
          barYPosition: m
        };
      }
    }, {
      key: "drawColumnPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            s = t.y,
            a = t.xDivision,
            n = t.pathTo,
            r = t.pathFrom,
            o = t.barWidth,
            l = t.zeroH,
            h = t.strokeWidth,
            c = t.elSeries,
            d = this.w,
            u = new f(this.ctx),
            g = e.i,
            p = e.j,
            x = e.realIndex,
            b = e.bc;
        d.globals.isXNumeric && (i = (d.globals.seriesX[g][p] - d.globals.minX) / this.xRatio - o / 2);
        var m = i + o * this.visibleI;
        n = u.move(m, l), r = u.move(m, l), d.globals.previousPaths.length > 0 && (r = this.getPathFrom(x, p));
        var v = {
          barWidth: o,
          strokeWidth: h,
          barXPosition: m,
          y: s = void 0 === this.series[g][p] || null === this.series[g][p] ? l : l - this.series[g][p] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[g][p] / this.yRatio[this.yaxisIndex] : 0),
          zeroH: l
        },
            y = this.barEndingShape(d, v, this.series, g, p);

        if (n = n + u.line(m, y.newY) + y.path + u.line(m + o - h, l) + u.line(m - h / 2, l), r = r + u.line(m, l) + y.ending_p_from + u.line(m + o - h, l) + u.line(m + o - h, l) + u.line(m - h / 2, l), d.globals.isXNumeric || (i += a), this.barOptions.colors.backgroundBarColors.length > 0 && 0 === g) {
          b >= this.barOptions.colors.backgroundBarColors.length && (b = 0);
          var w = this.barOptions.colors.backgroundBarColors[b],
              k = u.drawRect(m - o * this.visibleI, 0, o * this.seriesLen, d.globals.gridHeight, 0, w, this.barOptions.colors.backgroundBarOpacity);
          c.add(k), k.node.classList.add("apexcharts-backgroundBar");
        }

        return {
          pathTo: n,
          pathFrom: r,
          x: i,
          y: s,
          barXPosition: m
        };
      }
    }, {
      key: "getPathFrom",
      value: function value(t, e) {
        for (var i, s = this.w, a = 0; a < s.globals.previousPaths.length; a++) {
          var n = s.globals.previousPaths[a];
          n.paths.length > 0 && parseInt(n.realIndex) === parseInt(t) && void 0 !== s.globals.previousPaths[a].paths[e] && (i = s.globals.previousPaths[a].paths[e].d);
        }

        return i;
      }
    }, {
      key: "calculateDataLabelsPos",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            s = t.i,
            a = t.j,
            n = t.realIndex,
            r = t.series,
            o = t.barHeight,
            l = t.barWidth,
            h = t.visibleSeries,
            c = t.renderedPath,
            d = this.w,
            u = new f(this.ctx),
            g = Array.isArray(this.strokeWidth) ? this.strokeWidth[n] : this.strokeWidth,
            p = e + parseFloat(l * h),
            x = i + parseFloat(o * h);
        d.globals.isXNumeric && !d.globals.isBarHorizontal && (p = e + parseFloat(l * (h + 1)) - g, x = i + parseFloat(o * (h + 1)) - g);
        var b = e,
            m = i,
            v = {},
            y = d.config.dataLabels,
            w = this.barOptions.dataLabels,
            k = y.offsetX,
            A = y.offsetY,
            S = {
          width: 0,
          height: 0
        };
        return d.config.dataLabels.enabled && (S = u.getTextRects(d.globals.yLabelFormatters[0](d.globals.maxY), parseInt(y.style.fontSize))), v = this.isHorizontal ? this.calculateBarsDataLabelsPosition({
          x: e,
          y: i,
          i: s,
          j: a,
          renderedPath: c,
          bcy: x,
          barHeight: o,
          barWidth: l,
          textRects: S,
          strokeWidth: g,
          dataLabelsX: b,
          dataLabelsY: m,
          barDataLabelsConfig: w,
          offX: k,
          offY: A
        }) : this.calculateColumnsDataLabelsPosition({
          x: e,
          y: i,
          i: s,
          j: a,
          renderedPath: c,
          realIndex: n,
          bcx: p,
          bcy: x,
          barHeight: o,
          barWidth: l,
          textRects: S,
          strokeWidth: g,
          dataLabelsY: m,
          barDataLabelsConfig: w,
          offX: k,
          offY: A
        }), c.attr({
          cy: v.bcy,
          cx: v.bcx,
          j: a,
          val: r[s][a],
          barHeight: o,
          barWidth: l
        }), this.drawCalculatedDataLabels({
          x: v.dataLabelsX,
          y: v.dataLabelsY,
          val: r[s][a],
          i: n,
          j: a,
          barWidth: l,
          barHeight: o,
          textRects: S,
          dataLabelsConfig: y
        });
      }
    }, {
      key: "calculateColumnsDataLabelsPosition",
      value: function value(t) {
        var e,
            i = this.w,
            s = t.i,
            a = t.j,
            n = t.y,
            r = t.bcx,
            o = t.barWidth,
            l = t.barHeight,
            h = t.textRects,
            c = t.dataLabelsY,
            d = t.barDataLabelsConfig,
            u = t.strokeWidth,
            g = t.offX,
            f = t.offY,
            p = i.globals.gridWidth / i.globals.dataPoints;
        r -= u / 2, e = i.globals.isXNumeric ? r - o / 2 + g : r - p + o / 2 + g;
        var x = this.series[s][a] <= 0;

        switch (this.isReversed && (n -= l), d.position) {
          case "center":
            c = x ? n + l / 2 + h.height / 2 + f : n + l / 2 + h.height / 2 - f;
            break;

          case "bottom":
            c = x ? n + l + h.height + u + f : n + l - h.height / 2 + u - f;
            break;

          case "top":
            c = x ? n - h.height / 2 - f : n + h.height + f;
        }

        return i.config.chart.stacked || (c < 0 ? c = 0 + u : c + h.height / 3 > i.globals.gridHeight && (c = i.globals.gridHeight - u)), {
          bcx: r,
          bcy: n,
          dataLabelsX: e,
          dataLabelsY: c
        };
      }
    }, {
      key: "calculateBarsDataLabelsPosition",
      value: function value(t) {
        var e = this.w,
            i = t.x,
            s = t.i,
            a = t.j,
            n = t.bcy,
            r = t.barHeight,
            o = t.barWidth,
            l = t.textRects,
            h = t.dataLabelsX,
            c = t.strokeWidth,
            d = t.barDataLabelsConfig,
            u = t.offX,
            g = t.offY,
            f = n - e.globals.gridHeight / e.globals.dataPoints + r / 2 + l.height / 2 + g - 3,
            p = this.series[s][a] <= 0;

        switch (this.isReversed && (i += o), d.position) {
          case "center":
            h = p ? i - o / 2 - u : i - o / 2 + u;
            break;

          case "bottom":
            h = p ? i - o - c - Math.round(l.width / 2) - u : i - o + c + Math.round(l.width / 2) + u;
            break;

          case "top":
            h = p ? i - c + Math.round(l.width / 2) - u : i - c - Math.round(l.width / 2) + u;
        }

        return e.config.chart.stacked || (h < 0 ? h = h + l.width + c : h + l.width / 2 > e.globals.gridWidth && (h = e.globals.gridWidth - l.width - c)), {
          bcx: i,
          bcy: n,
          dataLabelsX: h,
          dataLabelsY: f
        };
      }
    }, {
      key: "drawCalculatedDataLabels",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            s = t.val,
            a = t.i,
            n = t.j,
            r = t.textRects,
            o = t.barHeight,
            l = t.barWidth,
            h = t.dataLabelsConfig,
            c = this.w,
            d = new z(this.ctx),
            u = new f(this.ctx),
            g = h.formatter,
            p = null,
            x = c.globals.collapsedSeriesIndices.indexOf(a) > -1;

        if (h.enabled && !x) {
          p = u.group({
            "class": "apexcharts-data-labels"
          });
          var b = "";
          null != s && (b = g(s, {
            seriesIndex: a,
            dataPointIndex: n,
            w: c
          })), 0 === s && c.config.chart.stacked && (b = ""), c.config.chart.stacked && this.barOptions.dataLabels.hideOverflowingLabels && (this.isHorizontal ? (l = this.series[a][n] / this.yRatio[this.yaxisIndex], r.width / 1.6 > l && (b = "")) : (o = this.series[a][n] / this.yRatio[this.yaxisIndex], r.height / 1.6 > o && (b = ""))), d.plotDataLabelsText({
            x: e,
            y: i,
            text: b,
            i: a,
            j: n,
            parent: p,
            dataLabelsConfig: h,
            alwaysDrawDataLabel: !0,
            offsetCorrection: !0
          });
        }

        return p;
      }
    }, {
      key: "barEndingShape",
      value: function value(t, e, i, s, a) {
        var n = new f(this.ctx);

        if (this.isHorizontal) {
          var r = null,
              o = e.x;

          if (void 0 !== i[s][a] || null !== i[s][a]) {
            var l = i[s][a] < 0,
                h = e.barHeight / 2 - e.strokeWidth;

            switch (l && (h = -e.barHeight / 2 - e.strokeWidth), t.config.chart.stacked || "rounded" === this.barOptions.endingShape && (o = e.x - h / 2), this.barOptions.endingShape) {
              case "flat":
                r = n.line(o, e.barYPosition + e.barHeight - e.strokeWidth);
                break;

              case "rounded":
                r = n.quadraticCurve(o + h, e.barYPosition + (e.barHeight - e.strokeWidth) / 2, o, e.barYPosition + e.barHeight - e.strokeWidth);
            }
          }

          return {
            path: r,
            ending_p_from: "",
            newX: o
          };
        }

        var c = null,
            d = e.y;

        if (void 0 !== i[s][a] || null !== i[s][a]) {
          var u = i[s][a] < 0,
              g = e.barWidth / 2 - e.strokeWidth;

          switch (u && (g = -e.barWidth / 2 - e.strokeWidth), t.config.chart.stacked || "rounded" === this.barOptions.endingShape && (d += g / 2), this.barOptions.endingShape) {
            case "flat":
              c = n.line(e.barXPosition + e.barWidth - e.strokeWidth, d);
              break;

            case "rounded":
              c = n.quadraticCurve(e.barXPosition + (e.barWidth - e.strokeWidth) / 2, d - g, e.barXPosition + e.barWidth - e.strokeWidth, d);
          }
        }

        return {
          path: c,
          ending_p_from: "",
          newY: d
        };
      }
    }]), t;
  }(),
      M = function (t) {
    function i() {
      return e(this, i), h(this, o(i).apply(this, arguments));
    }

    return r(i, P), s(i, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w;
        this.graphics = new f(this.ctx), this.fill = new S(this.ctx), this.bar = new P(this.ctx, this.xyRatios);
        var s = new y(this.ctx, i);
        t = s.getLogSeries(t), this.yRatio = s.getLogYRatios(this.yRatio), this.initVariables(t), "100%" === i.config.chart.stackType && (t = i.globals.seriesPercent.slice()), this.series = t, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];

        for (var a = 0; a < t.length; a++) {
          t[a].length > 0 && (this.totalItems += t[a].length);
        }

        for (var n = this.graphics.group({
          "class": "apexcharts-bar-series apexcharts-plot-series"
        }), r = 0, o = 0, l = 0, h = 0; l < t.length; l++, h++) {
          var c = void 0,
              u = void 0,
              g = void 0,
              p = void 0,
              x = void 0,
              b = void 0,
              m = [],
              v = [],
              w = i.globals.comboCharts ? e[l] : l;
          this.yRatio.length > 1 && (this.yaxisIndex = w), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed;
          var k = this.graphics.group({
            "class": "apexcharts-series",
            seriesName: d.escapeString(i.globals.seriesNames[w]),
            rel: l + 1,
            "data:realIndex": w
          }),
              A = this.graphics.group({
            "class": "apexcharts-datalabels"
          }),
              C = 0,
              L = 0,
              z = 0,
              M = this.initialPositions(r, o, g, p, x, b);
          o = M.y, L = M.barHeight, p = M.yDivision, b = M.zeroW, r = M.x, z = M.barWidth, g = M.xDivision, x = M.zeroH, this.yArrj = [], this.yArrjF = [], this.yArrjVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [];

          for (var E = 0; E < i.globals.dataPoints; E++) {
            i.config.stroke.show && (C = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[w] : this.strokeWidth);
            var T = null;
            this.isHorizontal ? (T = this.drawBarPaths({
              indexes: {
                i: l,
                j: E,
                realIndex: w,
                bc: h
              },
              barHeight: L,
              strokeWidth: C,
              pathTo: c,
              pathFrom: u,
              zeroW: b,
              x: r,
              y: o,
              yDivision: p,
              elSeries: k
            }), z = this.series[l][E] / this.invertedYRatio) : (T = this.drawColumnPaths({
              indexes: {
                i: l,
                j: E,
                realIndex: w,
                bc: h
              },
              x: r,
              y: o,
              xDivision: g,
              pathTo: c,
              pathFrom: u,
              barWidth: z,
              zeroH: x,
              strokeWidth: C,
              elSeries: k
            }), L = this.series[l][E] / this.yRatio[this.yaxisIndex]), c = T.pathTo, u = T.pathFrom, o = T.y, r = T.x, m.push(r), v.push(o);
            var X = this.bar.getPathFillColor(t, l, E, w);
            k = this.renderSeries({
              realIndex: w,
              pathFill: X,
              j: E,
              i: l,
              pathFrom: u,
              pathTo: c,
              strokeWidth: C,
              elSeries: k,
              x: r,
              y: o,
              series: t,
              barHeight: L,
              barWidth: z,
              elDataLabelsWrap: A,
              type: "bar",
              visibleSeries: 0
            });
          }

          i.globals.seriesXvalues[w] = m, i.globals.seriesYvalues[w] = v, this.prevY.push(this.yArrj), this.prevYF.push(this.yArrjF), this.prevYVal.push(this.yArrjVal), this.prevX.push(this.xArrj), this.prevXF.push(this.xArrjF), this.prevXVal.push(this.xArrjVal), n.add(k);
        }

        return n;
      }
    }, {
      key: "initialPositions",
      value: function value(t, e, i, s, a, n) {
        var r,
            o,
            l = this.w;
        return this.isHorizontal ? (r = (r = s = l.globals.gridHeight / l.globals.dataPoints) * parseInt(l.config.plotOptions.bar.barHeight) / 100, n = this.baseLineInvertedY + l.globals.padHorizontal + (this.isReversed ? l.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (s - r) / 2) : (o = i = l.globals.gridWidth / l.globals.dataPoints, o = l.globals.isXNumeric ? (i = l.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth) / 100 : o * parseInt(l.config.plotOptions.bar.columnWidth) / 100, a = this.baseLineY[this.yaxisIndex] + (this.isReversed ? l.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = l.globals.padHorizontal + (i - o) / 2), {
          x: t,
          y: e,
          yDivision: s,
          xDivision: i,
          barHeight: r,
          barWidth: o,
          zeroH: a,
          zeroW: n
        };
      }
    }, {
      key: "drawBarPaths",
      value: function value(t) {
        for (var e, i = t.indexes, s = t.barHeight, a = t.strokeWidth, n = t.pathTo, r = t.pathFrom, o = t.zeroW, l = t.x, h = t.y, c = t.yDivision, d = t.elSeries, u = this.w, g = h, f = i.i, p = i.j, x = i.realIndex, b = i.bc, m = 0, v = 0; v < this.prevXF.length; v++) {
          m += this.prevXF[v][p];
        }

        if (f > 0) {
          var y = o;
          this.prevXVal[f - 1][p] < 0 ? y = this.series[f][p] >= 0 ? this.prevX[f - 1][p] + m - 2 * (this.isReversed ? m : 0) : this.prevX[f - 1][p] : this.prevXVal[f - 1][p] >= 0 && (y = this.series[f][p] >= 0 ? this.prevX[f - 1][p] : this.prevX[f - 1][p] - m + 2 * (this.isReversed ? m : 0)), e = y;
        } else e = o;

        l = null === this.series[f][p] ? e : e + this.series[f][p] / this.invertedYRatio - 2 * (this.isReversed ? this.series[f][p] / this.invertedYRatio : 0);
        var w = {
          barHeight: s,
          strokeWidth: a,
          invertedYRatio: this.invertedYRatio,
          barYPosition: g,
          x: l
        },
            k = this.bar.barEndingShape(u, w, this.series, f, p);

        if (this.series.length > 1 && f !== this.endingShapeOnSeriesNumber && (k.path = this.graphics.line(k.newX, g + s - a)), this.xArrj.push(k.newX), this.xArrjF.push(Math.abs(e - k.newX)), this.xArrjVal.push(this.series[f][p]), n = this.graphics.move(e, g), r = this.graphics.move(e, g), u.globals.previousPaths.length > 0 && (r = this.bar.getPathFrom(x, p, !1)), n = n + this.graphics.line(k.newX, g) + k.path + this.graphics.line(e, g + s - a) + this.graphics.line(e, g), r = r + this.graphics.line(e, g) + this.graphics.line(e, g + s - a) + this.graphics.line(e, g + s - a) + this.graphics.line(e, g + s - a) + this.graphics.line(e, g), u.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && 0 === f) {
          b >= u.config.plotOptions.bar.colors.backgroundBarColors.length && (b = 0);
          var A = u.config.plotOptions.bar.colors.backgroundBarColors[b],
              S = this.graphics.drawRect(0, g, u.globals.gridWidth, s, 0, A, u.config.plotOptions.bar.colors.backgroundBarOpacity);
          d.add(S), S.node.classList.add("apexcharts-backgroundBar");
        }

        return {
          pathTo: n,
          pathFrom: r,
          x: l,
          y: h += c
        };
      }
    }, {
      key: "drawColumnPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            s = t.y,
            a = t.xDivision,
            n = t.pathTo,
            r = t.pathFrom,
            o = t.barWidth,
            l = t.zeroH,
            h = t.strokeWidth,
            c = t.elSeries,
            d = this.w,
            u = e.i,
            g = e.j,
            f = e.realIndex,
            p = e.bc;

        if (d.globals.isXNumeric) {
          var x = d.globals.seriesX[u][g];
          x || (x = 0), i = (x - d.globals.minX) / this.xRatio - o / 2;
        }

        for (var b, m = i, v = 0, y = 0; y < this.prevYF.length; y++) {
          v += this.prevYF[y][g];
        }

        if (u > 0 && !d.globals.isXNumeric || u > 0 && d.globals.isXNumeric && d.globals.seriesX[u - 1][g] === d.globals.seriesX[u][g]) {
          var w = this.prevY[u - 1][g];
          b = this.prevYVal[u - 1][g] < 0 ? this.series[u][g] >= 0 ? w - v + 2 * (this.isReversed ? v : 0) : w : this.series[u][g] >= 0 ? w : w + v - 2 * (this.isReversed ? v : 0);
        } else b = d.globals.gridHeight - l;

        s = b - this.series[u][g] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[u][g] / this.yRatio[this.yaxisIndex] : 0);
        var k = {
          barWidth: o,
          strokeWidth: h,
          yRatio: this.yRatio[this.yaxisIndex],
          barXPosition: m,
          y: s
        },
            A = this.bar.barEndingShape(d, k, this.series, u, g);

        if (this.yArrj.push(A.newY), this.yArrjF.push(Math.abs(b - A.newY)), this.yArrjVal.push(this.series[u][g]), n = this.graphics.move(m, b), r = this.graphics.move(m, b), d.globals.previousPaths.length > 0 && (r = this.bar.getPathFrom(f, g, !1)), n = n + this.graphics.line(m, A.newY) + A.path + this.graphics.line(m + o - h, b) + this.graphics.line(m - h / 2, b), r = r + this.graphics.line(m, b) + this.graphics.line(m + o - h, b) + this.graphics.line(m + o - h, b) + this.graphics.line(m + o - h, b) + this.graphics.line(m - h / 2, b), d.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && 0 === u) {
          p >= d.config.plotOptions.bar.colors.backgroundBarColors.length && (p = 0);
          var S = d.config.plotOptions.bar.colors.backgroundBarColors[p],
              C = this.graphics.drawRect(m, 0, o, d.globals.gridHeight, 0, S, d.config.plotOptions.bar.colors.backgroundBarOpacity);
          c.add(C), C.node.classList.add("apexcharts-backgroundBar");
        }

        return i += a, {
          pathTo: n,
          pathFrom: r,
          x: d.globals.isXNumeric ? i - a : i,
          y: s
        };
      }
    }, {
      key: "checkZeroSeries",
      value: function value(t) {
        for (var e = t.series, i = this.w, s = 0; s < e.length; s++) {
          for (var a = 0, n = 0; n < e[i.globals.maxValsInArrayIndex].length; n++) {
            a += e[s][n];
          }

          0 === a && this.zeroSerieses.push(s);
        }

        for (var r = e.length - 1; r >= 0; r--) {
          this.zeroSerieses.indexOf(r) > -1 && r === this.endingShapeOnSeriesNumber && (this.endingShapeOnSeriesNumber -= 1);
        }
      }
    }]), i;
  }(),
      E = function (t) {
    function i() {
      return e(this, i), h(this, o(i).apply(this, arguments));
    }

    return r(i, P), s(i, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w,
            s = new f(this.ctx),
            a = new S(this.ctx);
        this.candlestickOptions = this.w.config.plotOptions.candlestick;
        var n = new y(this.ctx, i);
        t = n.getLogSeries(t), this.series = t, this.yRatio = n.getLogYRatios(this.yRatio), this.initVariables(t);

        for (var r = s.group({
          "class": "apexcharts-candlestick-series apexcharts-plot-series"
        }), o = 0, l = 0; o < t.length; o++, l++) {
          var h,
              c,
              u = void 0,
              g = void 0,
              p = void 0,
              x = void 0,
              b = [],
              m = [],
              v = i.globals.comboCharts ? e[o] : o,
              w = s.group({
            "class": "apexcharts-series",
            seriesName: d.escapeString(i.globals.seriesNames[v]),
            rel: o + 1,
            "data:realIndex": v
          });
          t[o].length > 0 && (this.visibleI = this.visibleI + 1);
          var k,
              A,
              C = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = v);
          var L = this.initialPositions();
          x = L.y, k = L.barHeight, p = L.x, A = L.barWidth, h = L.xDivision, c = L.zeroH, m.push(p + A / 2);

          for (var z = s.group({
            "class": "apexcharts-datalabels"
          }), P = 0, M = i.globals.dataPoints; P < i.globals.dataPoints; P++, M--) {
            void 0 === this.series[o][P] || null === t[o][P] ? this.isNullValue = !0 : this.isNullValue = !1, i.config.stroke.show && (C = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[v] : this.strokeWidth);
            var E,
                T = this.drawCandleStickPaths({
              indexes: {
                i: o,
                j: P,
                realIndex: v,
                bc: l
              },
              x: p,
              y: x,
              xDivision: h,
              pathTo: u,
              pathFrom: g,
              barWidth: A,
              zeroH: c,
              strokeWidth: C,
              elSeries: w
            });
            u = T.pathTo, g = T.pathFrom, x = T.y, p = T.x, E = T.color, P > 0 && m.push(p + A / 2), b.push(x);
            var X = a.fillPath({
              seriesNumber: v,
              color: E,
              value: t[o][P]
            }),
                I = this.candlestickOptions.wick.useFillColor ? E : void 0;
            w = this.renderSeries({
              realIndex: v,
              pathFill: X,
              lineFill: I,
              j: P,
              i: o,
              pathFrom: g,
              pathTo: u,
              strokeWidth: C,
              elSeries: w,
              x: p,
              y: x,
              series: t,
              barHeight: k,
              barWidth: A,
              elDataLabelsWrap: z,
              visibleSeries: this.visibleI,
              type: "candlestick"
            });
          }

          i.globals.seriesXvalues[v] = m, i.globals.seriesYvalues[v] = b, r.add(w);
        }

        return r;
      }
    }, {
      key: "drawCandleStickPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            s = (t.y, t.xDivision),
            a = t.pathTo,
            n = t.pathFrom,
            r = t.barWidth,
            o = t.zeroH,
            l = t.strokeWidth,
            h = this.w,
            c = new f(this.ctx),
            d = e.i,
            u = e.j,
            g = !0,
            p = h.config.plotOptions.candlestick.colors.upward,
            x = h.config.plotOptions.candlestick.colors.downward,
            b = this.yRatio[this.yaxisIndex],
            m = e.realIndex,
            v = this.getOHLCValue(m, u),
            y = o,
            w = o;
        v.o > v.c && (g = !1);
        var k = Math.min(v.o, v.c),
            A = Math.max(v.o, v.c);
        h.globals.isXNumeric && (i = (h.globals.seriesX[d][u] - h.globals.minX) / this.xRatio - r / 2);
        var S = i + r * this.visibleI;
        return void 0 === this.series[d][u] || null === this.series[d][u] ? k = o : (k = o - k / b, A = o - A / b, y = o - v.h / b, w = o - v.l / b), c.move(S, o), n = c.move(S, k), h.globals.previousPaths.length > 0 && (n = this.getPathFrom(m, u, !0)), a = c.move(S, A) + c.line(S + r / 2, A) + c.line(S + r / 2, y) + c.line(S + r / 2, A) + c.line(S + r, A) + c.line(S + r, k) + c.line(S + r / 2, k) + c.line(S + r / 2, w) + c.line(S + r / 2, k) + c.line(S, k) + c.line(S, A - l / 2), n += c.move(S, k), h.globals.isXNumeric || (i += s), {
          pathTo: a,
          pathFrom: n,
          x: i,
          y: A,
          barXPosition: S,
          color: g ? p : x
        };
      }
    }, {
      key: "getOHLCValue",
      value: function value(t, e) {
        var i = this.w;
        return {
          o: i.globals.seriesCandleO[t][e],
          h: i.globals.seriesCandleH[t][e],
          l: i.globals.seriesCandleL[t][e],
          c: i.globals.seriesCandleC[t][e]
        };
      }
    }]), i;
  }(),
      T = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "drawXCrosshairs",
      value: function value() {
        var t = this.w,
            e = new f(this.ctx),
            i = new u(this.ctx),
            s = t.config.xaxis.crosshairs.fill.gradient,
            a = t.config.xaxis.crosshairs.dropShadow,
            n = t.config.xaxis.crosshairs.fill.type,
            r = s.colorFrom,
            o = s.colorTo,
            l = s.opacityFrom,
            h = s.opacityTo,
            c = s.stops,
            g = a.enabled,
            p = a.left,
            x = a.top,
            b = a.blur,
            m = a.color,
            v = a.opacity,
            y = t.config.xaxis.crosshairs.fill.color;

        if (t.config.xaxis.crosshairs.show) {
          "gradient" === n && (y = e.drawGradient("vertical", r, o, l, h, null, c, null));
          var w = e.drawRect();
          1 === t.config.xaxis.crosshairs.width && (w = e.drawLine()), w.attr({
            "class": "apexcharts-xcrosshairs",
            x: 0,
            y: 0,
            y2: t.globals.gridHeight,
            width: d.isNumber(t.config.xaxis.crosshairs.width) ? t.config.xaxis.crosshairs.width : 0,
            height: t.globals.gridHeight,
            fill: y,
            filter: "none",
            "fill-opacity": t.config.xaxis.crosshairs.opacity,
            stroke: t.config.xaxis.crosshairs.stroke.color,
            "stroke-width": t.config.xaxis.crosshairs.stroke.width,
            "stroke-dasharray": t.config.xaxis.crosshairs.stroke.dashArray
          }), g && (w = i.dropShadow(w, {
            left: p,
            top: x,
            blur: b,
            color: m,
            opacity: v
          })), t.globals.dom.elGraphical.add(w);
        }
      }
    }, {
      key: "drawYCrosshairs",
      value: function value() {
        var t = this.w,
            e = new f(this.ctx),
            i = t.config.yaxis[0].crosshairs;

        if (t.config.yaxis[0].crosshairs.show) {
          var s = e.drawLine(0, 0, t.globals.gridWidth, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);
          s.attr({
            "class": "apexcharts-ycrosshairs"
          }), t.globals.dom.elGraphical.add(s);
        }

        var a = e.drawLine(0, 0, t.globals.gridWidth, 0, i.stroke.color, 0, 0);
        a.attr({
          "class": "apexcharts-ycrosshairs-hidden"
        }), t.globals.dom.elGraphical.add(a);
      }
    }]), t;
  }(),
      X = function () {
    function t(i, s) {
      e(this, t), this.ctx = i, this.w = i.w, this.xRatio = s.xRatio, this.yRatio = s.yRatio, this.negRange = !1, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.width;
    }

    return s(t, [{
      key: "draw",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = i.group({
          "class": "apexcharts-heatmap"
        });
        s.attr("clip-path", "url(#gridRectMask".concat(e.globals.cuid, ")"));
        var a = e.globals.gridWidth / e.globals.dataPoints,
            n = e.globals.gridHeight / e.globals.series.length,
            r = 0,
            o = !1;
        this.checkColorRange();
        var l = t.slice();
        e.config.yaxis[0].reversed && (o = !0, l.reverse());

        for (var h = o ? 0 : l.length - 1; o ? h < l.length : h >= 0; o ? h++ : h--) {
          var c = i.group({
            "class": "apexcharts-series apexcharts-heatmap-series",
            seriesName: d.escapeString(e.globals.seriesNames[h]),
            rel: h + 1,
            "data:realIndex": h
          });

          if (e.config.chart.dropShadow.enabled) {
            var g = e.config.chart.dropShadow;
            new u(this.ctx).dropShadow(c, g, h);
          }

          for (var p = 0, x = 0; x < l[h].length; x++) {
            var b = 1,
                m = this.determineHeatColor(h, x);

            if (e.globals.hasNegs || this.negRange) {
              var v = e.config.plotOptions.heatmap.shadeIntensity;
              b = e.config.plotOptions.heatmap.reverseNegativeShade ? m.percent < 0 ? m.percent / 100 * (1.25 * v) : (1 - m.percent / 100) * (1.25 * v) : m.percent < 0 ? 1 - (1 + m.percent / 100) * v : (1 - m.percent / 100) * v;
            } else b = 1 - m.percent / 100;

            var y = m.color;

            if (e.config.plotOptions.heatmap.enableShades) {
              var w = new d();
              y = d.hexToRgba(w.shadeColor(b, m.color), e.config.fill.opacity);
            }

            var k = this.rectRadius,
                A = i.drawRect(p, r, a, n, k);

            if (A.attr({
              cx: p,
              cy: r
            }), A.node.classList.add("apexcharts-heatmap-rect"), c.add(A), A.attr({
              fill: y,
              i: h,
              index: h,
              j: x,
              val: l[h][x],
              "stroke-width": this.strokeWidth,
              stroke: e.globals.stroke.colors[0],
              color: y
            }), A.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this, A)), A.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this, A)), A.node.addEventListener("mousedown", i.pathMouseDown.bind(this, A)), e.config.chart.animations.enabled && !e.globals.dataChanged) {
              var S = 1;
              e.globals.resized || (S = e.config.chart.animations.speed), this.animateHeatMap(A, p, r, a, n, S);
            }

            if (e.globals.dataChanged) {
              var C = 1;

              if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {
                C = this.dynamicAnim.speed;
                var L = e.globals.previousPaths[h] && e.globals.previousPaths[h][x] && e.globals.previousPaths[h][x].color;
                L || (L = "rgba(255, 255, 255, 0)"), this.animateHeatColor(A, d.isColorHex(L) ? L : d.rgb2hex(L), d.isColorHex(y) ? y : d.rgb2hex(y), C);
              }
            }

            var z = this.calculateHeatmapDataLabels({
              x: p,
              y: r,
              i: h,
              j: x,
              series: l,
              rectHeight: n,
              rectWidth: a
            });
            null !== z && c.add(z), p += a;
          }

          r += n, s.add(c);
        }

        var P = e.globals.yAxisScale[0].result.slice();
        e.config.yaxis[0].reversed ? P.unshift("") : P.push(""), e.globals.yAxisScale[0].result = P;
        var M = e.globals.gridHeight / e.globals.series.length;
        return e.config.yaxis[0].labels.offsetY = -M / 2, s;
      }
    }, {
      key: "checkColorRange",
      value: function value() {
        var t = this,
            e = this.w.config.plotOptions.heatmap;
        e.colorScale.ranges.length > 0 && e.colorScale.ranges.map(function (e, i) {
          e.from < 0 && (t.negRange = !0);
        });
      }
    }, {
      key: "determineHeatColor",
      value: function value(t, e) {
        var i = this.w,
            s = i.globals.series[t][e],
            a = i.config.plotOptions.heatmap,
            n = a.colorScale.inverse ? e : t,
            r = i.globals.colors[n],
            o = Math.min.apply(Math, c(i.globals.series[t])),
            l = Math.max.apply(Math, c(i.globals.series[t]));
        a.distributed || (o = i.globals.minY, l = i.globals.maxY), void 0 !== a.colorScale.min && (o = a.colorScale.min < i.globals.minY ? a.colorScale.min : i.globals.minY, l = a.colorScale.max > i.globals.maxY ? a.colorScale.max : i.globals.maxY);
        var h = Math.abs(l) + Math.abs(o),
            d = 100 * s / (0 === h ? h - 1e-6 : h);
        a.colorScale.ranges.length > 0 && a.colorScale.ranges.map(function (t, e) {
          if (s >= t.from && s <= t.to) {
            r = t.color, o = t.from, l = t.to;
            var i = Math.abs(l) + Math.abs(o);
            d = 100 * s / (0 === i ? i - 1e-6 : i);
          }
        });
        return {
          color: r,
          percent: d
        };
      }
    }, {
      key: "calculateHeatmapDataLabels",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            s = t.i,
            a = t.j,
            n = (t.series, t.rectHeight),
            r = t.rectWidth,
            o = this.w,
            l = o.config.dataLabels,
            h = new f(this.ctx),
            c = new z(this.ctx),
            d = l.formatter,
            u = null;

        if (l.enabled) {
          u = h.group({
            "class": "apexcharts-data-labels"
          });
          var g = l.offsetX,
              p = l.offsetY,
              x = e + r / 2 + g,
              b = i + n / 2 + parseInt(l.style.fontSize) / 3 + p,
              m = d(o.globals.series[s][a], {
            seriesIndex: s,
            dataPointIndex: a,
            w: o
          });
          c.plotDataLabelsText({
            x: x,
            y: b,
            text: m,
            i: s,
            j: a,
            parent: u,
            dataLabelsConfig: l
          });
        }

        return u;
      }
    }, {
      key: "animateHeatMap",
      value: function value(t, e, i, s, a, n) {
        var r = this;
        new g(this.ctx).animateRect(t, {
          x: e + s / 2,
          y: i + a / 2,
          width: 0,
          height: 0
        }, {
          x: e,
          y: i,
          width: s,
          height: a
        }, n, function () {
          r.w.globals.animationEnded = !0;
        });
      }
    }, {
      key: "animateHeatColor",
      value: function value(t, e, i, s) {
        t.attr({
          fill: e
        }).animate(s).attr({
          fill: i
        });
      }
    }]), t;
  }(),
      I = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels;
      var s = this.w;
      this.lineColorArr = void 0 !== s.globals.stroke.colors ? s.globals.stroke.colors : s.globals.colors, this.defaultSize = s.globals.svgHeight < s.globals.svgWidth ? s.globals.svgHeight - 35 : s.globals.gridWidth, this.centerY = this.defaultSize / 2, this.centerX = s.globals.gridWidth / 2, this.fullAngle = 360, this.size = 0, this.donutSize = 0, this.sliceLabels = [], this.prevSectorAngleArr = [];
    }

    return s(t, [{
      key: "draw",
      value: function value(t) {
        for (var e = this.w, i = new f(this.ctx), s = i.group({
          "class": "apexcharts-pie"
        }), a = 0, n = 0; n < t.length; n++) {
          a += d.negToZero(t[n]);
        }

        var r = [],
            o = i.group();
        0 === a && (a = 1e-5);

        for (var l = 0; l < t.length; l++) {
          var h = this.fullAngle * d.negToZero(t[l]) / a;
          r.push(h);
        }

        if (e.globals.dataChanged) {
          for (var c, u = 0, g = 0; g < e.globals.previousPaths.length; g++) {
            u += d.negToZero(e.globals.previousPaths[g]);
          }

          for (var p = 0; p < e.globals.previousPaths.length; p++) {
            c = this.fullAngle * d.negToZero(e.globals.previousPaths[p]) / u, this.prevSectorAngleArr.push(c);
          }
        }

        this.size = this.defaultSize / 2.05 - e.config.stroke.width - e.config.chart.dropShadow.blur, void 0 !== e.config.plotOptions.pie.size && (this.size = e.config.plotOptions.pie.size), this.donutSize = this.size * parseInt(e.config.plotOptions.pie.donut.size) / 100;
        var x = e.config.plotOptions.pie.customScale,
            b = e.globals.gridWidth / 2,
            m = e.globals.gridHeight / 2,
            v = b - e.globals.gridWidth / 2 * x,
            y = m - e.globals.gridHeight / 2 * x;

        if (this.donutDataLabels.show) {
          var w = this.renderInnerDataLabels(this.donutDataLabels, {
            hollowSize: this.donutSize,
            centerX: this.centerX,
            centerY: this.centerY,
            opacity: this.donutDataLabels.show,
            translateX: v,
            translateY: y
          });
          s.add(w);
        }

        if ("donut" === e.config.chart.type) {
          var k = i.drawCircle(this.donutSize);
          k.attr({
            cx: this.centerX,
            cy: this.centerY,
            fill: e.config.plotOptions.pie.donut.background
          }), o.add(k);
        }

        var A = this.drawArcs(r, t);
        return this.sliceLabels.forEach(function (t) {
          A.add(t);
        }), o.attr({
          transform: "translate(".concat(v, ", ").concat(y - 5, ") scale(").concat(x, ")")
        }), s.attr({
          "data:innerTranslateX": v,
          "data:innerTranslateY": y - 25
        }), o.add(A), s.add(o), s;
      }
    }, {
      key: "drawArcs",
      value: function value(t, e) {
        var i = this.w,
            s = new u(this.ctx),
            a = new f(this.ctx),
            n = new S(this.ctx),
            r = a.group(),
            o = 0,
            l = 0,
            h = 0,
            c = 0;
        this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;

        for (var g = 0; g < t.length; g++) {
          var p = a.group({
            "class": "apexcharts-series apexcharts-pie-series",
            seriesName: d.escapeString(i.globals.seriesNames[g]),
            id: "apexcharts-series-" + g,
            rel: g + 1
          });
          r.add(p), l = c, h = (o = h) + t[g], c = l + this.prevSectorAngleArr[g];
          var x = h - o,
              b = n.fillPath({
            seriesNumber: g,
            size: this.size,
            value: e[g]
          }),
              m = this.getChangedPath(l, c),
              v = a.drawPath({
            d: m,
            stroke: this.lineColorArr instanceof Array ? this.lineColorArr[g] : this.lineColorArr,
            strokeWidth: this.strokeWidth,
            fill: b,
            fillOpacity: i.config.fill.opacity,
            classes: "apexcharts-pie-area"
          });

          if (v.attr({
            id: "apexcharts-".concat(i.config.chart.type, "-slice-").concat(g),
            index: 0,
            j: g
          }), i.config.chart.dropShadow.enabled) {
            var y = i.config.chart.dropShadow;
            s.dropShadow(v, y, g);
          }

          this.addListeners(v, this.donutDataLabels), f.setAttrs(v.node, {
            "data:angle": x,
            "data:startAngle": o,
            "data:strokeWidth": this.strokeWidth,
            "data:value": e[g]
          });
          var w = {
            x: 0,
            y: 0
          };
          "pie" === i.config.chart.type ? w = d.polarToCartesian(this.centerX, this.centerY, this.size / 1.25 + i.config.plotOptions.pie.dataLabels.offset, o + (h - o) / 2) : "donut" === i.config.chart.type && (w = d.polarToCartesian(this.centerX, this.centerY, (this.size + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, o + (h - o) / 2)), p.add(v);
          var k = 0;

          if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (k = (h - o) / this.fullAngle * i.config.chart.animations.speed, this.animDur = k + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(v, {
            endAngle: h,
            startAngle: o,
            prevStartAngle: l,
            prevEndAngle: c,
            animateStartingPos: !0,
            i: g,
            animBeginArr: this.animBeginArr,
            dur: i.config.chart.animations.dynamicAnimation.speed
          }) : this.animatePaths(v, {
            endAngle: h,
            startAngle: o,
            i: g,
            totalItems: t.length - 1,
            animBeginArr: this.animBeginArr,
            dur: k
          }), i.config.plotOptions.pie.expandOnClick && v.click(this.pieClicked.bind(this, g)), i.config.dataLabels.enabled) {
            var A = w.x,
                C = w.y,
                L = 100 * (h - o) / 360 + "%";

            if (0 !== x && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[g]) {
              var z = i.config.dataLabels.formatter;
              void 0 !== z && (L = z(i.globals.seriesPercent[g][0], {
                seriesIndex: g,
                w: i
              }));
              var P = i.globals.dataLabels.style.colors[g],
                  M = a.drawText({
                x: A,
                y: C,
                text: L,
                textAnchor: "middle",
                fontSize: i.config.dataLabels.style.fontSize,
                fontFamily: i.config.dataLabels.style.fontFamily,
                foreColor: P
              });

              if (i.config.dataLabels.dropShadow.enabled) {
                var E = i.config.dataLabels.dropShadow;
                new u(this.ctx).dropShadow(M, E);
              }

              M.node.classList.add("apexcharts-pie-label"), i.config.chart.animations.animate && !1 === i.globals.resized && (M.node.classList.add("apexcharts-pie-label-delay"), M.node.style.animationDelay = i.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(M);
            }
          }
        }

        return r;
      }
    }, {
      key: "addListeners",
      value: function value(t, e) {
        var i = new f(this.ctx);
        t.node.addEventListener("mouseenter", i.pathMouseEnter.bind(this, t)), t.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mouseleave", i.pathMouseLeave.bind(this, t)), t.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mousedown", i.pathMouseDown.bind(this, t)), t.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t.node, e));
      }
    }, {
      key: "animatePaths",
      value: function value(t, e) {
        var i = this.w,
            s = e.endAngle - e.startAngle,
            a = s,
            n = e.startAngle,
            r = e.startAngle;
        void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (n = e.prevEndAngle, a = e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (s + r > this.fullAngle ? e.endAngle = e.endAngle - (s + r) : s + r < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (s + r)))), s === this.fullAngle && (s = this.fullAngle - .01), this.animateArc(t, n, r, s, a, e);
      }
    }, {
      key: "animateArc",
      value: function value(t, e, i, s, a, n) {
        var r,
            o = this,
            l = this.w,
            h = o.size;
        h || (h = n.size), (isNaN(e) || isNaN(a)) && (e = i, a = s, n.dur = 0);
        var c = s,
            d = i,
            u = e - i;
        l.globals.dataChanged && n.shouldSetPrevPaths && (r = o.getPiePath({
          me: o,
          startAngle: d,
          angle: a,
          size: h
        }), t.attr({
          d: r
        })), 0 !== n.dur ? t.animate(n.dur, l.globals.easing, n.animBeginArr[n.i]).afterAll(function () {
          "pie" !== l.config.chart.type && "donut" !== l.config.chart.type || this.animate(300).attr({
            "stroke-width": l.config.stroke.width
          }), l.globals.animationEnded = !0;
        }).during(function (l) {
          c = u + (s - u) * l, n.animateStartingPos && (c = a + (s - a) * l, d = e - a + (i - (e - a)) * l), r = o.getPiePath({
            me: o,
            startAngle: d,
            angle: c,
            size: h
          }), t.node.setAttribute("data:pathOrig", r), t.attr({
            d: r
          });
        }) : (r = o.getPiePath({
          me: o,
          startAngle: d,
          angle: s,
          size: h
        }), n.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute("data:pathOrig", r), t.attr({
          d: r
        }));
      }
    }, {
      key: "pieClicked",
      value: function value(t) {
        var e,
            i = this.w,
            s = this.size + 4,
            a = i.globals.dom.Paper.select("#apexcharts-".concat(i.config.chart.type.toLowerCase(), "-slice-").concat(t)).members[0],
            n = a.attr("d");

        if ("true" !== a.attr("data:pieClicked")) {
          var r = i.globals.dom.baseEl.querySelectorAll(".apexcharts-pie-area");
          Array.prototype.forEach.call(r, function (t) {
            t.setAttribute("data:pieClicked", "false");
            var e = t.getAttribute("data:pathOrig");
            t.setAttribute("d", e);
          }), a.attr("data:pieClicked", "true");
          var o = parseInt(a.attr("data:startAngle")),
              l = parseInt(a.attr("data:angle"));
          e = this.getPiePath({
            me: this,
            startAngle: o,
            angle: l,
            size: s
          }), 360 !== l && a.plot(e).animate(1).plot(n).animate(100).plot(e);
        } else {
          a.attr({
            "data:pieClicked": "false"
          }), this.revertDataLabelsInner(a.node, this.donutDataLabels);
          var h = a.attr("data:pathOrig");
          a.attr({
            d: h
          });
        }
      }
    }, {
      key: "getChangedPath",
      value: function value(t, e) {
        var i = "";
        return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({
          me: this,
          startAngle: t,
          angle: e - t,
          size: this.size
        })), i;
      }
    }, {
      key: "getPiePath",
      value: function value(t) {
        var e = t.me,
            i = t.startAngle,
            s = t.angle,
            a = t.size,
            n = this.w,
            r = i,
            o = Math.PI * (r - 90) / 180,
            l = s + i;
        Math.ceil(l) >= 360 && (l = 359.99);
        var h = Math.PI * (l - 90) / 180,
            c = e.centerX + a * Math.cos(o),
            u = e.centerY + a * Math.sin(o),
            g = e.centerX + a * Math.cos(h),
            f = e.centerY + a * Math.sin(h),
            p = d.polarToCartesian(e.centerX, e.centerY, e.donutSize, l),
            x = d.polarToCartesian(e.centerX, e.centerY, e.donutSize, r),
            b = s > 180 ? 1 : 0;
        return "donut" === n.config.chart.type ? ["M", c, u, "A", a, a, 0, b, 1, g, f, "L", p.x, p.y, "A", e.donutSize, e.donutSize, 0, b, 0, x.x, x.y, "L", c, u, "z"].join(" ") : "pie" === n.config.chart.type ? ["M", c, u, "A", a, a, 0, b, 1, g, f, "L", e.centerX, e.centerY, "L", c, u].join(" ") : ["M", c, u, "A", a, a, 0, b, 1, g, f].join(" ");
      }
    }, {
      key: "renderInnerDataLabels",
      value: function value(t, e) {
        var i = this.w,
            s = new f(this.ctx),
            a = s.group({
          "class": "apexcharts-datalabels-group",
          transform: "translate(".concat(e.translateX ? e.translateX : 0, ", ").concat(e.translateY ? e.translateY : 0, ")")
        }),
            n = t.total.show;
        a.node.style.opacity = e.opacity;
        var r,
            o,
            l = e.centerX,
            h = e.centerY;
        r = void 0 === t.name.color ? i.globals.colors[0] : t.name.color, o = void 0 === t.value.color ? i.config.chart.foreColor : t.value.color;
        var c = t.value.formatter,
            d = "",
            u = "";

        if (n ? (r = t.total.color, u = t.total.label, d = t.total.formatter(i)) : 1 === i.globals.series.length && (d = c(i.globals.series[0], i), u = i.globals.seriesNames[0]), t.name.show) {
          var g = s.drawText({
            x: l,
            y: h + parseInt(t.name.offsetY),
            text: u,
            textAnchor: "middle",
            foreColor: r,
            fontSize: t.name.fontSize,
            fontFamily: t.name.fontFamily
          });
          g.node.classList.add("apexcharts-datalabel-label"), a.add(g);
        }

        if (t.value.show) {
          var p = t.name.show ? parseInt(t.value.offsetY) + 16 : t.value.offsetY,
              x = s.drawText({
            x: l,
            y: h + p,
            text: d,
            textAnchor: "middle",
            foreColor: o,
            fontSize: t.value.fontSize,
            fontFamily: t.value.fontFamily
          });
          x.node.classList.add("apexcharts-datalabel-value"), a.add(x);
        }

        return a;
      }
    }, {
      key: "printInnerLabels",
      value: function value(t, e, i, s) {
        var a,
            n = this.w;
        s ? a = void 0 === t.name.color ? n.globals.colors[parseInt(s.parentNode.getAttribute("rel")) - 1] : t.name.color : n.globals.series.length > 1 && t.total.show && (a = t.total.color);
        var r = n.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),
            o = n.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
        i = (0, t.value.formatter)(i, n), s || "function" != typeof t.total.formatter || (i = t.total.formatter(n)), null !== r && (r.textContent = e), null !== o && (o.textContent = i), null !== r && (r.style.fill = a);
      }
    }, {
      key: "printDataLabelsInner",
      value: function value(t, e) {
        var i = this.w,
            s = t.getAttribute("data:value"),
            a = i.globals.seriesNames[parseInt(t.parentNode.getAttribute("rel")) - 1];
        i.globals.series.length > 1 && this.printInnerLabels(e, a, s, t);
        var n = i.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
        null !== n && (n.style.opacity = 1);
      }
    }, {
      key: "revertDataLabelsInner",
      value: function value(e, i, s) {
        var a = this,
            n = this.w,
            r = n.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");

        if (i.total.show && n.globals.series.length > 1) {
          new t(this.ctx).printInnerLabels(i, i.total.label, i.total.formatter(n));
        } else {
          var o = document.querySelectorAll(".apexcharts-pie-area"),
              l = !1;
          if (o.forEach(function (t) {
            "true" === t.getAttribute("data:pieClicked") && (l = !0, a.printDataLabelsInner(t, i));
          }), !l) if (n.globals.selectedDataPoints.length && n.globals.series.length > 1) {
            if (n.globals.selectedDataPoints[0].length > 0) {
              var h = n.globals.selectedDataPoints[0],
                  c = n.globals.dom.baseEl.querySelector("#apexcharts-".concat(n.config.chart.type.toLowerCase(), "-slice-").concat(h));
              this.printDataLabelsInner(c, i);
            } else r && n.globals.selectedDataPoints.length && 0 === n.globals.selectedDataPoints[0].length && (r.style.opacity = 0);
          } else r && n.globals.series.length > 1 && (r.style.opacity = 0);
        }
      }
    }]), t;
  }(),
      Y = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
      var s = this.w;
      this.graphics = new f(this.ctx), this.lineColorArr = void 0 !== s.globals.stroke.colors ? s.globals.stroke.colors : s.globals.colors, this.defaultSize = s.globals.svgHeight < s.globals.svgWidth ? s.globals.svgHeight - 35 : s.globals.gridWidth, this.maxValue = this.w.globals.maxY, this.polygons = s.config.plotOptions.radar.polygons, this.maxLabelWidth = 20;
      var a = s.globals.labels.slice().sort(function (t, e) {
        return e.length - t.length;
      })[0],
          n = this.graphics.getTextRects(a, s.config.dataLabels.style.fontSize);
      this.size = this.defaultSize / 2.1 - s.config.stroke.width - s.config.chart.dropShadow.blur - n.width / 1.75, void 0 !== s.config.plotOptions.radar.size && (this.size = s.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];
    }

    return s(t, [{
      key: "draw",
      value: function value(t) {
        var e = this,
            i = this.w,
            s = new S(this.ctx),
            a = [];
        this.dataPointsLen = t[i.globals.maxValsInArrayIndex].length, this.disAngle = 2 * Math.PI / this.dataPointsLen;
        var r = i.globals.gridWidth / 2,
            o = i.globals.gridHeight / 2,
            l = this.graphics.group({
          "class": "apexcharts-radar-series",
          "data:innerTranslateX": r,
          "data:innerTranslateY": o - 25,
          transform: "translate(".concat(r || 0, ", ").concat(o || 0, ")")
        }),
            h = [],
            c = null;

        if (this.yaxisLabels = this.graphics.group({
          "class": "apexcharts-yaxis"
        }), t.forEach(function (t, r) {
          var o = e.graphics.group().attr({
            "class": "apexcharts-series",
            seriesName: d.escapeString(i.globals.seriesNames[r]),
            rel: r + 1,
            "data:realIndex": r
          });
          e.dataRadiusOfPercent[r] = [], e.dataRadius[r] = [], e.angleArr[r] = [], t.forEach(function (t, i) {
            e.dataRadiusOfPercent[r][i] = t / e.maxValue, e.dataRadius[r][i] = e.dataRadiusOfPercent[r][i] * e.size, e.angleArr[r][i] = i * e.disAngle;
          }), h = e.getDataPointsPos(e.dataRadius[r], e.angleArr[r]);
          var l = e.createPaths(h, {
            x: 0,
            y: 0
          });
          c = e.graphics.group({
            "class": "apexcharts-series-markers-wrap hidden"
          }), i.globals.delayedElements.push({
            el: c.node,
            index: r
          });
          var g = {
            i: r,
            realIndex: r,
            animationDelay: r,
            initialSpeed: i.config.chart.animations.speed,
            dataChangeSpeed: i.config.chart.animations.dynamicAnimation.speed,
            className: "apexcharts-radar",
            id: "apexcharts-radar",
            shouldClipToGrid: !1,
            bindEventsOnPaths: !1,
            stroke: i.globals.stroke.colors[r],
            strokeLineCap: i.config.stroke.lineCap
          },
              f = null;
          i.globals.previousPaths.length > 0 && (f = e.getPathFrom(r));

          for (var p = 0; p < l.linePathsTo.length; p++) {
            var x = e.graphics.renderPaths(n({}, g, {
              pathFrom: null === f ? l.linePathsFrom[p] : f,
              pathTo: l.linePathsTo[p],
              strokeWidth: Array.isArray(i.config.stroke.width) ? i.config.stroke.width[r] : i.config.stroke.width,
              fill: "none",
              drawShadow: !1
            }));
            o.add(x);
            var b = s.fillPath({
              seriesNumber: r
            }),
                m = e.graphics.renderPaths(n({}, g, {
              pathFrom: null === f ? l.areaPathsFrom[p] : f,
              pathTo: l.areaPathsTo[p],
              strokeWidth: 0,
              fill: b,
              drawShadow: !1
            }));

            if (i.config.chart.dropShadow.enabled) {
              var v = new u(e.ctx),
                  y = i.config.chart.dropShadow;
              v.dropShadow(m, Object.assign({}, y, {
                noUserSpaceOnUse: !0
              }), r);
            }

            o.add(m);
          }

          t.forEach(function (t, i) {
            var s = new C(e.ctx).getMarkerConfig("apexcharts-marker", r),
                a = e.graphics.drawMarker(h[i].x, h[i].y, s);
            a.attr("rel", i), a.attr("j", i), a.attr("index", r), a.node.setAttribute("default-marker-size", s.pSize);
            var n = e.graphics.group({
              "class": "apexcharts-series-markers"
            });
            n && n.add(a), c.add(n), o.add(c);
          }), a.push(o);
        }), this.drawPolygons({
          parent: l
        }), i.config.dataLabels.enabled) {
          var g = this.drawLabels();
          l.add(g);
        }

        return l.add(this.yaxisLabels), a.forEach(function (t) {
          l.add(t);
        }), l;
      }
    }, {
      key: "drawPolygons",
      value: function value(t) {
        for (var e = this, i = this.w, s = t.parent, a = i.globals.yAxisScale[0].result.reverse(), n = a.length, r = [], o = this.size / (n - 1), l = 0; l < n; l++) {
          r[l] = o * l;
        }

        r.reverse();
        var h = [],
            c = [];
        r.forEach(function (t, i) {
          var s = e.getPolygonPos(t),
              a = "";
          s.forEach(function (t, s) {
            if (0 === i) {
              var n = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[s] : e.polygons.connectorColors);
              c.push(n);
            }

            0 === s && e.yaxisLabelsTextsPos.push({
              x: t.x,
              y: t.y
            }), a += t.x + "," + t.y + " ";
          }), h.push(a);
        }), h.forEach(function (t, a) {
          var n = e.polygons.strokeColors,
              r = e.graphics.drawPolygon(t, Array.isArray(n) ? n[a] : n, i.globals.radarPolygons.fill.colors[a]);
          s.add(r);
        }), c.forEach(function (t) {
          s.add(t);
        }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function (t, i) {
          var s = e.drawYAxisText(t.x, t.y, i, a[i]);
          e.yaxisLabels.add(s);
        });
      }
    }, {
      key: "drawYAxisText",
      value: function value(t, e, i, s) {
        var a = this.w,
            n = a.config.yaxis[0],
            r = a.globals.yLabelFormatters[0];
        return this.graphics.drawText({
          x: t + n.labels.offsetX,
          y: e + n.labels.offsetY,
          text: r(s, i),
          textAnchor: "middle",
          fontSize: n.labels.style.fontSize,
          fontFamily: n.labels.style.fontFamily,
          foreColor: n.labels.style.color
        });
      }
    }, {
      key: "drawLabels",
      value: function value() {
        var t = this,
            e = this.w,
            i = "middle",
            s = e.config.dataLabels,
            a = this.graphics.group({
          "class": "apexcharts-datalabels"
        }),
            n = this.getPolygonPos(this.size),
            r = 0,
            o = 0;
        return e.globals.labels.forEach(function (l, h) {
          var c = s.formatter,
              d = new z(t.ctx);

          if (n[h]) {
            r = n[h].x, o = n[h].y, Math.abs(n[h].x) >= 10 ? n[h].x > 0 ? (i = "start", r += 10) : n[h].x < 0 && (i = "end", r -= 10) : i = "middle", Math.abs(n[h].y) >= t.size - 10 && (n[h].y < 0 ? o -= 10 : n[h].y > 0 && (o += 10));
            var u = c(l, {
              seriesIndex: -1,
              dataPointIndex: h,
              w: e
            });
            d.plotDataLabelsText({
              x: r,
              y: o,
              text: u,
              textAnchor: i,
              i: h,
              j: h,
              parent: a,
              dataLabelsConfig: s,
              offsetCorrection: !1
            });
          }
        }), a;
      }
    }, {
      key: "createPaths",
      value: function value(t, e) {
        var i = this,
            s = [],
            a = [],
            n = [],
            r = [];

        if (t.length) {
          a = [this.graphics.move(e.x, e.y)], r = [this.graphics.move(e.x, e.y)];
          var o = this.graphics.move(t[0].x, t[0].y),
              l = this.graphics.move(t[0].x, t[0].y);
          t.forEach(function (e, s) {
            o += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), s === t.length - 1 && (o += "Z", l += "Z");
          }), s.push(o), n.push(l);
        }

        return {
          linePathsFrom: a,
          linePathsTo: s,
          areaPathsFrom: r,
          areaPathsTo: n
        };
      }
    }, {
      key: "getPathFrom",
      value: function value(t) {
        for (var e = this.w, i = null, s = 0; s < e.globals.previousPaths.length; s++) {
          var a = e.globals.previousPaths[s];
          a.paths.length > 0 && parseInt(a.realIndex) === parseInt(t) && void 0 !== e.globals.previousPaths[s].paths[0] && (i = e.globals.previousPaths[s].paths[0].d);
        }

        return i;
      }
    }, {
      key: "getDataPointsPos",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
        t = t || [], e = e || [];

        for (var s = [], a = 0; a < i; a++) {
          var n = {};
          n.x = t[a] * Math.sin(e[a]), n.y = -t[a] * Math.cos(e[a]), s.push(n);
        }

        return s;
      }
    }, {
      key: "getPolygonPos",
      value: function value(t) {
        for (var e = [], i = 2 * Math.PI / this.dataPointsLen, s = 0; s < this.dataPointsLen; s++) {
          var a = {};
          a.x = t * Math.sin(s * i), a.y = -t * Math.cos(s * i), e.push(a);
        }

        return e;
      }
    }]), t;
  }(),
      F = function (t) {
    function i(t) {
      var s;
      e(this, i), (s = h(this, o(i).call(this, t))).ctx = t, s.w = t.w, s.animBeginArr = [0], s.animDur = 0;
      var a = s.w;
      return s.startAngle = a.config.plotOptions.radialBar.startAngle, s.endAngle = a.config.plotOptions.radialBar.endAngle, s.trackStartAngle = a.config.plotOptions.radialBar.track.startAngle, s.trackEndAngle = a.config.plotOptions.radialBar.track.endAngle, s.radialDataLabels = a.config.plotOptions.radialBar.dataLabels, s.trackStartAngle || (s.trackStartAngle = s.startAngle), s.trackEndAngle || (s.trackEndAngle = s.endAngle), 360 === s.endAngle && (s.endAngle = 359.99), s.fullAngle = 360 - a.config.plotOptions.radialBar.endAngle - a.config.plotOptions.radialBar.startAngle, s.margin = parseInt(a.config.plotOptions.radialBar.track.margin), s;
    }

    return r(i, I), s(i, [{
      key: "draw",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = i.group({
          "class": "apexcharts-radialbar"
        }),
            a = i.group(),
            n = this.defaultSize / 2,
            r = e.globals.gridWidth / 2,
            o = this.defaultSize / 2.05 - e.config.stroke.width - e.config.chart.dropShadow.blur;
        void 0 !== e.config.plotOptions.radialBar.size && (o = e.config.plotOptions.radialBar.size);
        var l = e.globals.fill.colors;

        if (e.config.plotOptions.radialBar.track.show) {
          var h = this.drawTracks({
            size: o,
            centerX: r,
            centerY: n,
            colorArr: l,
            series: t
          });
          a.add(h);
        }

        var c = this.drawArcs({
          size: o,
          centerX: r,
          centerY: n,
          colorArr: l,
          series: t
        });
        return a.add(c.g), "front" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), s.add(a), s;
      }
    }, {
      key: "drawTracks",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = i.group(),
            a = new u(this.ctx),
            n = new S(this.ctx),
            r = this.getStrokeWidth(t);
        t.size = t.size - r / 2;

        for (var o = 0; o < t.series.length; o++) {
          var l = i.group({
            "class": "apexcharts-radialbar-track apexcharts-track"
          });
          s.add(l), l.attr({
            id: "apexcharts-track-" + o,
            rel: o + 1
          }), t.size = t.size - r - this.margin;
          var h = e.config.plotOptions.radialBar.track,
              c = n.fillPath({
            seriesNumber: 0,
            size: t.size,
            fillColors: Array.isArray(h.background) ? h.background[o] : h.background,
            solid: !0
          }),
              d = this.trackStartAngle,
              g = this.trackEndAngle;
          Math.abs(g) + Math.abs(d) >= 360 && (g = 360 - Math.abs(this.startAngle) - .1);
          var p = i.drawPath({
            d: "",
            stroke: c,
            strokeWidth: r * parseInt(h.strokeWidth) / 100,
            fill: "none",
            strokeOpacity: h.opacity,
            classes: "apexcharts-radialbar-area"
          });

          if (h.dropShadow.enabled) {
            var x = h.dropShadow;
            a.dropShadow(p, x);
          }

          l.add(p), p.attr("id", "apexcharts-radialbarTrack-" + o), new I(this.ctx).animatePaths(p, {
            centerX: t.centerX,
            centerY: t.centerY,
            endAngle: g,
            startAngle: d,
            size: t.size,
            i: o,
            totalItems: 2,
            animBeginArr: 0,
            dur: 0,
            isTrack: !0,
            easing: e.globals.easing
          });
        }

        return s;
      }
    }, {
      key: "drawArcs",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = new S(this.ctx),
            a = new u(this.ctx),
            n = i.group(),
            r = this.getStrokeWidth(t);
        t.size = t.size - r / 2;
        var o = e.config.plotOptions.radialBar.hollow.background,
            l = t.size - r * t.series.length - this.margin * t.series.length - r * parseInt(e.config.plotOptions.radialBar.track.strokeWidth) / 100 / 2,
            h = l - e.config.plotOptions.radialBar.hollow.margin;
        void 0 !== e.config.plotOptions.radialBar.hollow.image && (o = this.drawHollowImage(t, n, l, o));
        var c = this.drawHollow({
          size: h,
          centerX: t.centerX,
          centerY: t.centerY,
          fill: o
        });

        if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
          var g = e.config.plotOptions.radialBar.hollow.dropShadow;
          a.dropShadow(c, g);
        }

        var p = 1;
        !this.radialDataLabels.total.show && e.globals.series.length > 1 && (p = 0);
        var x = new I(this.ctx),
            b = null;
        this.radialDataLabels.show && (b = x.renderInnerDataLabels(this.radialDataLabels, {
          hollowSize: l,
          centerX: t.centerX,
          centerY: t.centerY,
          opacity: p
        })), "back" === e.config.plotOptions.radialBar.hollow.position && (n.add(c), b && n.add(b));
        var m = !1;
        e.config.plotOptions.radialBar.inverseOrder && (m = !0);

        for (var v = m ? t.series.length - 1 : 0; m ? v >= 0 : v < t.series.length; m ? v-- : v++) {
          var y = i.group({
            "class": "apexcharts-series apexcharts-radial-series",
            seriesName: d.escapeString(e.globals.seriesNames[v])
          });
          n.add(y), y.attr({
            id: "apexcharts-series-" + v,
            rel: v + 1
          }), this.ctx.series.addCollapsedClassToSeries(y, v), t.size = t.size - r - this.margin;
          var w = s.fillPath({
            seriesNumber: v,
            size: t.size,
            value: t.series[v]
          }),
              k = this.startAngle,
              A = void 0,
              C = Math.abs(e.config.plotOptions.radialBar.endAngle - e.config.plotOptions.radialBar.startAngle),
              L = d.negToZero(t.series[v] > 100 ? 100 : t.series[v]) / 100,
              z = Math.round(C * L) + this.startAngle,
              P = void 0;
          e.globals.dataChanged && (A = this.startAngle, P = Math.round(C * d.negToZero(e.globals.previousPaths[v]) / 100) + A), Math.abs(z) + Math.abs(k) >= 360 && (z -= .01), Math.abs(P) + Math.abs(A) >= 360 && (P -= .01);
          var M = z - k,
              E = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[v] : e.config.stroke.dashArray,
              T = i.drawPath({
            d: "",
            stroke: w,
            strokeWidth: r,
            fill: "none",
            fillOpacity: e.config.fill.opacity,
            classes: "apexcharts-radialbar-area",
            strokeDashArray: E
          });

          if (f.setAttrs(T.node, {
            "data:angle": M,
            "data:value": t.series[v]
          }), e.config.chart.dropShadow.enabled) {
            var X = e.config.chart.dropShadow;
            a.dropShadow(T, X, v);
          }

          this.addListeners(T, this.radialDataLabels);
          var Y = new I(this.ctx);
          y.add(T), T.attr({
            id: "apexcharts-radialbar-slice-" + v,
            index: 0,
            j: v
          });
          var F = 0;
          !Y.initialAnim || e.globals.resized || e.globals.dataChanged || (F = (z - k) / 360 * e.config.chart.animations.speed, this.animDur = F / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), e.globals.dataChanged && (F = (z - k) / 360 * e.config.chart.animations.dynamicAnimation.speed, this.animDur = F / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), Y.animatePaths(T, {
            centerX: t.centerX,
            centerY: t.centerY,
            endAngle: z,
            startAngle: k,
            prevEndAngle: P,
            prevStartAngle: A,
            size: t.size,
            i: v,
            totalItems: 2,
            animBeginArr: this.animBeginArr,
            dur: F,
            shouldSetPrevPaths: !0,
            easing: e.globals.easing
          });
        }

        return {
          g: n,
          elHollow: c,
          dataLabels: b
        };
      }
    }, {
      key: "drawHollow",
      value: function value(t) {
        var e = new f(this.ctx).drawCircle(2 * t.size);
        return e.attr({
          "class": "apexcharts-radialbar-hollow",
          cx: t.centerX,
          cy: t.centerY,
          r: t.size,
          fill: t.fill
        }), e;
      }
    }, {
      key: "drawHollowImage",
      value: function value(t, e, i, s) {
        var a = this.w,
            n = new S(this.ctx),
            r = (Math.random() + 1).toString(36).substring(4),
            o = a.config.plotOptions.radialBar.hollow.image;
        if (a.config.plotOptions.radialBar.hollow.imageClipped) n.clippedImgArea({
          width: i,
          height: i,
          image: o,
          patternID: "pattern".concat(a.globals.cuid).concat(r)
        }), s = "url(#pattern".concat(a.globals.cuid).concat(r, ")");else {
          var l = a.config.plotOptions.radialBar.hollow.imageWidth,
              h = a.config.plotOptions.radialBar.hollow.imageHeight;

          if (void 0 === l && void 0 === h) {
            var c = a.globals.dom.Paper.image(o).loaded(function (e) {
              this.move(t.centerX - e.width / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetY);
            });
            e.add(c);
          } else {
            var d = a.globals.dom.Paper.image(o).loaded(function (e) {
              this.move(t.centerX - l / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);
            });
            e.add(d);
          }
        }
        return s;
      }
    }, {
      key: "getStrokeWidth",
      value: function value(t) {
        var e = this.w;
        return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size)) / 100 / (t.series.length + 1) - this.margin;
      }
    }]), i;
  }(),
      R = function (t) {
    function i() {
      return e(this, i), h(this, o(i).apply(this, arguments));
    }

    return r(i, P), s(i, [{
      key: "draw",
      value: function value(t, e) {
        var i = this.w,
            s = new f(this.ctx),
            a = new S(this.ctx);
        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = i.globals.seriesRangeStart, this.seriesRangeEnd = i.globals.seriesRangeEnd, this.initVariables(t);

        for (var n = s.group({
          "class": "apexcharts-rangebar-series apexcharts-plot-series"
        }), r = 0, o = 0; r < t.length; r++, o++) {
          var l,
              h,
              c,
              u,
              g = void 0,
              p = void 0,
              x = void 0,
              b = void 0,
              m = [],
              v = [],
              y = i.globals.comboCharts ? e[r] : r,
              w = s.group({
            "class": "apexcharts-series",
            seriesName: d.escapeString(i.globals.seriesNames[y]),
            rel: r + 1,
            "data:realIndex": y
          });
          t[r].length > 0 && (this.visibleI = this.visibleI + 1);
          var k = 0,
              A = 0,
              C = 0;
          this.yRatio.length > 1 && (this.yaxisIndex = y);
          var L = this.initialPositions();
          b = L.y, h = L.yDivision, A = L.barHeight, u = L.zeroW, x = L.x, C = L.barWidth, l = L.xDivision, c = L.zeroH, v.push(x + C / 2);

          for (var z = s.group({
            "class": "apexcharts-datalabels"
          }), P = 0, M = i.globals.dataPoints; P < i.globals.dataPoints; P++, M--) {
            void 0 === this.series[r][P] || null === t[r][P] ? this.isNullValue = !0 : this.isNullValue = !1, i.config.stroke.show && (k = this.isNullValue ? 0 : Array.isArray(this.strokeWidth) ? this.strokeWidth[y] : this.strokeWidth);
            var E = null;
            this.isHorizontal ? C = (E = this.drawRangeBarPaths({
              indexes: {
                i: r,
                j: P,
                realIndex: y,
                bc: o
              },
              barHeight: A,
              strokeWidth: k,
              pathTo: g,
              pathFrom: p,
              zeroW: u,
              x: x,
              y: b,
              yDivision: h,
              elSeries: w
            })).barWidth : A = (E = this.drawRangeColumnPaths({
              indexes: {
                i: r,
                j: P,
                realIndex: y,
                bc: o
              },
              x: x,
              y: b,
              xDivision: l,
              pathTo: g,
              pathFrom: p,
              barWidth: C,
              zeroH: c,
              strokeWidth: k,
              elSeries: w
            })).barHeight, g = E.pathTo, p = E.pathFrom, b = E.y, x = E.x, P > 0 && v.push(x + C / 2), m.push(b);
            var T = a.fillPath({
              seriesNumber: y
            }),
                X = i.globals.stroke.colors[y];
            w = this.renderSeries({
              realIndex: y,
              pathFill: T,
              lineFill: X,
              j: P,
              i: r,
              pathFrom: p,
              pathTo: g,
              strokeWidth: k,
              elSeries: w,
              x: x,
              y: b,
              series: t,
              barHeight: A,
              barWidth: C,
              elDataLabelsWrap: z,
              visibleSeries: this.visibleI,
              type: "rangebar"
            });
          }

          i.globals.seriesXvalues[y] = v, i.globals.seriesYvalues[y] = m, n.add(w);
        }

        return n;
      }
    }, {
      key: "drawRangeColumnPaths",
      value: function value(t) {
        var e = t.indexes,
            i = t.x,
            s = (t.y, t.strokeWidth),
            a = t.xDivision,
            n = t.pathTo,
            r = t.pathFrom,
            o = t.barWidth,
            l = t.zeroH,
            h = this.w,
            c = new f(this.ctx),
            d = e.i,
            u = e.j,
            g = this.yRatio[this.yaxisIndex],
            p = e.realIndex,
            x = this.getRangeValue(p, u),
            b = Math.min(x.start, x.end),
            m = Math.max(x.start, x.end);
        h.globals.isXNumeric && (i = (h.globals.seriesX[d][u] - h.globals.minX) / this.xRatio - o / 2);
        var v = i + o * this.visibleI;
        void 0 === this.series[d][u] || null === this.series[d][u] ? b = l : (b = l - b / g, m = l - m / g);
        var y = Math.abs(m - b);
        return c.move(v, l), r = c.move(v, b), h.globals.previousPaths.length > 0 && (r = this.getPathFrom(p, u, !0)), n = c.move(v, m) + c.line(v + o, m) + c.line(v + o, b) + c.line(v, b) + c.line(v, m - s / 2), r = r + c.move(v, b) + c.line(v + o, b) + c.line(v + o, b) + c.line(v, b), h.globals.isXNumeric || (i += a), {
          pathTo: n,
          pathFrom: r,
          barHeight: y,
          x: i,
          y: m,
          barXPosition: v
        };
      }
    }, {
      key: "drawRangeBarPaths",
      value: function value(t) {
        var e = t.indexes,
            i = (t.x, t.y),
            s = t.yDivision,
            a = t.pathTo,
            n = t.pathFrom,
            r = t.barHeight,
            o = t.zeroW,
            l = this.w,
            h = new f(this.ctx),
            c = e.i,
            d = e.j,
            u = e.realIndex,
            g = o,
            p = o;
        l.globals.isXNumeric && (i = (l.globals.seriesX[c][d] - l.globals.minX) / this.invertedXRatio - r);
        var x = i + r * this.visibleI;
        void 0 !== this.series[c][d] && null !== this.series[c][d] && (g = o + this.seriesRangeStart[c][d] / this.invertedYRatio, p = o + this.seriesRangeEnd[c][d] / this.invertedYRatio), h.move(o, x), n = h.move(o, x), l.globals.previousPaths.length > 0 && (n = this.getPathFrom(u, d));
        var b = Math.abs(p - g);
        return a = h.move(g, x) + h.line(p, x) + h.line(p, x + r) + h.line(g, x + r) + h.line(g, x), n = n + h.line(g, x) + h.line(g, x + r) + h.line(g, x + r) + h.line(g, x), l.globals.isXNumeric || (i += s), {
          pathTo: a,
          pathFrom: n,
          barWidth: b,
          x: p,
          y: i,
          barYPosition: x
        };
      }
    }, {
      key: "getRangeValue",
      value: function value(t, e) {
        var i = this.w;
        return {
          start: i.globals.seriesRangeStart[t][e],
          end: i.globals.seriesRangeEnd[t][e]
        };
      }
    }]), i;
  }(),
      D = function () {
    function t(i, s, a) {
      e(this, t), this.ctx = i, this.w = i.w, this.xyRatios = s, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || a, this.scatter = new L(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.yaxisIndex = 0;
    }

    return s(t, [{
      key: "draw",
      value: function value(t, e, i) {
        var s = this.w,
            a = new f(this.ctx),
            r = new S(this.ctx),
            o = s.globals.comboCharts ? e : s.config.chart.type,
            l = a.group({
          "class": "apexcharts-".concat(o, "-series apexcharts-plot-series")
        }),
            h = new y(this.ctx, s);
        t = h.getLogSeries(t);
        var c = this.xyRatios.yRatio;
        c = h.getLogYRatios(c);

        for (var u = this.xyRatios.zRatio, g = this.xyRatios.xRatio, p = this.xyRatios.baseLineY, x = [], b = [], m = 0, v = 0; v < t.length; v++) {
          if ("line" === o && ("gradient" === s.config.fill.type || "gradient" === s.config.fill.type[v]) && h.seriesHaveSameValues(v)) {
            var w = t[v].slice();
            w[w.length - 1] = w[w.length - 1] + 1e-6, t[v] = w;
          }

          var k = s.globals.gridWidth / s.globals.dataPoints,
              A = s.globals.comboCharts ? i[v] : v;
          c.length > 1 && (this.yaxisIndex = A), this.isReversed = s.config.yaxis[this.yaxisIndex] && s.config.yaxis[this.yaxisIndex].reversed;
          var L = [],
              P = [],
              M = s.globals.gridHeight - p[this.yaxisIndex] - (this.isReversed ? s.globals.gridHeight : 0) + (this.isReversed ? 2 * p[this.yaxisIndex] : 0),
              E = M;
          M > s.globals.gridHeight && (E = s.globals.gridHeight), m = k / 2;
          var T = s.globals.padHorizontal + m,
              X = 1;
          s.globals.isXNumeric && s.globals.seriesX.length > 0 && (T = (s.globals.seriesX[A][0] - s.globals.minX) / g), P.push(T);
          var I = void 0,
              Y = void 0,
              F = void 0,
              R = void 0,
              D = [],
              N = [],
              O = a.group({
            "class": "apexcharts-series",
            seriesName: d.escapeString(s.globals.seriesNames[A])
          }),
              H = a.group({
            "class": "apexcharts-series-markers-wrap"
          }),
              W = a.group({
            "class": "apexcharts-datalabels"
          });
          this.ctx.series.addCollapsedClassToSeries(O, A);
          var B = t[v].length === s.globals.dataPoints;
          O.attr({
            "data:longestSeries": B,
            rel: v + 1,
            "data:realIndex": A
          }), this.appendPathFrom = !0;
          var V = T,
              G = void 0,
              _ = V,
              j = M,
              U = 0;

          if (j = this.determineFirstPrevY({
            i: v,
            series: t,
            yRatio: c[this.yaxisIndex],
            zeroY: M,
            prevY: j,
            prevSeriesY: b,
            lineYPosition: U
          }).prevY, L.push(j), G = j, null === t[v][0]) {
            for (var q = 0; q < t[v].length; q++) {
              if (null !== t[v][q]) {
                _ = k * q, j = M - t[v][q] / c[this.yaxisIndex], I = a.move(_, j), Y = a.move(_, E);
                break;
              }
            }
          } else I = a.move(_, j), Y = a.move(_, E) + a.line(_, j);

          if (F = a.move(-1, M) + a.line(-1, M), R = a.move(-1, M) + a.line(-1, M), s.globals.previousPaths.length > 0) {
            var Z = this.checkPreviousPaths({
              pathFromLine: F,
              pathFromArea: R,
              realIndex: A
            });
            F = Z.pathFromLine, R = Z.pathFromArea;
          }

          for (var $ = s.globals.dataPoints > 1 ? s.globals.dataPoints - 1 : s.globals.dataPoints, J = 0; J < $; J++) {
            if (s.globals.isXNumeric) {
              var Q = s.globals.seriesX[A][J + 1];
              void 0 === s.globals.seriesX[A][J + 1] && (Q = s.globals.seriesX[A][$ - 1]), T = (Q - s.globals.minX) / g;
            } else T += k;

            var K = d.isNumber(s.globals.minYArr[A]) ? s.globals.minYArr[A] : s.globals.minY;
            s.config.chart.stacked ? (U = v > 0 && s.globals.collapsedSeries.length < s.config.series.length - 1 ? b[v - 1][J + 1] : M, X = void 0 === t[v][J + 1] || null === t[v][J + 1] ? U - K / c[this.yaxisIndex] + 2 * (this.isReversed ? K / c[this.yaxisIndex] : 0) : U - t[v][J + 1] / c[this.yaxisIndex] + 2 * (this.isReversed ? t[v][J + 1] / c[this.yaxisIndex] : 0)) : X = void 0 === t[v][J + 1] || null === t[v][J + 1] ? M - K / c[this.yaxisIndex] + 2 * (this.isReversed ? K / c[this.yaxisIndex] : 0) : M - t[v][J + 1] / c[this.yaxisIndex] + 2 * (this.isReversed ? t[v][J + 1] / c[this.yaxisIndex] : 0), P.push(T), L.push(X);
            var tt = this.createPaths({
              series: t,
              i: v,
              j: J,
              x: T,
              y: X,
              xDivision: k,
              pX: V,
              pY: G,
              areaBottomY: E,
              linePath: I,
              areaPath: Y,
              linePaths: D,
              areaPaths: N,
              seriesIndex: i
            });
            N = tt.areaPaths, D = tt.linePaths, V = tt.pX, G = tt.pY, Y = tt.areaPath, I = tt.linePath, this.appendPathFrom && (F += a.line(T, M), R += a.line(T, M));
            var et = this.calculatePoints({
              series: t,
              x: T,
              y: X,
              realIndex: A,
              i: v,
              j: J,
              prevY: j,
              categoryAxisCorrection: m,
              xRatio: g
            });
            if (this.pointsChart) this.scatter.draw(O, J, {
              realIndex: A,
              pointsPos: et,
              zRatio: u,
              elParent: H
            });else {
              var it = new C(this.ctx);
              s.globals.dataPoints > 1 && H.node.classList.add("hidden");
              var st = it.plotChartMarkers(et, A, J + 1);
              null !== st && H.add(st);
            }
            var at = !t[v][J + 1] || t[v][J + 1] > t[v][J] ? "top" : "bottom",
                nt = new z(this.ctx).drawDataLabel(et, A, J + 1, null, at);
            null !== nt && W.add(nt);
          }

          b.push(L), s.globals.seriesXvalues[A] = P, s.globals.seriesYvalues[A] = L, this.pointsChart || s.globals.delayedElements.push({
            el: H.node,
            index: A
          });
          var rt = {
            i: v,
            realIndex: A,
            animationDelay: v,
            initialSpeed: s.config.chart.animations.speed,
            dataChangeSpeed: s.config.chart.animations.dynamicAnimation.speed,
            className: "apexcharts-".concat(o),
            id: "apexcharts-".concat(o)
          };
          if ("area" === o) for (var ot = r.fillPath({
            seriesNumber: A
          }), lt = 0; lt < N.length; lt++) {
            var ht = a.renderPaths(n({}, rt, {
              pathFrom: R,
              pathTo: N[lt],
              stroke: "none",
              strokeWidth: 0,
              strokeLineCap: null,
              fill: ot
            }));
            O.add(ht);
          }

          if (s.config.stroke.show && !this.pointsChart) {
            var ct = null;
            ct = "line" === o ? r.fillPath({
              seriesNumber: A,
              i: v
            }) : s.globals.stroke.colors[A];

            for (var dt = 0; dt < D.length; dt++) {
              var ut = a.renderPaths(n({}, rt, {
                pathFrom: F,
                pathTo: D[dt],
                stroke: ct,
                strokeWidth: Array.isArray(s.config.stroke.width) ? s.config.stroke.width[A] : s.config.stroke.width,
                strokeLineCap: s.config.stroke.lineCap,
                fill: "none"
              }));
              O.add(ut);
            }
          }

          O.add(H), O.add(W), x.push(O);
        }

        for (var gt = x.length; gt > 0; gt--) {
          l.add(x[gt - 1]);
        }

        return l;
      }
    }, {
      key: "createPaths",
      value: function value(t) {
        var e = t.series,
            i = t.i,
            s = t.j,
            a = t.x,
            n = t.y,
            r = t.pX,
            o = t.pY,
            l = t.xDivision,
            h = t.areaBottomY,
            c = t.linePath,
            d = t.areaPath,
            u = t.linePaths,
            g = t.areaPaths,
            p = t.seriesIndex,
            x = this.w,
            b = new f(this.ctx),
            m = x.config.stroke.curve;

        if (Array.isArray(x.config.stroke.curve) && (m = Array.isArray(p) ? x.config.stroke.curve[p[i]] : x.config.stroke.curve[i]), "smooth" === m) {
          var v = .35 * (a - r);
          x.globals.hasNullValues ? (null !== e[i][s] && (null !== e[i][s + 1] ? (c = b.move(r, o) + b.curve(r + v, o, a - v, n, a + 1, n), d = b.move(r + 1, o) + b.curve(r + v, o, a - v, n, a + 1, n) + b.line(a, h) + b.line(r, h) + "z") : (c = b.move(r, o), d = b.move(r, o) + "z")), u.push(c), g.push(d)) : (c += b.curve(r + v, o, a - v, n, a, n), d += b.curve(r + v, o, a - v, n, a, n)), r = a, o = n, s === e[i].length - 2 && (d = d + b.curve(r, o, a, n, a, h) + b.move(a, n) + "z", x.globals.hasNullValues || (u.push(c), g.push(d)));
        } else null === e[i][s + 1] && (c += b.move(a, n), d = d + b.line(a - l, h) + b.move(a, n)), null === e[i][s] && (c += b.move(a, n), d += b.move(a, h)), "stepline" === m ? (c = c + b.line(a, null, "H") + b.line(null, n, "V"), d = d + b.line(a, null, "H") + b.line(null, n, "V")) : "straight" === m && (c += b.line(a, n), d += b.line(a, n)), s === e[i].length - 2 && (d = d + b.line(a, h) + b.move(a, n) + "z", u.push(c), g.push(d));

        return {
          linePaths: u,
          areaPaths: g,
          pX: r,
          pY: o,
          linePath: c,
          areaPath: d
        };
      }
    }, {
      key: "calculatePoints",
      value: function value(t) {
        var e = t.series,
            i = t.realIndex,
            s = t.x,
            a = t.y,
            n = t.i,
            r = t.j,
            o = t.prevY,
            l = t.categoryAxisCorrection,
            h = t.xRatio,
            c = this.w,
            u = [],
            g = [];

        if (0 === r) {
          var f = l + c.config.markers.offsetX;
          c.globals.isXNumeric && (f = (c.globals.seriesX[i][0] - c.globals.minX) / h + c.config.markers.offsetX), u.push(f), g.push(d.isNumber(e[n][0]) ? o + c.config.markers.offsetY : null), u.push(s + c.config.markers.offsetX), g.push(d.isNumber(e[n][r + 1]) ? a + c.config.markers.offsetY : null);
        } else u.push(s + c.config.markers.offsetX), g.push(d.isNumber(e[n][r + 1]) ? a + c.config.markers.offsetY : null);

        return {
          x: u,
          y: g
        };
      }
    }, {
      key: "checkPreviousPaths",
      value: function value(t) {
        for (var e = t.pathFromLine, i = t.pathFromArea, s = t.realIndex, a = this.w, n = 0; n < a.globals.previousPaths.length; n++) {
          var r = a.globals.previousPaths[n];
          ("line" === r.type || "area" === r.type) && r.paths.length > 0 && parseInt(r.realIndex) === parseInt(s) && ("line" === r.type ? (this.appendPathFrom = !1, e = a.globals.previousPaths[n].paths[0].d) : "area" === r.type && (this.appendPathFrom = !1, i = a.globals.previousPaths[n].paths[0].d, a.config.stroke.show && (e = a.globals.previousPaths[n].paths[1].d)));
        }

        return {
          pathFromLine: e,
          pathFromArea: i
        };
      }
    }, {
      key: "determineFirstPrevY",
      value: function value(t) {
        var e = t.i,
            i = t.series,
            s = t.yRatio,
            a = t.zeroY,
            n = t.prevY,
            r = t.prevSeriesY,
            o = t.lineYPosition,
            l = this.w;
        if (void 0 !== i[e][0]) n = l.config.chart.stacked ? (o = e > 0 ? r[e - 1][0] : a) - i[e][0] / s + 2 * (this.isReversed ? i[e][0] / s : 0) : a - i[e][0] / s + 2 * (this.isReversed ? i[e][0] / s : 0);else if (l.config.chart.stacked && e > 0 && void 0 === i[e][0]) for (var h = e - 1; h >= 0; h--) {
          if (null !== i[h][0] && void 0 !== i[h][0]) {
            n = o = r[h][0];
            break;
          }
        }
        return {
          prevY: n,
          lineYPosition: o
        };
      }
    }]), t;
  }(),
      N = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.tooltipKeyFormat = "dd MMM";
    }

    return s(t, [{
      key: "xLabelFormat",
      value: function value(t, e) {
        var i = this.w;
        if ("datetime" === i.config.xaxis.type && void 0 === i.config.tooltip.x.formatter) return new m(this.ctx).formatDate(new Date(e), i.config.tooltip.x.format, !0, !0);
        return t(e);
      }
    }, {
      key: "setLabelFormatters",
      value: function value() {
        var t = this.w;
        return t.globals.xLabelFormatter = function (t) {
          return t;
        }, t.globals.xaxisTooltipFormatter = function (t) {
          return t;
        }, t.globals.ttKeyFormatter = function (t) {
          return t;
        }, t.globals.ttZFormatter = function (t) {
          return t;
        }, t.globals.legendFormatter = function (t) {
          return t;
        }, "function" == typeof t.config.tooltip.x.formatter && (t.globals.ttKeyFormatter = t.config.tooltip.x.formatter), "function" == typeof t.config.xaxis.tooltip.formatter && (t.globals.xaxisTooltipFormatter = t.config.xaxis.tooltip.formatter), Array.isArray(t.config.tooltip.y) ? t.globals.ttVal = t.config.tooltip.y : void 0 !== t.config.tooltip.y.formatter && (t.globals.ttVal = t.config.tooltip.y), void 0 !== t.config.tooltip.z.formatter && (t.globals.ttZFormatter = t.config.tooltip.z.formatter), void 0 !== t.config.legend.formatter && (t.globals.legendFormatter = t.config.legend.formatter), void 0 !== t.config.xaxis.labels.formatter ? t.globals.xLabelFormatter = t.config.xaxis.labels.formatter : t.globals.xLabelFormatter = function (e) {
          return d.isNumber(e) ? "numeric" === t.config.xaxis.type && t.globals.dataPoints < 50 ? e.toFixed(1) : e.toFixed(0) : e;
        }, t.config.yaxis.forEach(function (e, i) {
          void 0 !== e.labels.formatter ? t.globals.yLabelFormatters[i] = e.labels.formatter : t.globals.yLabelFormatters[i] = function (i) {
            return d.isNumber(i) ? 0 !== t.globals.yValueDecimal ? i.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : t.globals.yValueDecimal) : t.globals.maxY - t.globals.minY < 5 ? i.toFixed(1) : i.toFixed(0) : i;
          };
        }), t.globals;
      }
    }, {
      key: "heatmapLabelFormatters",
      value: function value() {
        var t = this.w;

        if ("heatmap" === t.config.chart.type) {
          t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();
          var e = t.globals.seriesNames.reduce(function (t, e) {
            return t.length > e.length ? t : e;
          }, 0);
          t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;
        }
      }
    }]), t;
  }(),
      O = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "getLabel",
      value: function value(t, e, i, s) {
        var a,
            n = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],
            r = this.w,
            o = void 0 === t[s] ? "" : t[s],
            l = r.globals.xLabelFormatter,
            h = r.config.xaxis.labels.formatter;
        return a = new N(this.ctx).xLabelFormat(l, o), void 0 !== h && (a = h(o, t[s], s)), e.length > 0 ? (i = e[s].position, a = e[s].value) : "datetime" === r.config.xaxis.type && void 0 === h && (a = ""), void 0 === a && (a = ""), (0 === (a = a.toString()).indexOf("NaN") || 0 === a.toLowerCase().indexOf("invalid") || a.toLowerCase().indexOf("infinity") >= 0 || n.indexOf(a) >= 0 && !r.config.xaxis.labels.showDuplicates) && (a = ""), {
          x: i,
          text: a
        };
      }
    }, {
      key: "drawYAxisTicks",
      value: function value(t, e, i, s, a, n, r) {
        var o = this.w,
            l = new f(this.ctx),
            h = o.globals.translateY;

        if (s.show) {
          !0 === o.config.yaxis[a].opposite && (t += s.width);

          for (var c = e; c >= 0; c--) {
            var d = h + e / 10 + o.config.yaxis[a].labels.offsetY - 1;
            o.globals.isBarHorizontal && (d = n * c);
            var u = l.drawLine(t + i.offsetX - s.width + s.offsetX, d + s.offsetY, t + i.offsetX + s.offsetX, d + s.offsetY, i.color);
            r.add(u), h += n;
          }
        }
      }
    }]), t;
  }(),
      H = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var s = this.w;
      this.xaxisLabels = s.globals.labels.slice(), s.globals.timelineLabels.length > 0 && (this.xaxisLabels = s.globals.timelineLabels.slice()), this.drawnLabels = [], "top" === s.config.xaxis.position ? this.offY = 0 : this.offY = s.globals.gridHeight + 1, this.offY = this.offY + s.config.xaxis.axisBorder.offsetY, this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xaxisBorderWidth = s.config.xaxis.axisBorder.width, this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = s.globals.gridWidth * parseInt(this.xaxisBorderWidth) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth), this.xaxisBorderHeight = s.config.xaxis.axisBorder.height, this.yaxis = s.config.yaxis[0], this.axesUtils = new O(i);
    }

    return s(t, [{
      key: "drawXaxis",
      value: function value() {
        var t,
            e = this.w,
            i = new f(this.ctx),
            s = i.group({
          "class": "apexcharts-xaxis",
          transform: "translate(".concat(e.config.xaxis.offsetX, ", ").concat(e.config.xaxis.offsetY, ")")
        }),
            a = i.group({
          "class": "apexcharts-xaxis-texts-g",
          transform: "translate(".concat(e.globals.translateXAxisX, ", ").concat(e.globals.translateXAxisY, ")")
        });
        s.add(a);

        for (var n = e.globals.padHorizontal, r = [], o = 0; o < this.xaxisLabels.length; o++) {
          r.push(this.xaxisLabels[o]);
        }

        n = e.globals.isXNumeric ? n + (t = e.globals.gridWidth / (r.length - 1)) / 2 + e.config.xaxis.labels.offsetX : n + (t = e.globals.gridWidth / r.length) + e.config.xaxis.labels.offsetX;
        var l = r.length;
        if (e.config.xaxis.labels.show) for (var h = 0; h <= l - 1; h++) {
          var c = n - t / 2 + e.config.xaxis.labels.offsetX,
              d = this.axesUtils.getLabel(r, e.globals.timelineLabels, c, h, this.drawnLabels);
          this.drawnLabels.push(d.text);
          var u = 28;
          e.globals.rotateXLabels && (u = 22);
          var g = i.drawText({
            x: d.x,
            y: this.offY + e.config.xaxis.labels.offsetY + u,
            text: "",
            textAnchor: "middle",
            fontSize: this.xaxisFontSize,
            fontFamily: this.xaxisFontFamily,
            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[h] : this.xaxisForeColors,
            cssClass: "apexcharts-xaxis-label " + e.config.xaxis.labels.style.cssClass
          });
          h === l - 1 && e.globals.skipLastTimelinelabel && (d.text = ""), a.add(g), i.addTspan(g, d.text, this.xaxisFontFamily);
          var p = document.createElementNS(e.globals.SVGNS, "title");
          p.textContent = d.text, g.node.appendChild(p), n += t;
        }

        if (void 0 !== e.config.xaxis.title.text) {
          var x = i.group({
            "class": "apexcharts-xaxis-title"
          }),
              b = i.drawText({
            x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,
            y: this.offY - parseInt(this.xaxisFontSize) + e.globals.xAxisLabelsHeight + e.config.xaxis.title.offsetY,
            text: e.config.xaxis.title.text,
            textAnchor: "middle",
            fontSize: e.config.xaxis.title.style.fontSize,
            fontFamily: e.config.xaxis.title.style.fontFamily,
            foreColor: e.config.xaxis.title.style.color,
            cssClass: "apexcharts-xaxis-title-text " + e.config.xaxis.title.style.cssClass
          });
          x.add(b), s.add(x);
        }

        if (e.config.xaxis.axisBorder.show) {
          var m = 0;
          "bar" === e.config.chart.type && e.globals.isXNumeric && (m -= 15);
          var v = i.drawLine(e.globals.padHorizontal + m + e.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, e.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
          s.add(v);
        }

        return s;
      }
    }, {
      key: "drawXaxisInversed",
      value: function value(t) {
        var e,
            i,
            s = this.w,
            a = new f(this.ctx),
            n = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0,
            r = a.group({
          "class": "apexcharts-yaxis apexcharts-xaxis-inversed",
          rel: t
        }),
            o = a.group({
          "class": "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
          transform: "translate(" + n + ", 0)"
        });
        r.add(o);

        for (var l = [], h = 0; h < this.xaxisLabels.length; h++) {
          l.push(this.xaxisLabels[h]);
        }

        i = -(e = s.globals.gridHeight / l.length) / 2.2;
        var c = s.globals.yLabelFormatters[0],
            d = s.config.yaxis[0].labels;
        if (d.show) for (var u = 0; u <= l.length - 1; u++) {
          var g = void 0 === l[u] ? "" : l[u];
          g = c(g);
          var p = a.drawText({
            x: d.offsetX - 15,
            y: i + e + d.offsetY,
            text: g,
            textAnchor: this.yaxis.opposite ? "start" : "end",
            foreColor: d.style.color ? d.style.color : d.style.colors[u],
            fontSize: d.style.fontSize,
            fontFamily: d.style.fontFamily,
            cssClass: "apexcharts-yaxis-label " + d.style.cssClass
          });

          if (o.add(p), 0 !== s.config.yaxis[t].labels.rotate) {
            var x = a.rotateAroundCenter(p.node);
            p.node.setAttribute("transform", "rotate(".concat(s.config.yaxis[t].labels.rotate, " ").concat(x.x, " ").concat(x.y, ")"));
          }

          i += e;
        }

        if (void 0 !== s.config.yaxis[0].title.text) {
          var b = a.group({
            "class": "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
            transform: "translate(" + n + ", 0)"
          }),
              m = a.drawText({
            x: 0,
            y: s.globals.gridHeight / 2,
            text: s.config.yaxis[0].title.text,
            textAnchor: "middle",
            foreColor: s.config.yaxis[0].title.style.color,
            fontSize: s.config.yaxis[0].title.style.fontSize,
            fontFamily: s.config.yaxis[0].title.style.fontFamily,
            cssClass: "apexcharts-yaxis-title-text " + s.config.yaxis[0].title.style.cssClass
          });
          b.add(m), r.add(b);
        }

        if (s.config.xaxis.axisBorder.show) {
          var v = a.drawLine(s.globals.padHorizontal + s.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, this.yaxis.axisBorder.color, 0, this.xaxisBorderHeight);
          r.add(v), this.axesUtils.drawYAxisTicks(0, l.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, r);
        }

        return r;
      }
    }, {
      key: "drawXaxisTicks",
      value: function value(t, e) {
        var i = this.w,
            s = t;

        if (!(t < 0 || t > i.globals.gridWidth)) {
          var a = this.offY + i.config.xaxis.axisTicks.offsetY,
              n = a + i.config.xaxis.axisTicks.height;

          if (i.config.xaxis.axisTicks.show) {
            var r = new f(this.ctx).drawLine(t + i.config.xaxis.axisTicks.offsetX, a + i.config.xaxis.offsetY, s + i.config.xaxis.axisTicks.offsetX, n + i.config.xaxis.offsetY, i.config.xaxis.axisTicks.color);
            e.add(r), r.node.classList.add("apexcharts-xaxis-tick");
          }
        }
      }
    }, {
      key: "getXAxisTicksPositions",
      value: function value() {
        var t = this.w,
            e = [],
            i = this.xaxisLabels.length,
            s = t.globals.padHorizontal;
        if (t.globals.timelineLabels.length > 0) for (var a = 0; a < i; a++) {
          s = this.xaxisLabels[a].position, e.push(s);
        } else for (var n = i, r = 0; r < n; r++) {
          var o = n;
          t.globals.isXNumeric && "bar" !== t.config.chart.type && (o -= 1), s += t.globals.gridWidth / o, e.push(s);
        }
        return e;
      }
    }, {
      key: "xAxisLabelCorrections",
      value: function value() {
        var t = this.w,
            e = new f(this.ctx),
            i = t.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),
            s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text"),
            a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),
            n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text");
        if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for (var r = 0; r < s.length; r++) {
          var o = e.rotateAroundCenter(s[r]);
          o.y = o.y - 1, o.x = o.x + 1, s[r].setAttribute("transform", "rotate(".concat(t.config.xaxis.labels.rotate, " ").concat(o.x, " ").concat(o.y, ")")), s[r].setAttribute("text-anchor", "end");
          i.setAttribute("transform", "translate(0, ".concat(-10, ")"));
          var l = s[r].childNodes;
          t.config.xaxis.labels.trim && e.placeTextWithEllipsis(l[0], l[0].textContent, t.config.xaxis.labels.maxHeight - 40);
        } else for (var h = t.globals.gridWidth / t.globals.labels.length, c = 0; c < s.length; c++) {
          var d = s[c].childNodes;
          t.config.xaxis.labels.trim && "datetime" !== t.config.xaxis.type && e.placeTextWithEllipsis(d[0], d[0].textContent, h);
        }

        if (a.length > 0) {
          var u = a[a.length - 1].getBBox(),
              g = a[0].getBBox();
          u.x < -20 && a[a.length - 1].parentNode.removeChild(a[a.length - 1]), g.x + g.width > t.globals.gridWidth && a[0].parentNode.removeChild(a[0]);

          for (var p = 0; p < n.length; p++) {
            e.placeTextWithEllipsis(n[p], n[p].textContent, t.config.yaxis[0].labels.maxWidth - 2 * parseInt(t.config.yaxis[0].title.style.fontSize) - 20);
          }
        }
      }
    }]), t;
  }(),
      W = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var s = this.w;
      this.xaxisFontSize = s.config.xaxis.labels.style.fontSize, this.axisFontFamily = s.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = s.config.xaxis.labels.style.colors, this.xAxisoffX = 0, "bottom" === s.config.xaxis.position && (this.xAxisoffX = s.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new O(i);
    }

    return s(t, [{
      key: "drawYaxis",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = e.config.yaxis[t].labels.style.fontSize,
            a = e.config.yaxis[t].labels.style.fontFamily,
            n = i.group({
          "class": "apexcharts-yaxis",
          rel: t,
          transform: "translate(" + e.globals.translateYAxisX[t] + ", 0)"
        });
        if (!e.config.yaxis[t].show) return n;
        var r = i.group({
          "class": "apexcharts-yaxis-texts-g"
        });
        n.add(r);
        var o = e.globals.yAxisScale[t].result.length - 1,
            l = e.globals.gridHeight / o + .1,
            h = e.globals.translateY,
            c = e.globals.yLabelFormatters[t],
            d = e.globals.yAxisScale[t].result.slice();
        if (e.config.yaxis[t] && e.config.yaxis[t].reversed && d.reverse(), e.config.yaxis[t].labels.show) for (var u = o; u >= 0; u--) {
          var g = d[u];
          g = c(g, u);
          var p = e.config.yaxis[t].labels.padding;
          e.config.yaxis[t].opposite && 0 !== e.config.yaxis.length && (p *= -1);
          var x = i.drawText({
            x: p,
            y: h + o / 10 + e.config.yaxis[t].labels.offsetY + 1,
            text: g,
            textAnchor: e.config.yaxis[t].opposite ? "start" : "end",
            fontSize: s,
            fontFamily: a,
            foreColor: e.config.yaxis[t].labels.style.color,
            cssClass: "apexcharts-yaxis-label " + e.config.yaxis[t].labels.style.cssClass
          });
          r.add(x);
          var b = i.rotateAroundCenter(x.node);
          0 !== e.config.yaxis[t].labels.rotate && x.node.setAttribute("transform", "rotate(".concat(e.config.yaxis[t].labels.rotate, " ").concat(b.x, " ").concat(b.y, ")")), h += l;
        }

        if (void 0 !== e.config.yaxis[t].title.text) {
          var m = i.group({
            "class": "apexcharts-yaxis-title"
          }),
              v = 0;
          e.config.yaxis[t].opposite && (v = e.globals.translateYAxisX[t]);
          var y = i.drawText({
            x: v,
            y: e.globals.gridHeight / 2 + e.globals.translateY,
            text: e.config.yaxis[t].title.text,
            textAnchor: "end",
            foreColor: e.config.yaxis[t].title.style.color,
            fontSize: e.config.yaxis[t].title.style.fontSize,
            fontFamily: e.config.yaxis[t].title.style.fontFamily,
            cssClass: "apexcharts-yaxis-title-text " + e.config.yaxis[t].title.style.cssClass
          });
          m.add(y), n.add(m);
        }

        var w = e.config.yaxis[t].axisBorder;

        if (w.show) {
          var k = 31 + w.offsetX;
          e.config.yaxis[t].opposite && (k = -31 - w.offsetX);
          var A = i.drawLine(k, e.globals.translateY + w.offsetY - 2, k, e.globals.gridHeight + e.globals.translateY + w.offsetY + 2, w.color);
          n.add(A), this.axesUtils.drawYAxisTicks(k, o, w, e.config.yaxis[t].axisTicks, t, l, n);
        }

        return n;
      }
    }, {
      key: "drawYaxisInversed",
      value: function value(t) {
        var e = this.w,
            i = new f(this.ctx),
            s = i.group({
          "class": "apexcharts-xaxis apexcharts-yaxis-inversed"
        }),
            a = i.group({
          "class": "apexcharts-xaxis-texts-g",
          transform: "translate(".concat(e.globals.translateXAxisX, ", ").concat(e.globals.translateXAxisY, ")")
        });
        s.add(a);
        var n = e.globals.yAxisScale[t].result.length - 1,
            r = e.globals.gridWidth / n + .1,
            o = r + e.config.xaxis.labels.offsetX,
            l = e.globals.xLabelFormatter,
            h = e.globals.yAxisScale[t].result.slice(),
            c = e.globals.invertedTimelineLabels;
        c.length > 0 && (this.xaxisLabels = c.slice(), n = (h = c.slice()).length), e.config.yaxis[t] && e.config.yaxis[t].reversed && h.reverse();
        var d = c.length;
        if (e.config.xaxis.labels.show) for (var u = d ? 0 : n; d ? u < d - 1 : u >= 0; d ? u++ : u--) {
          var g = h[u];
          g = l(g, u);
          var p = e.globals.gridWidth + e.globals.padHorizontal - (o - r + e.config.xaxis.labels.offsetX);

          if (c.length) {
            var x = this.axesUtils.getLabel(h, c, p, u, this.drawnLabels);
            p = x.x, g = x.text, this.drawnLabels.push(x.text);
          }

          var b = i.drawText({
            x: p,
            y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30,
            text: "",
            textAnchor: "middle",
            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,
            fontSize: this.xaxisFontSize,
            fontFamily: this.xaxisFontFamily,
            cssClass: "apexcharts-xaxis-label " + e.config.xaxis.labels.style.cssClass
          });
          a.add(b), b.tspan(g);
          var m = document.createElementNS(e.globals.SVGNS, "title");
          m.textContent = g, b.node.appendChild(m), o += r;
        }

        if (void 0 !== e.config.xaxis.title.text) {
          var v = i.group({
            "class": "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
          }),
              y = i.drawText({
            x: e.globals.gridWidth / 2,
            y: this.xAxisoffX + parseInt(this.xaxisFontSize) + parseInt(e.config.xaxis.title.style.fontSize) + 20,
            text: e.config.xaxis.title.text,
            textAnchor: "middle",
            fontSize: e.config.xaxis.title.style.fontSize,
            fontFamily: e.config.xaxis.title.style.fontFamily,
            cssClass: "apexcharts-xaxis-title-text " + e.config.xaxis.title.style.cssClass
          });
          v.add(y), s.add(v);
        }

        var w = e.config.yaxis[t].axisBorder;

        if (w.show) {
          var k = i.drawLine(e.globals.padHorizontal + w.offsetX, 1 + w.offsetY, e.globals.padHorizontal + w.offsetX, e.globals.gridHeight + w.offsetY, w.color);
          s.add(k);
        }

        return s;
      }
    }, {
      key: "yAxisTitleRotate",
      value: function value(t, e) {
        var i = this.w,
            s = new f(this.ctx),
            a = {
          width: 0,
          height: 0
        },
            n = {
          width: 0,
          height: 0
        },
            r = i.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-texts-g"));
        null !== r && (a = r.getBoundingClientRect());
        var o = i.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-title text"));

        if (null !== o && (n = o.getBoundingClientRect()), null !== o) {
          var l = this.xPaddingForYAxisTitle(t, a, n, e);
          o.setAttribute("x", l.xPos - (e ? 10 : 0));
        }

        if (null !== o) {
          var h = s.rotateAroundCenter(o);
          e ? o.setAttribute("transform", "rotate(".concat(i.config.yaxis[t].title.rotate, " ").concat(h.x, " ").concat(h.y, ")")) : o.setAttribute("transform", "rotate(-".concat(i.config.yaxis[t].title.rotate, " ").concat(h.x, " ").concat(h.y, ")"));
        }
      }
    }, {
      key: "xPaddingForYAxisTitle",
      value: function value(t, e, i, s) {
        var a = this.w,
            n = 0,
            r = 0,
            o = 10;
        return void 0 === a.config.yaxis[t].title.text || t < 0 ? {
          xPos: r,
          padd: 0
        } : (s ? (r = e.width + a.config.yaxis[t].title.offsetX + i.width / 2 + o / 2, 0 === (n += 1) && (r -= o / 2)) : (r = -1 * e.width + a.config.yaxis[t].title.offsetX + o / 2 + i.width / 2, a.globals.isBarHorizontal && (o = 25, r = -1 * e.width - a.config.yaxis[t].title.offsetX - o)), {
          xPos: r,
          padd: o
        });
      }
    }, {
      key: "setYAxisXPosition",
      value: function value(t, e) {
        var i = this.w,
            s = 0,
            a = 0,
            n = 21,
            r = 1;
        i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.map(function (o, l) {
          var h = i.globals.ignoreYAxisIndexes.indexOf(l) > -1 || !o.show || o.floating || 0 === t[l].width,
              c = t[l].width + e[l].width;
          o.opposite ? i.globals.isBarHorizontal ? (a = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = a - o.labels.offsetX) : (a = i.globals.gridWidth + i.globals.translateX + r, h || (r = r + c + 20), i.globals.translateYAxisX[l] = a - o.labels.offsetX + 20) : (s = i.globals.translateX - n, h || (n = n + c + 20), i.globals.translateYAxisX[l] = s + o.labels.offsetX);
        });
      }
    }, {
      key: "setYAxisTextAlignments",
      value: function value() {
        var t = this.w,
            e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis");
        (e = d.listToArray(e)).forEach(function (e, i) {
          var s = t.config.yaxis[i];

          if (void 0 !== s.labels.align) {
            var a = t.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(i, "'] .apexcharts-yaxis-texts-g")),
                n = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(i, "'] .apexcharts-yaxis-label"));
            n = d.listToArray(n);
            var r = a.getBoundingClientRect();
            "left" === s.labels.align ? (n.forEach(function (t, e) {
              t.setAttribute("text-anchor", "start");
            }), s.opposite || a.setAttribute("transform", "translate(-".concat(r.width, ", 0)"))) : "center" === s.labels.align ? (n.forEach(function (t, e) {
              t.setAttribute("text-anchor", "middle");
            }), a.setAttribute("transform", "translate(".concat(r.width / 2 * (s.opposite ? 1 : -1), ", 0)"))) : "right" === s.labels.align && (n.forEach(function (t, e) {
              t.setAttribute("text-anchor", "end");
            }), s.opposite && a.setAttribute("transform", "translate(".concat(r.width, ", 0)")));
          }
        });
      }
    }]), t;
  }(),
      B = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "niceScale",
      value: function value(t, e, i) {
        var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
            a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 10,
            n = this.w,
            r = void 0 === this.w.config.yaxis[s].max && void 0 === this.w.config.yaxis[s].min || this.w.config.yaxis[s].forceNiceScale;
        if (t === Number.MIN_VALUE && 0 === e || !d.isNumber(t) && !d.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) return t = 0, e = a, this.linearScale(t, e, a);
        t > e ? (console.warn("yaxis.min cannot be greater than yaxis.max"), e = t + .1) : t === e && (t = 0 === t ? 0 : t - .5, e = 0 === e ? 2 : e + .5);
        var o = [],
            l = Math.abs(e - t);
        l < 1 && r && ("candlestick" === n.config.chart.type || "candlestick" === n.config.series[s].type || n.globals.isRangeData) && (e *= 1.01), l < 1e-5 && r && e < 10 ? e *= 1.05 : i > .1 && i < 3 && r && (e += i / 3);
        var h = a + 1;
        h < 2 ? h = 2 : h > 2 && (h -= 2);

        for (var c = l / h, u = Math.floor(d.log10(c)), g = Math.pow(10, u), f = parseInt(c / g) * g, p = f * Math.floor(t / f), x = f * Math.ceil(e / f), b = p; o.push(b), !((b += f) > x);) {
          ;
        }

        if (r) return {
          result: o,
          niceMin: o[0],
          niceMax: o[o.length - 1]
        };
        var m = t;
        (o = []).push(m);

        for (var v = Math.abs(e - t) / a, y = 0; y <= a - 1; y++) {
          m += v, o.push(m);
        }

        return {
          result: o,
          niceMin: o[0],
          niceMax: o[o.length - 1]
        };
      }
    }, {
      key: "linearScale",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
            s = Math.abs(e - t) / i;
        i === Number.MAX_VALUE && (i = 10, s = 1);

        for (var a = [], n = t; i >= 0;) {
          a.push(n), n += s, i -= 1;
        }

        return {
          result: a,
          niceMin: a[0],
          niceMax: a[a.length - 1]
        };
      }
    }, {
      key: "logarithmicScale",
      value: function value(t, e, i, s) {
        (e < 0 || e === Number.MIN_VALUE) && (e = .01);

        for (var a = Math.log(e) / Math.log(10), n = Math.log(i) / Math.log(10), r = Math.abs(i - e) / s, o = [], l = e; s >= 0;) {
          o.push(l), l += r, s -= 1;
        }

        var h = o.map(function (t, s) {
          t <= 0 && (t = .01);
          var r = (n - a) / (i - e),
              o = Math.pow(10, a + r * (t - a));
          return Math.round(o / d.roundToBase(o, 10)) * d.roundToBase(o, 10);
        });
        return 0 === h[0] && (h[0] = 1), {
          result: h,
          niceMin: h[0],
          niceMax: h[h.length - 1]
        };
      }
    }, {
      key: "setYScaleForIndex",
      value: function value(t, e, i) {
        var s = this.w.globals,
            a = this.w.config,
            n = s.isBarHorizontal ? a.xaxis : a.yaxis[t];
        if (void 0 === s.yAxisScale[t] && (s.yAxisScale[t] = []), n.logarithmic) s.allSeriesCollapsed = !1, s.yAxisScale[t] = this.logarithmicScale(t, e, i, n.tickAmount ? n.tickAmount : Math.floor(Math.log10(i)));else if (i !== -Number.MAX_VALUE && d.isNumber(i)) {
          if (s.allSeriesCollapsed = !1, void 0 === n.min && void 0 === n.max || n.forceNiceScale) {
            var r = Math.abs(i - e);
            s.yAxisScale[t] = this.niceScale(e, i, r, t, n.tickAmount ? n.tickAmount : r < 5 && r > 1 ? r + 1 : 5);
          } else s.yAxisScale[t] = this.linearScale(e, i, n.tickAmount);
        } else s.yAxisScale[t] = this.linearScale(0, 5, 5);
      }
    }, {
      key: "setMultipleYScales",
      value: function value() {
        var t = this,
            e = this.w.globals,
            i = this.w.config,
            s = e.minYArr.concat([]),
            a = e.maxYArr.concat([]),
            n = [];
        i.yaxis.forEach(function (r, o) {
          var l = o;
          i.series.forEach(function (t, i) {
            t.name === r.seriesName && -1 === e.collapsedSeriesIndices.indexOf(i) && (l = i, o !== i ? n.push({
              index: i,
              similarIndex: o,
              alreadyExists: !0
            }) : n.push({
              index: i
            }));
          });
          var h = s[l],
              c = a[l];
          t.setYScaleForIndex(o, h, c);
        }), this.sameScaleInMultipleAxes(s, a, n);
      }
    }, {
      key: "sameScaleInMultipleAxes",
      value: function value(t, e, i) {
        var s = this,
            a = this.w.config,
            n = this.w.globals,
            r = [];
        i.forEach(function (t) {
          t.alreadyExists && (void 0 === r[t.index] && (r[t.index] = []), r[t.index].push(t.index), r[t.index].push(t.similarIndex));
        }), r.forEach(function (t, e) {
          r.forEach(function (i, s) {
            var a, n;
            e !== s && (a = t, n = i, a.filter(function (t) {
              return -1 !== n.indexOf(t);
            })).length > 0 && (r[e] = r[e].concat(r[s]));
          });
        });
        var o = r.map(function (t) {
          return t.filter(function (e, i) {
            return t.indexOf(e) === i;
          });
        }).map(function (t) {
          return t.sort();
        });
        r = r.filter(function (t) {
          return !!t;
        });
        var l = o.slice(),
            h = l.map(function (t) {
          return JSON.stringify(t);
        });
        l = l.filter(function (t, e) {
          return h.indexOf(JSON.stringify(t)) === e;
        });
        var c = [],
            d = [];
        t.forEach(function (t, i) {
          l.forEach(function (s, a) {
            s.indexOf(i) > -1 && (void 0 === c[a] && (c[a] = [], d[a] = []), c[a].push({
              key: i,
              value: t
            }), d[a].push({
              key: i,
              value: e[i]
            }));
          });
        });
        var u = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, Number.MIN_VALUE),
            g = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
        c.forEach(function (t, e) {
          t.forEach(function (t, i) {
            u[e] = Math.min(t.value, u[e]);
          });
        }), d.forEach(function (t, e) {
          t.forEach(function (t, i) {
            g[e] = Math.max(t.value, g[e]);
          });
        }), t.forEach(function (t, e) {
          d.forEach(function (t, i) {
            var r = u[i],
                o = g[i];
            t.forEach(function (i, l) {
              t[l].key === e && (void 0 !== a.yaxis[e].min && (r = "function" == typeof a.yaxis[e].min ? a.yaxis[e].min(n.minY) : a.yaxis[e].min), void 0 !== a.yaxis[e].max && (o = "function" == typeof a.yaxis[e].max ? a.yaxis[e].max(n.maxY) : a.yaxis[e].max), s.setYScaleForIndex(e, r, o));
            });
          });
        });
      }
    }, {
      key: "autoScaleY",
      value: function value(t, e) {
        t || (t = this);
        var i = [];
        return t.w.config.series.forEach(function (t) {
          var s,
              a,
              n = t.data.find(function (t) {
            return t[0] >= e.xaxis.min;
          })[1];
          a = s = n, t.data.forEach(function (t) {
            t[0] <= e.xaxis.max && t[0] >= e.xaxis.min && (t[1] > a && null !== t[1] && (a = t[1]), t[1] < s && null !== t[1] && (s = t[1]));
          }), s *= .95, a *= 1.05, i.push({
            min: s,
            max: a
          });
        }), i;
      }
    }]), t;
  }(),
      V = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.scales = new B(i);
    }

    return s(t, [{
      key: "init",
      value: function value() {
        this.setYRange(), this.setXRange(), this.setZRange();
      }
    }, {
      key: "getMinYMaxY",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,
            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
            a = this.w.globals,
            n = -Number.MAX_VALUE,
            r = Number.MIN_VALUE;
        null === s && (s = t + 1);
        var o = a.series,
            l = o,
            h = o;
        "candlestick" === this.w.config.chart.type ? (l = a.seriesCandleL, h = a.seriesCandleH) : a.isRangeData && (l = a.seriesRangeStart, h = a.seriesRangeEnd);

        for (var c = t; c < s; c++) {
          a.dataPoints = Math.max(a.dataPoints, o[c].length);

          for (var u = 0; u < a.series[c].length; u++) {
            var g = o[c][u];
            null !== g && d.isNumber(g) ? (n = Math.max(n, h[c][u]), e = Math.min(e, l[c][u]), i = Math.max(i, l[c][u]), "candlestick" === this.w.config.chart.type && (n = Math.max(n, a.seriesCandleO[c][u]), n = Math.max(n, a.seriesCandleH[c][u]), n = Math.max(n, a.seriesCandleL[c][u]), i = n = Math.max(n, a.seriesCandleC[c][u])), d.isFloat(g) && (g = d.noExponents(g), a.yValueDecimal = Math.max(a.yValueDecimal, g.toString().split(".")[1].length)), r > l[c][u] && l[c][u] < 0 && (r = l[c][u])) : a.hasNullValues = !0;
          }
        }

        return {
          minY: r,
          maxY: n,
          lowestY: e,
          highestY: i
        };
      }
    }, {
      key: "setYRange",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config;
        t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;
        var i = Number.MAX_VALUE;
        if (t.isMultipleYAxis) for (var s = 0; s < t.series.length; s++) {
          var a = this.getMinYMaxY(s, i, null, s + 1);
          t.minYArr.push(a.minY), t.maxYArr.push(a.maxY), i = a.lowestY;
        }
        var n = this.getMinYMaxY(0, i, null, t.series.length);

        if (t.minY = n.minY, t.maxY = n.maxY, i = n.lowestY, e.chart.stacked) {
          for (var r = [], o = [], l = 0; l < t.series[t.maxValsInArrayIndex].length; l++) {
            for (var h = 0, c = 0, u = 0; u < t.series.length; u++) {
              null !== t.series[u][l] && d.isNumber(t.series[u][l]) && (t.series[u][l] > 0 ? h = h + parseFloat(t.series[u][l]) + 1e-4 : c += parseFloat(t.series[u][l])), u === t.series.length - 1 && (r.push(h), o.push(c));
            }
          }

          for (var g = 0; g < r.length; g++) {
            t.maxY = Math.max(t.maxY, r[g]), t.minY = Math.min(t.minY, o[g]);
          }
        }

        if (("line" === e.chart.type || "area" === e.chart.type || "candlestick" === e.chart.type) && t.minY === Number.MIN_VALUE && i !== -Number.MAX_VALUE && i !== t.maxY) {
          var f = t.maxY - i;
          i >= 0 && i <= 10 && (f = 0), t.minY = i - 5 * f / 100, t.maxY = t.maxY + 5 * f / 100;
        }

        return e.yaxis.map(function (e, i) {
          void 0 !== e.max && ("number" == typeof e.max ? t.maxYArr[i] = e.max : "function" == typeof e.max && (t.maxYArr[i] = e.max(t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && ("number" == typeof e.min ? t.minYArr[i] = e.min : "function" == typeof e.min && (t.minYArr[i] = e.min(t.minY)), t.minY = t.minYArr[i]);
        }), t.isBarHorizontal && (void 0 !== e.xaxis.min && "number" == typeof e.xaxis.min && (t.minY = e.xaxis.min), void 0 !== e.xaxis.max && "number" == typeof e.xaxis.max && (t.maxY = e.xaxis.max)), t.isMultipleYAxis ? (this.scales.setMultipleYScales(), t.minY = i, t.yAxisScale.forEach(function (e, i) {
          t.minYArr[i] = e.niceMin, t.maxYArr[i] = e.niceMax;
        })) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.yAxisScale[0].niceMin, t.maxYArr[0] = t.yAxisScale[0].niceMax), {
          minY: t.minY,
          maxY: t.maxY,
          minYArr: t.minYArr,
          maxYArr: t.maxYArr
        };
      }
    }, {
      key: "setXRange",
      value: function value() {
        var t,
            e = this.w.globals,
            i = this.w.config,
            s = "numeric" === i.xaxis.type || "datetime" === i.xaxis.type || "category" === i.xaxis.type && !e.noLabelsProvided || e.noLabelsProvided || e.isXNumeric;
        if (e.isXNumeric) for (var a = 0; a < e.series.length; a++) {
          if (e.labels[a]) for (var n = 0; n < e.labels[a].length; n++) {
            null !== e.labels[a][n] && d.isNumber(e.labels[a][n]) && (e.maxX = Math.max(e.maxX, e.labels[a][n]), e.initialmaxX = Math.max(e.maxX, e.labels[a][n]), e.minX = Math.min(e.minX, e.labels[a][n]), e.initialminX = Math.min(e.minX, e.labels[a][n]));
          }
        }

        if (e.noLabelsProvided && 0 === i.xaxis.categories.length && (e.maxX = e.labels[e.labels.length - 1], e.initialmaxX = e.labels[e.labels.length - 1], e.minX = 1, e.initialminX = 1), (e.comboChartsHasBars || "candlestick" === i.chart.type || "bar" === i.chart.type && e.isXNumeric) && ("category" !== i.xaxis.type || e.isXNumeric)) {
          var r = e.minX - e.svgWidth / e.dataPoints * (Math.abs(e.maxX - e.minX) / e.svgWidth) / 2;
          e.minX = r, e.initialminX = r;
          var o = e.maxX + e.svgWidth / e.dataPoints * (Math.abs(e.maxX - e.minX) / e.svgWidth) / 2;
          e.maxX = o, e.initialmaxX = o;
        }

        !e.isXNumeric && !e.noLabelsProvided || i.xaxis.convertedCatToNumeric && !e.dataFormatXNumeric || (void 0 === i.xaxis.tickAmount ? (t = Math.round(e.svgWidth / 150), "numeric" === i.xaxis.type && e.dataPoints < 20 && (t = e.dataPoints - 1), t > e.dataPoints && 0 !== e.dataPoints && (t = e.dataPoints - 1)) : t = "dataPoints" === i.xaxis.tickAmount ? e.series[e.maxValsInArrayIndex].length - 1 : i.xaxis.tickAmount, void 0 !== i.xaxis.max && "number" == typeof i.xaxis.max && (e.maxX = i.xaxis.max), void 0 !== i.xaxis.min && "number" == typeof i.xaxis.min && (e.minX = i.xaxis.min), void 0 !== i.xaxis.range && (e.minX = e.maxX - i.xaxis.range), e.minX !== Number.MAX_VALUE && e.maxX !== -Number.MAX_VALUE ? e.xAxisScale = this.scales.linearScale(e.minX, e.maxX, t) : (e.xAxisScale = this.scales.linearScale(1, t, t), e.noLabelsProvided && e.labels.length > 0 && (e.xAxisScale = this.scales.linearScale(1, e.labels.length, t - 1), e.seriesX = e.labels.slice())), s && (e.labels = e.xAxisScale.result.slice()));
        if (e.minX === e.maxX) if ("datetime" === i.xaxis.type) {
          var l = new Date(e.minX);
          l.setDate(l.getDate() - 2), e.minX = new Date(l).getTime();
          var h = new Date(e.maxX);
          h.setDate(h.getDate() + 2), e.maxX = new Date(h).getTime();
        } else ("numeric" === i.xaxis.type || "category" === i.xaxis.type && !e.noLabelsProvided) && (e.minX = e.minX - 2, e.maxX = e.maxX + 2);
        return e.isXNumeric && (e.seriesX.forEach(function (t, i) {
          t.forEach(function (t, s) {
            if (s > 0) {
              var a = t - e.seriesX[i][s - 1];
              e.minXDiff = Math.min(a, e.minXDiff);
            }
          });
        }), this.calcMinXDiffForTinySeries()), {
          minX: e.minX,
          maxX: e.maxX
        };
      }
    }, {
      key: "calcMinXDiffForTinySeries",
      value: function value() {
        var t = this.w,
            e = t.globals.labels.length;
        return 1 === t.globals.labels.length ? t.globals.minXDiff = (t.globals.maxX - t.globals.minX) / e / 3 : t.globals.minXDiff === Number.MAX_VALUE && (t.globals.timelineLabels.length > 0 && (e = t.globals.timelineLabels.length), e < 3 && (e = 3), t.globals.minXDiff = (t.globals.maxX - t.globals.minX) / e), t.globals.minXDiff;
      }
    }, {
      key: "setZRange",
      value: function value() {
        var t = this.w.globals;
        if (t.isDataXYZ) for (var e = 0; e < t.series.length; e++) {
          if (void 0 !== t.seriesZ[e]) for (var i = 0; i < t.seriesZ[e].length; i++) {
            null !== t.seriesZ[e][i] && d.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));
          }
        }
      }
    }]), t;
  }(),
      G = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "getAllSeriesEls",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
      }
    }, {
      key: "getSeriesByName",
      value: function value(t) {
        return this.w.globals.dom.baseEl.querySelector("[seriesName='".concat(d.escapeString(t), "']"));
      }
    }, {
      key: "addCollapsedClassToSeries",
      value: function value(t, e) {
        var i = this.w;

        function s(i) {
          for (var s = 0; s < i.length; s++) {
            i[s].index === e && t.node.classList.add("apexcharts-series-collapsed");
          }
        }

        s(i.globals.collapsedSeries), s(i.globals.ancillaryCollapsedSeries);
      }
    }, {
      key: "toggleSeriesOnHover",
      value: function value(t, e) {
        var i = this.w,
            s = i.globals.dom.baseEl.querySelectorAll(".apexcharts-series");

        if ("mousemove" === t.type) {
          var a = parseInt(e.getAttribute("rel")) - 1,
              n = null;
          n = i.globals.axisCharts || "radialBar" === i.config.chart.type ? i.globals.axisCharts ? i.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(a, "']")) : i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a + 1, "']")) : i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a + 1, "'] path"));

          for (var r = 0; r < s.length; r++) {
            s[r].classList.add("legend-mouseover-inactive");
          }

          null !== n && (i.globals.axisCharts || n.parentNode.classList.remove("legend-mouseover-inactive"), n.classList.remove("legend-mouseover-inactive"));
        } else if ("mouseout" === t.type) for (var o = 0; o < s.length; o++) {
          s[o].classList.remove("legend-mouseover-inactive");
        }
      }
    }, {
      key: "highlightRangeInSeries",
      value: function value(t, e) {
        var i = this.w,
            s = i.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap-rect"),
            a = function a() {
          for (var t = 0; t < s.length; t++) {
            s[t].classList.remove("legend-mouseover-inactive");
          }
        };

        if ("mousemove" === t.type) {
          var n = parseInt(e.getAttribute("rel")) - 1;
          a(), function () {
            for (var t = 0; t < s.length; t++) {
              s[t].classList.add("legend-mouseover-inactive");
            }
          }(), function (t) {
            for (var e = 0; e < s.length; e++) {
              var i = parseInt(s[e].getAttribute("val"));
              i >= t.from && i <= t.to && s[e].classList.remove("legend-mouseover-inactive");
            }
          }(i.config.plotOptions.heatmap.colorScale.ranges[n]);
        } else "mouseout" === t.type && a();
      }
    }, {
      key: "getActiveSeriesIndex",
      value: function value() {
        var t = this.w,
            e = 0;
        if (t.globals.series.length > 1) for (var i = t.globals.series.map(function (e, i) {
          return e.length > 0 && "bar" !== t.config.series[i].type && "column" !== t.config.series[i].type ? i : -1;
        }), s = 0; s < i.length; s++) {
          if (-1 !== i[s]) {
            e = i[s];
            break;
          }
        }
        return e;
      }
    }, {
      key: "getActiveConfigSeriesIndex",
      value: function value() {
        var t = this.w,
            e = 0;
        if (t.config.series.length > 1) for (var i = t.config.series.map(function (t, e) {
          return t.data && t.data.length > 0 ? e : -1;
        }), s = 0; s < i.length; s++) {
          if (-1 !== i[s]) {
            e = i[s];
            break;
          }
        }
        return e;
      }
    }, {
      key: "getPreviousPaths",
      value: function value() {
        var t = this.w;

        function e(e, i, s) {
          for (var a = e[i].childNodes, n = {
            type: s,
            paths: [],
            realIndex: e[i].getAttribute("data:realIndex")
          }, r = 0; r < a.length; r++) {
            if (a[r].hasAttribute("pathTo")) {
              var o = a[r].getAttribute("pathTo");
              n.paths.push({
                d: o
              });
            }
          }

          t.globals.previousPaths.push(n);
        }

        t.globals.previousPaths = [];
        var i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-series");
        if (i.length > 0) for (var s = i.length - 1; s >= 0; s--) {
          e(i, s, "line");
        }
        var a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-area-series .apexcharts-series");
        if (a.length > 0) for (var n = a.length - 1; n >= 0; n--) {
          e(a, n, "area");
        }
        var r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series .apexcharts-series");
        if (r.length > 0) for (var o = 0; o < r.length; o++) {
          e(r, o, "bar");
        }
        var l = t.globals.dom.baseEl.querySelectorAll(".apexcharts-candlestick-series .apexcharts-series");
        if (l.length > 0) for (var h = 0; h < l.length; h++) {
          e(l, h, "candlestick");
        }
        var c = t.globals.dom.baseEl.querySelectorAll(".apexcharts-radar-series .apexcharts-series");
        if (c.length > 0) for (var d = 0; d < c.length; d++) {
          e(c, d, "radar");
        }
        var u = t.globals.dom.baseEl.querySelectorAll(".apexcharts-bubble-series .apexcharts-series");
        if (u.length > 0) for (var g = 0; g < u.length; g++) {
          for (var f = t.globals.dom.baseEl.querySelectorAll(".apexcharts-bubble-series .apexcharts-series[data\\:realIndex='".concat(g, "'] circle")), p = [], x = 0; x < f.length; x++) {
            p.push({
              x: f[x].getAttribute("cx"),
              y: f[x].getAttribute("cy"),
              r: f[x].getAttribute("r")
            });
          }

          t.globals.previousPaths.push(p);
        }
        var b = t.globals.dom.baseEl.querySelectorAll(".apexcharts-scatter-series .apexcharts-series");
        if (b.length > 0) for (var m = 0; m < b.length; m++) {
          for (var v = t.globals.dom.baseEl.querySelectorAll(".apexcharts-scatter-series .apexcharts-series[data\\:realIndex='".concat(m, "'] circle")), y = [], w = 0; w < v.length; w++) {
            y.push({
              x: v[w].getAttribute("cx"),
              y: v[w].getAttribute("cy"),
              r: v[w].getAttribute("r")
            });
          }

          t.globals.previousPaths.push(y);
        }
        var k = t.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap .apexcharts-series");
        if (k.length > 0) for (var A = 0; A < k.length; A++) {
          for (var S = t.globals.dom.baseEl.querySelectorAll(".apexcharts-heatmap .apexcharts-series[data\\:realIndex='".concat(A, "'] rect")), C = [], L = 0; L < S.length; L++) {
            C.push({
              color: S[L].getAttribute("color")
            });
          }

          t.globals.previousPaths.push(C);
        }
        t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);
      }
    }, {
      key: "handleNoData",
      value: function value() {
        var t = this.w,
            e = t.config.noData,
            i = new f(this.ctx),
            s = t.globals.svgWidth / 2,
            a = t.globals.svgHeight / 2,
            n = "middle";

        if (t.globals.noData = !0, t.globals.animationEnded = !0, "left" === e.align ? (s = 10, n = "start") : "right" === e.align && (s = t.globals.svgWidth - 10, n = "end"), "top" === e.verticalAlign ? a = 50 : "bottom" === e.verticalAlign && (a = t.globals.svgHeight - 50), s += e.offsetX, a = a + parseInt(e.style.fontSize) + 2, void 0 !== e.text && "" !== e.text) {
          var r = i.drawText({
            x: s,
            y: a,
            text: e.text,
            textAnchor: n,
            fontSize: e.style.fontSize,
            fontFamily: e.style.fontFamily,
            foreColor: e.style.color,
            opacity: 1,
            "class": "apexcharts-text-nodata"
          });
          r.node.setAttribute("class", "apexcharts-title-text"), t.globals.dom.Paper.add(r);
        }
      }
    }, {
      key: "setNullSeriesToZeroValues",
      value: function value(t) {
        for (var e = this.w, i = 0; i < t.length; i++) {
          if (0 === t[i].length) for (var s = 0; s < t[e.globals.maxValsInArrayIndex].length; s++) {
            t[i].push(0);
          }
        }

        return t;
      }
    }, {
      key: "hasAllSeriesEqualX",
      value: function value() {
        for (var t = !0, e = this.w, i = this.filteredSeriesX(), s = 0; s < i.length - 1; s++) {
          if (i[s][0] !== i[s + 1][0]) {
            t = !1;
            break;
          }
        }

        return e.globals.allSeriesHasEqualX = t, t;
      }
    }, {
      key: "filteredSeriesX",
      value: function value() {
        var t = this.w.globals.seriesX.map(function (t, e) {
          return t.length > 0 ? t : [];
        });
        return t;
      }
    }]), t;
  }(),
      _ = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.lgRect = {}, this.yAxisWidth = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.xPadRight = 0, this.xPadLeft = 0;
    }

    return s(t, [{
      key: "plotCoords",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = this.getLegendsRect();
        e.axisCharts ? this.setGridCoordsForAxisCharts(i) : this.setGridCoordsForNonAxisCharts(i), this.titleSubtitleOffset(), e.gridHeight = e.gridHeight - t.config.grid.padding.top - t.config.grid.padding.bottom, e.gridWidth = e.gridWidth - t.config.grid.padding.left - t.config.grid.padding.right - this.xPadRight - this.xPadLeft, e.translateX = e.translateX + t.config.grid.padding.left + this.xPadLeft, e.translateY = e.translateY + t.config.grid.padding.top;
      }
    }, {
      key: "conditionalChecksForAxisCoords",
      value: function value(t, e) {
        var i = this.w;
        this.xAxisHeight = (t.height + e.height) * i.globals.LINE_HEIGHT_RATIO + 15, this.xAxisWidth = t.width, this.xAxisHeight - e.height > i.config.xaxis.labels.maxHeight && (this.xAxisHeight = i.config.xaxis.labels.maxHeight), i.config.xaxis.labels.minHeight && this.xAxisHeight < i.config.xaxis.labels.minHeight && (this.xAxisHeight = i.config.xaxis.labels.minHeight), i.config.xaxis.floating && (this.xAxisHeight = 0), i.globals.isBarHorizontal ? this.yAxisWidth = i.globals.yLabelsCoords[0].width + i.globals.yTitleCoords[0].width + 15 : this.yAxisWidth = this.getTotalYAxisWidth();
        var s = 0,
            a = 0;
        i.config.yaxis.forEach(function (t) {
          s += t.labels.minWidth, a += t.labels.maxWidth;
        }), this.yAxisWidth < s && (this.yAxisWidth = s), this.yAxisWidth > a && (this.yAxisWidth = a);
      }
    }, {
      key: "setGridCoordsForAxisCharts",
      value: function value(t) {
        var e = this.w,
            i = e.globals,
            s = this.getyAxisLabelsCoords(),
            a = this.getxAxisLabelsCoords(),
            n = this.getyAxisTitleCoords(),
            r = this.getxAxisTitleCoords();
        e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function (t, i) {
          e.globals.yLabelsCoords.push({
            width: s[i].width,
            index: i
          }), e.globals.yTitleCoords.push({
            width: n[i].width,
            index: i
          });
        }), this.conditionalChecksForAxisCoords(a, r), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;
        var o = this.yAxisWidth,
            l = this.xAxisHeight;
        i.xAxisLabelsHeight = this.xAxisHeight, i.xAxisHeight = this.xAxisHeight;
        var h = 10;

        switch (e.config.grid.show && "radar" !== e.config.chart.type || (o = 0, l = 35), this.isSparkline && (t = {
          height: 0,
          width: 0
        }, l = 0, o = 0, h = 0), this.additionalPaddingXLabels(a), e.config.legend.position) {
          case "bottom":
            i.translateY = h, i.translateX = o, i.gridHeight = i.svgHeight - t.height - l - (this.isSparkline ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - o;
            break;

          case "top":
            i.translateY = t.height + h, i.translateX = o, i.gridHeight = i.svgHeight - t.height - l - (this.isSparkline ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - o;
            break;

          case "left":
            i.translateY = h, i.translateX = t.width + o, i.gridHeight = i.svgHeight - l - 12, i.gridWidth = i.svgWidth - t.width - o;
            break;

          case "right":
            i.translateY = h, i.translateX = o, i.gridHeight = i.svgHeight - l - 12, i.gridWidth = i.svgWidth - t.width - o - 5;
            break;

          default:
            throw new Error("Legend position not supported");
        }

        this.setGridXPosForDualYAxis(n, s), new W(this.ctx).setYAxisXPosition(s, n);
      }
    }, {
      key: "setGridCoordsForNonAxisCharts",
      value: function value(t) {
        var e = this.w,
            i = e.globals,
            s = 0;
        e.config.legend.show && !e.config.legend.floating && (s = 20);
        var a = 10,
            n = 0;
        if ("pie" === e.config.chart.type || "donut" === e.config.chart.type ? (a += e.config.plotOptions.pie.offsetY, n += e.config.plotOptions.pie.offsetX) : "radialBar" === e.config.chart.type && (a += e.config.plotOptions.radialBar.offsetY, n += e.config.plotOptions.radialBar.offsetX), !e.config.legend.show) return i.gridHeight = i.svgHeight - 35, i.gridWidth = i.gridHeight, i.translateY = a - 10, void (i.translateX = n + (i.svgWidth - i.gridWidth) / 2);

        switch (e.config.legend.position) {
          case "bottom":
            i.gridHeight = i.svgHeight - t.height - 35, i.gridWidth = i.gridHeight, i.translateY = a - 20, i.translateX = n + (i.svgWidth - i.gridWidth) / 2;
            break;

          case "top":
            i.gridHeight = i.svgHeight - t.height - 35, i.gridWidth = i.gridHeight, i.translateY = t.height + a, i.translateX = n + (i.svgWidth - i.gridWidth) / 2;
            break;

          case "left":
            i.gridWidth = i.svgWidth - t.width - s, i.gridHeight = i.gridWidth, i.translateY = a, i.translateX = n + t.width + s;
            break;

          case "right":
            i.gridWidth = i.svgWidth - t.width - s - 5, i.gridHeight = i.gridWidth, i.translateY = a, i.translateX = n + 10;
            break;

          default:
            throw new Error("Legend position not supported");
        }
      }
    }, {
      key: "setGridXPosForDualYAxis",
      value: function value(t, e) {
        var i = this.w;
        i.config.yaxis.map(function (s, a) {
          -1 === i.globals.ignoreYAxisIndexes.indexOf(a) && !i.config.yaxis[a].floating && i.config.yaxis[a].show && s.opposite && (i.globals.translateX = i.globals.translateX - (e[a].width + t[a].width) - parseInt(i.config.yaxis[a].labels.style.fontSize) / 1.2 - 12);
        });
      }
    }, {
      key: "additionalPaddingXLabels",
      value: function value(t) {
        var e = this,
            i = this.w;

        if ("category" === i.config.xaxis.type && i.globals.isBarHorizontal || "numeric" === i.config.xaxis.type || "datetime" === i.config.xaxis.type) {
          var s = i.globals.isXNumeric;
          i.config.yaxis.forEach(function (a, n) {
            var r;
            (!a.show || a.floating || -1 !== i.globals.collapsedSeriesIndices.indexOf(n) || s || a.opposite && i.globals.isBarHorizontal) && ((s && i.globals.isMultipleYAxis && -1 !== i.globals.collapsedSeriesIndices.indexOf(n) || i.globals.isBarHorizontal && a.opposite) && (r = t, i.config.grid.padding.left < r.width && (e.xPadLeft = r.width / 2 + 1)), (!i.globals.isBarHorizontal && a.opposite && -1 !== i.globals.collapsedSeriesIndices.indexOf(n) || s && !i.globals.isMultipleYAxis) && function (t) {
              e.timescaleLabels ? e.timescaleLabels[e.timescaleLabels.length - 1].position + t.width > i.globals.gridWidth ? i.globals.skipLastTimelinelabel = !0 : i.globals.skipLastTimelinelabel = !1 : "datetime" !== i.config.xaxis.type && i.config.grid.padding.right < t.width && (e.xPadRight = t.width / 2 + 1);
            }(t));
          });
        }
      }
    }, {
      key: "titleSubtitleOffset",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = this.isSparkline || !t.globals.axisCharts ? 0 : 10;
        void 0 !== t.config.title.text ? i += t.config.title.margin : i += this.isSparkline || !t.globals.axisCharts ? 0 : 5, void 0 !== t.config.subtitle.text ? i += t.config.subtitle.margin : i += this.isSparkline || !t.globals.axisCharts ? 0 : 5, t.config.legend.show && "bottom" === t.config.legend.position && !t.config.legend.floating && t.config.series.length > 1 && (i += 10);
        var s = this.getTitleSubtitleCoords("title"),
            a = this.getTitleSubtitleCoords("subtitle");
        e.gridHeight = e.gridHeight - s.height - a.height - i, e.translateY = e.translateY + s.height + a.height + i;
      }
    }, {
      key: "getTotalYAxisWidth",
      value: function value() {
        var t = this.w,
            e = 0,
            i = 10,
            s = function s(e) {
          return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;
        };

        return t.globals.yLabelsCoords.map(function (a, n) {
          var r = t.config.yaxis[n].floating;
          a.width > 0 && !r ? (e = e + a.width + i, s(n) && (e = e - a.width - i)) : e += r || !t.config.yaxis[n].show ? 0 : 5;
        }), t.globals.yTitleCoords.map(function (a, n) {
          var r = t.config.yaxis[n].floating;
          i = parseInt(t.config.yaxis[n].title.style.fontSize), a.width > 0 && !r ? (e = e + a.width + i, s(n) && (e = e - a.width - i)) : e += r || !t.config.yaxis[n].show ? 0 : 5;
        }), e;
      }
    }, {
      key: "getxAxisTimeScaleLabelsCoords",
      value: function value() {
        var t,
            e = this.w;
        this.timescaleLabels = e.globals.timelineLabels.slice(), e.globals.isBarHorizontal && "datetime" === e.config.xaxis.type && (this.timescaleLabels = e.globals.invertedTimelineLabels.slice());
        var i = this.timescaleLabels.map(function (t) {
          return t.value;
        }),
            s = i.reduce(function (t, e) {
          return void 0 === t ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t.length > e.length ? t : e;
        }, 0);
        return 1.05 * (t = new f(this.ctx).getTextRects(s, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;
      }
    }, {
      key: "getxAxisLabelsCoords",
      value: function value() {
        var t,
            e = this.w,
            i = e.globals.labels.slice();

        if (e.globals.timelineLabels.length > 0) {
          var s = this.getxAxisTimeScaleLabelsCoords();
          t = {
            width: s.width,
            height: s.height
          };
        } else {
          var a = "left" !== e.config.legend.position || "right" !== e.config.legend.position || e.config.legend.floating ? 0 : this.lgRect.width,
              n = e.globals.xLabelFormatter,
              r = i.reduce(function (t, e) {
            return t.length > e.length ? t : e;
          }, 0);
          e.globals.isBarHorizontal && (r = e.globals.yAxisScale[0].result.reduce(function (t, e) {
            return t.length > e.length ? t : e;
          }, 0)), r = new N(this.ctx).xLabelFormat(n, r);
          var o = new f(this.ctx),
              l = o.getTextRects(r, e.config.xaxis.labels.style.fontSize);
          (t = {
            width: l.width,
            height: l.height
          }).width * i.length > e.globals.svgWidth - a - this.yAxisWidth && 0 !== e.config.xaxis.labels.rotate ? e.globals.isBarHorizontal || (e.globals.rotateXLabels = !0, l = o.getTextRects(r, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, "rotate(".concat(e.config.xaxis.labels.rotate, " 0 0)"), !1), t.height = l.height / 1.66) : e.globals.rotateXLabels = !1;
        }

        return e.config.xaxis.labels.show || (t = {
          width: 0,
          height: 0
        }), {
          width: t.width,
          height: t.height
        };
      }
    }, {
      key: "getyAxisLabelsCoords",
      value: function value() {
        var t = this,
            e = this.w,
            i = [],
            s = 10;
        return e.config.yaxis.map(function (a, n) {
          if (a.show && a.labels.show && e.globals.yAxisScale[n].result.length) {
            var r = e.globals.yLabelFormatters[n],
                o = r(e.globals.yAxisScale[n].niceMax, -1);
            if (void 0 !== o && 0 !== o.length || (o = e.globals.yAxisScale[n].niceMax), e.globals.isBarHorizontal) s = 0, o = r(o = e.globals.labels.slice().reduce(function (t, e) {
              return t.length > e.length ? t : e;
            }, 0), -1);
            var l = new f(t.ctx).getTextRects(o, a.labels.style.fontSize);
            i.push({
              width: l.width + s,
              height: l.height
            });
          } else i.push({
            width: 0,
            height: 0
          });
        }), i;
      }
    }, {
      key: "getxAxisTitleCoords",
      value: function value() {
        var t = this.w,
            e = 0,
            i = 0;

        if (void 0 !== t.config.xaxis.title.text) {
          var s = new f(this.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);
          e = s.width, i = s.height;
        }

        return {
          width: e,
          height: i
        };
      }
    }, {
      key: "getyAxisTitleCoords",
      value: function value() {
        var t = this,
            e = this.w,
            i = [];
        return e.config.yaxis.map(function (e, s) {
          if (e.show && void 0 !== e.title.text) {
            var a = new f(t.ctx).getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, "rotate(-90 0 0)", !1);
            i.push({
              width: a.width,
              height: a.height
            });
          } else i.push({
            width: 0,
            height: 0
          });
        }), i;
      }
    }, {
      key: "getTitleSubtitleCoords",
      value: function value(t) {
        var e = this.w,
            i = 0,
            s = 0,
            a = "title" === t ? e.config.title.floating : e.config.subtitle.floating,
            n = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(t, "-text"));

        if (null !== n && !a) {
          var r = n.getBoundingClientRect();
          i = r.width, s = e.globals.axisCharts ? r.height + 5 : r.height;
        }

        return {
          width: i,
          height: s
        };
      }
    }, {
      key: "getLegendsRect",
      value: function value() {
        var t = this.w,
            e = t.globals.dom.baseEl.querySelector(".apexcharts-legend"),
            i = Object.assign({}, d.getBoundingClientRect(e));
        return null !== e && !t.config.legend.floating && t.config.legend.show ? this.lgRect = {
          x: i.x,
          y: i.y,
          height: i.height,
          width: 0 === i.height ? 0 : i.width
        } : this.lgRect = {
          x: 0,
          y: 0,
          height: 0,
          width: 0
        }, this.lgRect;
      }
    }]), t;
  }(),
      j = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.timeScaleArray = [];
    }

    return s(t, [{
      key: "calculateTimeScaleTicks",
      value: function value(t, e) {
        var i = this,
            s = this.w;
        if (s.globals.allSeriesCollapsed) return s.globals.labels = [], s.globals.timelineLabels = [], [];
        var a = new m(this.ctx),
            r = (e - t) / 864e5;
        this.determineInterval(r), s.globals.disableZoomIn = !1, s.globals.disableZoomOut = !1, r < .005 ? s.globals.disableZoomIn = !0 : r > 5e4 && (s.globals.disableZoomOut = !0);
        var o = a.getTimeUnitsfromTimestamp(t, e),
            l = s.globals.gridWidth / r,
            h = l / 24,
            c = h / 60,
            d = Math.floor(24 * r),
            u = Math.floor(24 * r * 60),
            g = Math.floor(r),
            f = Math.floor(r / 30),
            p = Math.floor(r / 365),
            x = {
          minMinute: o.minMinute,
          minHour: o.minHour,
          minDate: o.minDate,
          minMonth: o.minMonth,
          minYear: o.minYear
        },
            b = {
          firstVal: x,
          currentMinute: x.minMinute,
          currentHour: x.minHour,
          currentMonthDate: x.minDate,
          currentDate: x.minDate,
          currentMonth: x.minMonth,
          currentYear: x.minYear,
          daysWidthOnXAxis: l,
          hoursWidthOnXAxis: h,
          minutesWidthOnXAxis: c,
          numberOfMinutes: u,
          numberOfHours: d,
          numberOfDays: g,
          numberOfMonths: f,
          numberOfYears: p
        };

        switch (this.tickInterval) {
          case "years":
            this.generateYearScale(b);
            break;

          case "months":
          case "half_year":
            this.generateMonthScale(b);
            break;

          case "months_days":
          case "months_fortnight":
          case "days":
          case "week_days":
            this.generateDayScale(b);
            break;

          case "hours":
            this.generateHourScale(b);
            break;

          case "minutes":
            this.generateMinuteScale(b);
        }

        var v = this.timeScaleArray.map(function (t) {
          var e = {
            position: t.position,
            unit: t.unit,
            year: t.year,
            day: t.day ? t.day : 1,
            hour: t.hour ? t.hour : 0,
            month: t.month + 1
          };
          return "month" === t.unit ? n({}, e, {
            value: t.value + 1
          }) : "day" === t.unit || "hour" === t.unit ? n({}, e, {
            value: t.value
          }) : "minute" === t.unit ? n({}, e, {
            value: t.value,
            minute: t.value
          }) : t;
        });
        return v.filter(function (t) {
          var e = 1,
              a = Math.ceil(s.globals.gridWidth / 120),
              n = t.value;
          void 0 !== s.config.xaxis.tickAmount && (a = s.config.xaxis.tickAmount), v.length > a && (e = Math.floor(v.length / a));
          var r = !1,
              o = !1;

          switch (i.tickInterval) {
            case "half_year":
              e = 7, "year" === t.unit && (r = !0);
              break;

            case "months":
              e = 1, "year" === t.unit && (r = !0);
              break;

            case "months_fortnight":
              e = 15, "year" !== t.unit && "month" !== t.unit || (r = !0), 30 === n && (o = !0);
              break;

            case "months_days":
              e = 10, "month" === t.unit && (r = !0), 30 === n && (o = !0);
              break;

            case "week_days":
              e = 8, "month" === t.unit && (r = !0);
              break;

            case "days":
              e = 1, "month" === t.unit && (r = !0);
              break;

            case "hours":
              "day" === t.unit && (r = !0);
              break;

            case "minutes":
              n % 5 != 0 && (o = !0);
          }

          if ("minutes" === i.tickInterval || "hours" === i.tickInterval) {
            if (!o) return !0;
          } else if ((n % e == 0 || r) && !o) return !0;
        });
      }
    }, {
      key: "recalcDimensionsBasedOnFormat",
      value: function value(t, e) {
        var i = this.w,
            s = this.formatDates(t),
            a = this.removeOverlappingTS(s);
        e ? i.globals.invertedTimelineLabels = a.slice() : i.globals.timelineLabels = a.slice(), new _(this.ctx).plotCoords();
      }
    }, {
      key: "determineInterval",
      value: function value(t) {
        switch (!0) {
          case t > 1825:
            this.tickInterval = "years";
            break;

          case t > 800 && t <= 1825:
            this.tickInterval = "half_year";
            break;

          case t > 180 && t <= 800:
            this.tickInterval = "months";
            break;

          case t > 90 && t <= 180:
            this.tickInterval = "months_fortnight";
            break;

          case t > 60 && t <= 90:
            this.tickInterval = "months_days";
            break;

          case t > 30 && t <= 60:
            this.tickInterval = "week_days";
            break;

          case t > 2 && t <= 30:
            this.tickInterval = "days";
            break;

          case t > .1 && t <= 2:
            this.tickInterval = "hours";
            break;

          case t < .1:
            this.tickInterval = "minutes";
            break;

          default:
            this.tickInterval = "days";
        }
      }
    }, {
      key: "generateYearScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMonth,
            s = t.currentYear,
            a = t.daysWidthOnXAxis,
            n = t.numberOfYears,
            r = e.minYear,
            o = 0,
            l = new m(this.ctx);

        if (e.minDate > 1 && e.minMonth > 0) {
          var h = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);
          o = (l.determineDaysOfYear(e.minYear) - h + 1) * a, r = e.minYear + 1, this.timeScaleArray.push({
            position: o,
            value: r,
            unit: "year",
            year: r,
            month: d.monthMod(i + 1)
          });
        } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({
          position: o,
          value: r,
          unit: "year",
          year: s,
          month: d.monthMod(i + 1)
        });

        for (var c = r, u = o, g = 0; g < n; g++) {
          c++, u = l.determineDaysOfYear(c - 1) * a + u, this.timeScaleArray.push({
            position: u,
            value: c,
            unit: "year",
            year: c,
            month: 1
          });
        }
      }
    }, {
      key: "generateMonthScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMonthDate,
            s = t.currentMonth,
            a = t.currentYear,
            n = t.daysWidthOnXAxis,
            r = t.numberOfMonths,
            o = s,
            l = 0,
            h = new m(this.ctx),
            c = "month",
            u = 0;

        if (e.minDate > 1) {
          l = (h.determineDaysOfMonths(s + 1, e.minYear) - i + 1) * n, o = d.monthMod(s + 1);
          var g = a + u,
              f = d.monthMod(o),
              p = o;
          0 === o && (c = "year", p = g, f = 1, g += u += 1), this.timeScaleArray.push({
            position: l,
            value: p,
            unit: c,
            year: g,
            month: f
          });
        } else this.timeScaleArray.push({
          position: l,
          value: o,
          unit: c,
          year: a,
          month: d.monthMod(s)
        });

        for (var x = o + 1, b = l, v = 0, y = 1; v < r; v++, y++) {
          0 === (x = d.monthMod(x)) ? (c = "year", u += 1) : c = "month";
          var w = a + Math.floor(x / 12) + u;
          b = h.determineDaysOfMonths(x, w) * n + b;
          var k = 0 === x ? w : x;
          this.timeScaleArray.push({
            position: b,
            value: k,
            unit: c,
            year: w,
            month: 0 === x ? 1 : x
          }), x++;
        }
      }
    }, {
      key: "generateDayScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMonth,
            s = t.currentYear,
            a = t.hoursWidthOnXAxis,
            n = t.numberOfDays,
            r = new m(this.ctx),
            o = "day",
            l = (24 - e.minHour) * a,
            h = e.minDate + 1,
            c = h,
            u = function u(t, e, i) {
          return t > r.determineDaysOfMonths(e + 1, i) ? (g = 1, o = "month", c = e += 1, e) : e;
        },
            g = h,
            f = u(g, i, s);

        this.timeScaleArray.push({
          position: l,
          value: c,
          unit: o,
          year: s,
          month: d.monthMod(f),
          day: g
        });

        for (var p = l, x = 0; x < n; x++) {
          o = "day", f = u(g += 1, f, s + Math.floor(f / 12) + 0);
          var b = s + Math.floor(f / 12) + 0;
          p = 24 * a + p;
          var v = 1 === g ? d.monthMod(f) : g;
          this.timeScaleArray.push({
            position: p,
            value: v,
            unit: o,
            year: b,
            month: d.monthMod(f),
            day: v
          });
        }
      }
    }, {
      key: "generateHourScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentDate,
            s = t.currentMonth,
            a = t.currentYear,
            n = t.minutesWidthOnXAxis,
            r = t.numberOfHours,
            o = new m(this.ctx),
            l = "hour",
            h = function h(t, e) {
          return t > o.determineDaysOfMonths(e + 1, a) && (x = 1, e += 1), {
            month: e,
            date: x
          };
        },
            c = function c(t, e) {
          return t > o.determineDaysOfMonths(e + 1, a) ? e += 1 : e;
        },
            u = 60 - e.minMinute,
            g = u * n,
            f = e.minHour + 1,
            p = f + 1;

        60 === u && (g = 0, p = (f = e.minHour) + 1);
        var x = i,
            b = c(x, s);
        this.timeScaleArray.push({
          position: g,
          value: f,
          unit: l,
          day: x,
          hour: p,
          year: a,
          month: d.monthMod(b)
        });

        for (var v = g, y = 0; y < r; y++) {
          if (l = "hour", p >= 24) p = 0, l = "day", b = h(x += 1, b).month, b = c(x, b);
          var w = a + Math.floor(b / 12) + 0;
          v = 0 === p && 0 === y ? u * n : 60 * n + v;
          var k = 0 === p ? x : p;
          this.timeScaleArray.push({
            position: v,
            value: k,
            unit: l,
            hour: p,
            day: x,
            year: w,
            month: d.monthMod(b)
          }), p++;
        }
      }
    }, {
      key: "generateMinuteScale",
      value: function value(t) {
        var e = t.firstVal,
            i = t.currentMinute,
            s = t.currentHour,
            a = t.currentDate,
            n = t.currentMonth,
            r = t.currentYear,
            o = t.minutesWidthOnXAxis,
            l = t.numberOfMinutes,
            h = o - (i - e.minMinute),
            c = e.minMinute + 1,
            u = c + 1,
            g = a,
            f = n,
            p = r,
            x = s;
        this.timeScaleArray.push({
          position: h,
          value: c,
          unit: "minute",
          day: g,
          hour: x,
          minute: u,
          year: p,
          month: d.monthMod(f)
        });

        for (var b = h, m = 0; m < l; m++) {
          u >= 60 && (u = 0, 24 === (x += 1) && (x = 0));
          var v = r + Math.floor(f / 12) + 0;
          b = o + b;
          var y = u;
          this.timeScaleArray.push({
            position: b,
            value: y,
            unit: "minute",
            hour: x,
            minute: u,
            day: g,
            year: v,
            month: d.monthMod(f)
          }), u++;
        }
      }
    }, {
      key: "createRawDateString",
      value: function value(t, e) {
        var i = t.year;
        return i += "-" + ("0" + t.month.toString()).slice(-2), "day" === t.unit ? i += "day" === t.unit ? "-" + ("0" + e).slice(-2) : "-01" : i += "-" + ("0" + (t.day ? t.day : "1")).slice(-2), "hour" === t.unit ? i += "hour" === t.unit ? "T" + ("0" + e).slice(-2) : "T00" : i += "T" + ("0" + (t.hour ? t.hour : "0")).slice(-2), i += "minute" === t.unit ? ":" + ("0" + e).slice(-2) + ":00.000Z" : ":00:00.000Z";
      }
    }, {
      key: "formatDates",
      value: function value(t) {
        var e = this,
            i = this.w;
        return t.map(function (t) {
          var s = t.value.toString(),
              a = new m(e.ctx),
              n = e.createRawDateString(t, s),
              r = new Date(Date.parse(n));

          if (void 0 === i.config.xaxis.labels.format) {
            var o = "dd MMM",
                l = i.config.xaxis.labels.datetimeFormatter;
            "year" === t.unit && (o = l.year), "month" === t.unit && (o = l.month), "day" === t.unit && (o = l.day), "hour" === t.unit && (o = l.hour), "minute" === t.unit && (o = l.minute), s = a.formatDate(r, o, !0, !1);
          } else s = a.formatDate(r, i.config.xaxis.labels.format);

          return {
            dateString: n,
            position: t.position,
            value: s,
            unit: t.unit,
            year: t.year,
            month: t.month
          };
        });
      }
    }, {
      key: "removeOverlappingTS",
      value: function value(t) {
        var e = this,
            i = new f(this.ctx),
            s = 0,
            a = t.map(function (a, n) {
          if (n > 0 && e.w.config.xaxis.labels.hideOverlappingLabels) {
            var r = i.getTextRects(t[s].value).width,
                o = t[s].position;
            return a.position > o + r + 10 ? (s = n, a) : null;
          }

          return a;
        });
        return a = a.filter(function (t) {
          return null !== t;
        });
      }
    }]), t;
  }(),
      U = function () {
    function t(i, s) {
      e(this, t), this.ctx = s, this.w = s.w, this.el = i, this.coreUtils = new y(this.ctx), this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [];
    }

    return s(t, [{
      key: "setupElements",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config,
            i = e.chart.type;
        t.axisCharts = ["line", "area", "bar", "rangeBar", "candlestick", "radar", "scatter", "bubble", "heatmap"].indexOf(i) > -1, t.xyCharts = ["line", "area", "bar", "rangeBar", "candlestick", "scatter", "bubble"].indexOf(i) > -1, t.isBarHorizontal = ("bar" === e.chart.type || "rangeBar" === e.chart.type) && e.plotOptions.bar.horizontal, t.chartClass = ".apexcharts" + t.cuid, t.dom.baseEl = this.el, t.dom.elWrap = document.createElement("div"), f.setAttrs(t.dom.elWrap, {
          id: t.chartClass.substring(1),
          "class": "apexcharts-canvas " + t.chartClass.substring(1)
        }), this.el.appendChild(t.dom.elWrap), t.dom.Paper = new window.SVG.Doc(t.dom.elWrap), t.dom.Paper.attr({
          "class": "apexcharts-svg",
          "xmlns:data": "ApexChartsNS",
          transform: "translate(".concat(e.chart.offsetX, ", ").concat(e.chart.offsetY, ")")
        }), t.dom.Paper.node.style.background = e.chart.background, this.setSVGDimensions(), t.dom.elGraphical = t.dom.Paper.group().attr({
          "class": "apexcharts-inner apexcharts-graphical"
        }), t.dom.elDefs = t.dom.Paper.defs(), t.dom.elLegendWrap = document.createElement("div"), t.dom.elLegendWrap.classList.add("apexcharts-legend"), t.dom.elWrap.appendChild(t.dom.elLegendWrap), t.dom.Paper.add(t.dom.elGraphical), t.dom.elGraphical.add(t.dom.elDefs);
      }
    }, {
      key: "plotChartType",
      value: function value(t, e) {
        var i = this.w,
            s = i.config,
            a = i.globals,
            n = {
          series: [],
          i: []
        },
            r = {
          series: [],
          i: []
        },
            o = {
          series: [],
          i: []
        },
            l = {
          series: [],
          i: []
        },
            h = {
          series: [],
          i: []
        };
        a.series.map(function (e, s) {
          void 0 !== t[s].type ? ("column" === t[s].type || "bar" === t[s].type ? (i.config.plotOptions.bar.horizontal = !1, l.series.push(e), l.i.push(s)) : "area" === t[s].type ? (r.series.push(e), r.i.push(s)) : "line" === t[s].type ? (n.series.push(e), n.i.push(s)) : "scatter" === t[s].type ? (o.series.push(e), o.i.push(s)) : "bubble" === t[s].type || ("candlestick" === t[s].type ? (h.series.push(e), h.i.push(s)) : console.warn("You have specified an unrecognized chart type. Available types for this propery are line/area/column/bar/scatter/bubble")), a.comboCharts = !0) : (n.series.push(e), n.i.push(s));
        });
        var c = new D(this.ctx, e),
            d = new E(this.ctx, e),
            u = new I(this.ctx),
            g = new F(this.ctx),
            f = new R(this.ctx, e),
            p = new Y(this.ctx),
            x = [];

        if (a.comboCharts) {
          if (r.series.length > 0 && x.push(c.draw(r.series, "area", r.i)), l.series.length > 0) if (i.config.chart.stacked) {
            var b = new M(this.ctx, e);
            x.push(b.draw(l.series, l.i));
          } else {
            var m = new P(this.ctx, e);
            x.push(m.draw(l.series, l.i));
          }

          if (n.series.length > 0 && x.push(c.draw(n.series, "line", n.i)), h.series.length > 0 && x.push(d.draw(h.series, h.i)), o.series.length > 0) {
            var v = new D(this.ctx, e, !0);
            x.push(v.draw(o.series, "scatter", o.i));
          }
        } else switch (s.chart.type) {
          case "line":
            x = c.draw(a.series, "line");
            break;

          case "area":
            x = c.draw(a.series, "area");
            break;

          case "bar":
            if (s.chart.stacked) x = new M(this.ctx, e).draw(a.series);else x = new P(this.ctx, e).draw(a.series);
            break;

          case "candlestick":
            x = new E(this.ctx, e).draw(a.series);
            break;

          case "rangeBar":
            x = f.draw(a.series);
            break;

          case "heatmap":
            x = new X(this.ctx, e).draw(a.series);
            break;

          case "pie":
          case "donut":
            x = u.draw(a.series);
            break;

          case "radialBar":
            x = g.draw(a.series);
            break;

          case "radar":
            x = p.draw(a.series);
            break;

          default:
            x = c.draw(a.series);
        }

        return x;
      }
    }, {
      key: "setSVGDimensions",
      value: function value() {
        var t = this.w.globals,
            e = this.w.config;
        t.svgWidth = e.chart.width, t.svgHeight = e.chart.height;
        var i = d.getDimensions(this.el),
            s = e.chart.width.toString().split(/[0-9]+/g).pop();
        if ("%" === s ? d.isNumber(i[0]) && (0 === i[0].width && (i = d.getDimensions(this.el.parentNode)), t.svgWidth = i[0] * parseInt(e.chart.width) / 100) : "px" !== s && "" !== s || (t.svgWidth = parseInt(e.chart.width)), "auto" !== t.svgHeight && "" !== t.svgHeight) {
          if ("%" === e.chart.height.toString().split(/[0-9]+/g).pop()) {
            var a = d.getDimensions(this.el.parentNode);
            t.svgHeight = a[1] * parseInt(e.chart.height) / 100;
          } else t.svgHeight = parseInt(e.chart.height);
        } else t.axisCharts ? t.svgHeight = t.svgWidth / 1.61 : t.svgHeight = t.svgWidth;
        f.setAttrs(t.dom.Paper.node, {
          width: t.svgWidth,
          height: t.svgHeight
        });
        var n = e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0;
        t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + n + "px", t.dom.elWrap.style.width = t.svgWidth + "px", t.dom.elWrap.style.height = t.svgHeight + "px";
      }
    }, {
      key: "shiftGraphPosition",
      value: function value() {
        var t = this.w.globals,
            e = t.translateY,
            i = {
          transform: "translate(" + t.translateX + ", " + e + ")"
        };
        f.setAttrs(t.dom.elGraphical.node, i);
      }
    }, {
      key: "coreCalculations",
      value: function value() {
        new V(this.ctx).init();
      }
    }, {
      key: "resetGlobals",
      value: function value() {
        var t = this,
            e = this.w.globals;
        e.series = [], e.seriesCandleO = [], e.seriesCandleH = [], e.seriesCandleL = [], e.seriesCandleC = [], e.seriesRangeStart = [], e.seriesRangeEnd = [], e.seriesPercent = [], e.seriesX = [], e.seriesZ = [], e.seriesNames = [], e.seriesTotals = [], e.stackedSeriesTotals = [], e.labels = [], e.timelineLabels = [], e.noLabelsProvided = !1, e.timescaleTicks = [], e.resizeTimer = null, e.selectionResizeTimer = null, e.seriesXvalues = t.w.config.series.map(function (t) {
          return [];
        }), e.seriesYvalues = t.w.config.series.map(function (t) {
          return [];
        }), e.delayedElements = [], e.pointsArray = [], e.dataLabelsRects = [], e.isXNumeric = !1, e.isDataXYZ = !1, e.maxY = -Number.MAX_VALUE, e.minY = Number.MIN_VALUE, e.minYArr = [], e.maxYArr = [], e.maxX = -Number.MAX_VALUE, e.minX = Number.MAX_VALUE, e.initialmaxX = -Number.MAX_VALUE, e.initialminX = Number.MAX_VALUE, e.maxDate = 0, e.minDate = Number.MAX_VALUE, e.minZ = Number.MAX_VALUE, e.maxZ = -Number.MAX_VALUE, e.minXDiff = Number.MAX_VALUE, e.yAxisScale = [], e.xAxisScale = null, e.xAxisTicksPositions = [], e.yLabelsCoords = [], e.yTitleCoords = [], e.xRange = 0, e.yRange = [], e.zRange = 0, e.dataPoints = 0;
      }
    }, {
      key: "isMultipleY",
      value: function value() {
        if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.config.chart.stacked = !1, this.w.globals.isMultipleYAxis = !0, !0;
      }
    }, {
      key: "excludeCollapsedSeriesInYAxis",
      value: function value() {
        var t = this,
            e = this.w;
        e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(function (e, i) {
          if (t.w.globals.isMultipleYAxis) return e.index;
        });
      }
    }, {
      key: "isMultiFormat",
      value: function value() {
        return this.isFormatXY() || this.isFormat2DArray();
      }
    }, {
      key: "isFormatXY",
      value: function value() {
        var t = this.w.config.series.slice(),
            e = new G(this.ctx);
        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;
      }
    }, {
      key: "isFormat2DArray",
      value: function value() {
        var t = this.w.config.series.slice(),
            e = new G(this.ctx);
        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;
      }
    }, {
      key: "handleFormat2DArray",
      value: function value(t, e) {
        for (var i = this.w.config, s = this.w.globals, a = 0; a < t[e].data.length; a++) {
          if (void 0 !== t[e].data[a][1] && (Array.isArray(t[e].data[a][1]) && 4 === t[e].data[a][1].length ? this.twoDSeries.push(d.parseNumber(t[e].data[a][1][3])) : this.twoDSeries.push(d.parseNumber(t[e].data[a][1])), s.dataFormatXNumeric = !0), "datetime" === i.xaxis.type) {
            var n = new Date(t[e].data[a][0]);
            n = new Date(n).getTime(), this.twoDSeriesX.push(n);
          } else this.twoDSeriesX.push(t[e].data[a][0]);
        }

        for (var r = 0; r < t[e].data.length; r++) {
          void 0 !== t[e].data[r][2] && (this.threeDSeries.push(t[e].data[r][2]), s.isDataXYZ = !0);
        }
      }
    }, {
      key: "handleFormatXY",
      value: function value(t, e) {
        var i = this.w.config,
            s = this.w.globals,
            a = new m(this.ctx),
            n = e;
        s.collapsedSeriesIndices.indexOf(e) > -1 && (n = this.activeSeriesIndex);

        for (var r = 0; r < t[e].data.length; r++) {
          void 0 !== t[e].data[r].y && (Array.isArray(t[e].data[r].y) ? this.twoDSeries.push(d.parseNumber(t[e].data[r].y[t[e].data[r].y.length - 1])) : this.twoDSeries.push(d.parseNumber(t[e].data[r].y)));
        }

        for (var o = 0; o < t[n].data.length; o++) {
          var l = "string" == typeof t[n].data[o].x,
              h = !!a.isValidDate(t[n].data[o].x.toString());
          l || h ? l ? "datetime" !== i.xaxis.type || s.isRangeData ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[n].data[o].x)) : this.twoDSeriesX.push(a.parseDate(t[n].data[o].x)) : "datetime" === i.xaxis.type ? this.twoDSeriesX.push(a.parseDate(t[n].data[o].x.toString())) : (s.dataFormatXNumeric = !0, s.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[n].data[o].x))) : (s.isXNumeric = !0, s.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[n].data[o].x));
        }

        if (t[e].data[0] && void 0 !== t[e].data[0].z) {
          for (var c = 0; c < t[e].data.length; c++) {
            this.threeDSeries.push(t[e].data[c].z);
          }

          s.isDataXYZ = !0;
        }
      }
    }, {
      key: "handleRangeData",
      value: function value(t, e) {
        var i = this.w.globals,
            s = {};
        return this.isFormat2DArray() ? s = this.handleRangeDataFormat("array", t, e) : this.isFormatXY() && (s = this.handleRangeDataFormat("xy", t, e)), i.seriesRangeStart.push(s.start), i.seriesRangeEnd.push(s.end), s;
      }
    }, {
      key: "handleCandleStickData",
      value: function value(t, e) {
        var i = this.w.globals,
            s = {};
        return this.isFormat2DArray() ? s = this.handleCandleStickDataFormat("array", t, e) : this.isFormatXY() && (s = this.handleCandleStickDataFormat("xy", t, e)), i.seriesCandleO.push(s.o), i.seriesCandleH.push(s.h), i.seriesCandleL.push(s.l), i.seriesCandleC.push(s.c), s;
      }
    }, {
      key: "handleRangeDataFormat",
      value: function value(t, e, i) {
        var s = [],
            a = [],
            n = "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",
            r = new G(this.ctx).getActiveConfigSeriesIndex();

        if ("array" === t) {
          if (2 !== e[r].data[0][1].length) throw new Error(n);

          for (var o = 0; o < e[i].data.length; o++) {
            s.push(e[i].data[o][1][0]), a.push(e[i].data[o][1][1]);
          }
        } else if ("xy" === t) {
          if (2 !== e[r].data[0].y.length) throw new Error(n);

          for (var l = 0; l < e[i].data.length; l++) {
            s.push(e[i].data[l].y[0]), a.push(e[i].data[l].y[1]);
          }
        }

        return {
          start: s,
          end: a
        };
      }
    }, {
      key: "handleCandleStickDataFormat",
      value: function value(t, e, i) {
        var s = [],
            a = [],
            n = [],
            r = [],
            o = "Please provide [Open, High, Low and Close] values in valid format. Read more https://apexcharts.com/docs/series/#candlestick";

        if ("array" === t) {
          if (4 !== e[i].data[0][1].length) throw new Error(o);

          for (var l = 0; l < e[i].data.length; l++) {
            s.push(e[i].data[l][1][0]), a.push(e[i].data[l][1][1]), n.push(e[i].data[l][1][2]), r.push(e[i].data[l][1][3]);
          }
        } else if ("xy" === t) {
          if (4 !== e[i].data[0].y.length) throw new Error(o);

          for (var h = 0; h < e[i].data.length; h++) {
            s.push(e[i].data[h].y[0]), a.push(e[i].data[h].y[1]), n.push(e[i].data[h].y[2]), r.push(e[i].data[h].y[3]);
          }
        }

        return {
          o: s,
          h: a,
          l: n,
          c: r
        };
      }
    }, {
      key: "parseDataAxisCharts",
      value: function value(t) {
        for (var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx, i = this.w.config, s = this.w.globals, a = new m(e), n = 0; n < t.length; n++) {
          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[n].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
          if ("rangeBar" !== i.chart.type && "rangeArea" !== i.chart.type && "rangeBar" !== t[n].type && "rangeArea" !== t[n].type || (s.isRangeData = !0, this.handleRangeData(t, n)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, n) : this.isFormatXY() && this.handleFormatXY(t, n), "candlestick" !== i.chart.type && "candlestick" !== t[n].type || this.handleCandleStickData(t, n), s.series.push(this.twoDSeries), s.labels.push(this.twoDSeriesX), s.seriesX.push(this.twoDSeriesX), this.fallbackToCategory || (s.isXNumeric = !0);else {
            if ("datetime" === i.xaxis.type) {
              s.isXNumeric = !0;

              for (var r = i.labels.length > 0 ? i.labels.slice() : i.xaxis.categories.slice(), o = 0; o < r.length; o++) {
                if ("string" == typeof r[o]) {
                  if (!a.isValidDate(r[o])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                  this.twoDSeriesX.push(a.parseDate(r[o]));
                }
              }

              s.seriesX.push(this.twoDSeriesX);
            } else if ("numeric" === i.xaxis.type) {
              s.isXNumeric = !0;
              var l = i.labels.length > 0 ? i.labels.slice() : i.xaxis.categories.slice();
              l.length > 0 && (this.twoDSeriesX = l, s.seriesX.push(this.twoDSeriesX));
            }

            s.labels.push(this.twoDSeriesX);
            var h = t[n].data.map(function (t) {
              return d.parseNumber(t);
            });
            s.series.push(h);
          }
          s.seriesZ.push(this.threeDSeries), void 0 !== t[n].name ? s.seriesNames.push(t[n].name) : s.seriesNames.push("series-" + parseInt(n + 1));
        }

        return this.w;
      }
    }, {
      key: "parseDataNonAxisCharts",
      value: function value(t) {
        var e = this.w.globals,
            i = this.w.config;
        e.series = t.slice(), e.seriesNames = i.labels.slice();

        for (var s = 0; s < e.series.length; s++) {
          void 0 === e.seriesNames[s] && e.seriesNames.push("series-" + (s + 1));
        }

        return this.w;
      }
    }, {
      key: "handleExternalLabelsData",
      value: function value(t) {
        var e = this.w.config,
            i = this.w.globals;
        if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;else if (e.labels.length > 0) i.labels = e.labels.slice();else if (this.fallbackToCategory) i.labels = i.labels[0];else {
          var s = [];

          if (i.axisCharts) {
            for (var a = 0; a < i.series[i.maxValsInArrayIndex].length; a++) {
              s.push(a + 1);
            }

            for (var n = 0; n < t.length; n++) {
              i.seriesX.push(s);
            }

            i.isXNumeric = !0;
          }

          if (0 === s.length) {
            s = [0, 10];

            for (var r = 0; r < t.length; r++) {
              i.seriesX.push(s);
            }
          }

          i.labels = s, i.noLabelsProvided = !0;
        }
      }
    }, {
      key: "parseData",
      value: function value(t) {
        var e = this.w,
            i = e.config,
            s = e.globals;

        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.resetGlobals(), this.isMultipleY(), s.axisCharts ? this.parseDataAxisCharts(t) : this.parseDataNonAxisCharts(t), this.coreUtils.getLargestSeries(), "bar" === i.chart.type && i.chart.stacked) {
          var a = new G(this.ctx);
          s.series = a.setNullSeriesToZeroValues(s.series);
        }

        this.coreUtils.getSeriesTotals(), s.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), s.dataFormatXNumeric || s.isXNumeric && ("numeric" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);
      }
    }, {
      key: "xySettings",
      value: function value() {
        var t = null,
            e = this.w;

        if (e.globals.axisCharts) {
          if ("back" === e.config.xaxis.crosshairs.position) new T(this.ctx).drawXCrosshairs();
          if ("back" === e.config.yaxis[0].crosshairs.position) new T(this.ctx).drawYCrosshairs();

          if (t = this.coreUtils.getCalculatedRatios(), "datetime" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter) {
            var i,
                s = new j(this.ctx);
            isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal ? (i = s.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX), s.recalcDimensionsBasedOnFormat(i, !1)) : e.globals.isBarHorizontal && (i = s.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY), s.recalcDimensionsBasedOnFormat(i, !0));
          }
        }

        return t;
      }
    }, {
      key: "drawAxis",
      value: function value(t, e) {
        var i,
            s,
            a = this.w.globals,
            n = this.w.config,
            r = new H(this.ctx),
            o = new W(this.ctx);
        a.axisCharts && "radar" !== t && (a.isBarHorizontal ? (s = o.drawYaxisInversed(0), i = r.drawXaxisInversed(0), a.dom.elGraphical.add(i), a.dom.elGraphical.add(s)) : (i = r.drawXaxis(), a.dom.elGraphical.add(i), n.yaxis.map(function (t, e) {
          -1 === a.ignoreYAxisIndexes.indexOf(e) && (s = o.drawYaxis(e), a.dom.Paper.add(s));
        })));
        n.yaxis.map(function (t, e) {
          -1 === a.ignoreYAxisIndexes.indexOf(e) && o.yAxisTitleRotate(e, t.opposite);
        });
      }
    }, {
      key: "setupBrushHandler",
      value: function value() {
        var t = this,
            e = this.w;
        e.config.chart.brush.enabled && "function" != typeof e.config.chart.events.selection && (e.config.chart.brush.targets || [e.config.chart.brush.target]).forEach(function (i) {
          var s = ApexCharts.getChartByID(i);
          s.w.globals.brushSource = t.ctx;

          var a = function a() {
            t.ctx._updateOptions({
              chart: {
                selection: {
                  xaxis: {
                    min: s.w.globals.minX,
                    max: s.w.globals.maxX
                  }
                }
              }
            }, !1, !1);
          };

          "function" != typeof s.w.config.chart.events.zoomed && (s.w.config.chart.events.zoomed = function () {
            a();
          }), "function" != typeof s.w.config.chart.events.scrolled && (s.w.config.chart.events.scrolled = function () {
            a();
          }), e.config.chart.events.selection = function (t, i) {
            var a = d.clone(e.config.yaxis);
            e.config.chart.brush.autoScaleYaxis && (a = new B(s).autoScaleY(s, i));

            s._updateOptions({
              xaxis: {
                min: i.xaxis.min,
                max: i.xaxis.max
              },
              yaxis: a
            }, !1, !1, !1);
          };
        });
      }
    }]), t;
  }();

  var q = setTimeout;

  function Z() {}

  function $(t) {
    if (!(this instanceof $)) throw new TypeError("Promises must be constructed via new");
    if ("function" != typeof t) throw new TypeError("not a function");
    this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], it(t, this);
  }

  function J(t, e) {
    for (; 3 === t._state;) {
      t = t._value;
    }

    0 !== t._state ? (t._handled = !0, $._immediateFn(function () {
      var i = 1 === t._state ? e.onFulfilled : e.onRejected;

      if (null !== i) {
        var s;

        try {
          s = i(t._value);
        } catch (t) {
          return void K(e.promise, t);
        }

        Q(e.promise, s);
      } else (1 === t._state ? Q : K)(e.promise, t._value);
    })) : t._deferreds.push(e);
  }

  function Q(t, e) {
    try {
      if (e === t) throw new TypeError("A promise cannot be resolved with itself.");

      if (e && ("object" == _typeof(e) || "function" == typeof e)) {
        var i = e.then;
        if (e instanceof $) return t._state = 3, t._value = e, void tt(t);
        if ("function" == typeof i) return void it((s = i, a = e, function () {
          s.apply(a, arguments);
        }), t);
      }

      t._state = 1, t._value = e, tt(t);
    } catch (e) {
      K(t, e);
    }

    var s, a;
  }

  function K(t, e) {
    t._state = 2, t._value = e, tt(t);
  }

  function tt(t) {
    2 === t._state && 0 === t._deferreds.length && $._immediateFn(function () {
      t._handled || $._unhandledRejectionFn(t._value);
    });

    for (var e = 0, i = t._deferreds.length; e < i; e++) {
      J(t, t._deferreds[e]);
    }

    t._deferreds = null;
  }

  function et(t, e, i) {
    this.onFulfilled = "function" == typeof t ? t : null, this.onRejected = "function" == typeof e ? e : null, this.promise = i;
  }

  function it(t, e) {
    var i = !1;

    try {
      t(function (t) {
        i || (i = !0, Q(e, t));
      }, function (t) {
        i || (i = !0, K(e, t));
      });
    } catch (t) {
      if (i) return;
      i = !0, K(e, t);
    }
  }

  $.prototype["catch"] = function (t) {
    return this.then(null, t);
  }, $.prototype.then = function (t, e) {
    var i = new this.constructor(Z);
    return J(this, new et(t, e, i)), i;
  }, $.prototype["finally"] = function (t) {
    var e = this.constructor;
    return this.then(function (i) {
      return e.resolve(t()).then(function () {
        return i;
      });
    }, function (i) {
      return e.resolve(t()).then(function () {
        return e.reject(i);
      });
    });
  }, $.all = function (t) {
    return new $(function (e, i) {
      if (!t || void 0 === t.length) throw new TypeError("Promise.all accepts an array");
      var s = Array.prototype.slice.call(t);
      if (0 === s.length) return e([]);
      var a = s.length;

      function n(t, r) {
        try {
          if (r && ("object" == _typeof(r) || "function" == typeof r)) {
            var o = r.then;
            if ("function" == typeof o) return void o.call(r, function (e) {
              n(t, e);
            }, i);
          }

          s[t] = r, 0 == --a && e(s);
        } catch (t) {
          i(t);
        }
      }

      for (var r = 0; r < s.length; r++) {
        n(r, s[r]);
      }
    });
  }, $.resolve = function (t) {
    return t && "object" == _typeof(t) && t.constructor === $ ? t : new $(function (e) {
      e(t);
    });
  }, $.reject = function (t) {
    return new $(function (e, i) {
      i(t);
    });
  }, $.race = function (t) {
    return new $(function (e, i) {
      for (var s = 0, a = t.length; s < a; s++) {
        t[s].then(e, i);
      }
    });
  }, $._immediateFn = "function" == typeof setImmediate && function (t) {
    setImmediate(t);
  } || function (t) {
    q(t, 0);
  }, $._unhandledRejectionFn = function (t) {
    "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", t);
  };

  var st,
      _at,
      nt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "getSvgString",
      value: function value() {
        return this.w.globals.dom.Paper.svg();
      }
    }, {
      key: "cleanup",
      value: function value() {
        var t = this.w,
            e = t.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs"),
            i = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs");
        e && e.setAttribute("x", -500), i && (i.setAttribute("y1", -100), i.setAttribute("y2", -100));
      }
    }, {
      key: "svgUrl",
      value: function value() {
        this.cleanup();
        var t = this.getSvgString(),
            e = new Blob([t], {
          type: "image/svg+xml;charset=utf-8"
        });
        return URL.createObjectURL(e);
      }
    }, {
      key: "dataURI",
      value: function value() {
        var t = this;
        return new $(function (e) {
          var i = t.w;
          t.cleanup();
          var s = document.createElement("canvas");
          s.width = i.globals.svgWidth, s.height = i.globals.svgHeight;
          var a = "transparent" === i.config.chart.background ? "#fff" : i.config.chart.background,
              n = s.getContext("2d");
          n.fillStyle = a, n.fillRect(0, 0, s.width, s.height);
          var r = window.URL || window.webkitURL || window,
              o = new Image();
          o.crossOrigin = "anonymous";
          var l = t.getSvgString(),
              h = "data:image/svg+xml," + encodeURIComponent(l);
          o.onload = function () {
            n.drawImage(o, 0, 0), r.revokeObjectURL(h);
            var t = s.toDataURL("image/png");
            e(t);
          }, o.src = h;
        });
      }
    }, {
      key: "exportToSVG",
      value: function value() {
        this.triggerDownload(this.svgUrl(), ".svg");
      }
    }, {
      key: "exportToPng",
      value: function value() {
        var t = this;
        this.dataURI().then(function (e) {
          t.triggerDownload(e, ".png");
        });
      }
    }, {
      key: "triggerDownload",
      value: function value(t, e) {
        var i = document.createElement("a");
        i.href = t, i.download = this.w.globals.chartID + e, document.body.appendChild(i), i.click(), document.body.removeChild(i);
      }
    }]), t;
  }(),
      rt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var s = this.w;
      this.anim = new g(this.ctx), this.xaxisLabels = s.globals.labels.slice(), this.animX = s.config.grid.xaxis.lines.animate && s.config.chart.animations.enabled, this.animY = s.config.grid.yaxis.lines.animate && s.config.chart.animations.enabled, s.globals.timelineLabels.length > 0 && (this.xaxisLabels = s.globals.timelineLabels.slice());
    }

    return s(t, [{
      key: "drawGridArea",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            e = this.w,
            i = new f(this.ctx);
        null === t && (t = i.group({
          "class": "apexcharts-grid"
        }));
        var s = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, "transparent"),
            a = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, "transparent");
        return t.add(a), t.add(s), t;
      }
    }, {
      key: "drawGrid",
      value: function value() {
        var t = this.w,
            e = new H(this.ctx),
            i = new W(this.ctx),
            s = this.w.globals,
            a = null;

        if (s.axisCharts) {
          if (t.config.grid.show) a = this.renderGrid(), s.dom.elGraphical.add(a.el), this.drawGridArea(a.el);else {
            var n = this.drawGridArea();
            s.dom.elGraphical.add(n);
          }
          null !== a && e.xAxisLabelCorrections(a.xAxisTickWidth), i.setYAxisTextAlignments();
        }
      }
    }, {
      key: "createGridMask",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = new f(this.ctx),
            s = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;

        if (Array.isArray(t.config.stroke.width)) {
          var a = 0;
          t.config.stroke.width.forEach(function (t) {
            a = Math.max(a, t);
          }), s = a;
        }

        e.dom.elGridRectMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e.cuid)), e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e.cuid)), e.dom.elGridRect = i.drawRect(-s / 2, -s / 2, e.gridWidth + s, e.gridHeight + s, 0, "#fff"), new y(this).getLargestMarkerSize();
        var n = t.globals.markers.largestSize + 1;
        e.dom.elGridRectMarker = i.drawRect(-n, -n, e.gridWidth + 2 * n, e.gridHeight + 2 * n, 0, "#fff"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);
        var r = e.dom.baseEl.querySelector("defs");
        r.appendChild(e.dom.elGridRectMask), r.appendChild(e.dom.elGridRectMarkerMask);
      }
    }, {
      key: "renderGrid",
      value: function value() {
        var t = this.w,
            e = new f(this.ctx),
            i = t.config.grid.strokeDashArray,
            s = e.group({
          "class": "apexcharts-grid"
        }),
            a = e.group({
          "class": "apexcharts-gridlines-horizontal"
        }),
            n = e.group({
          "class": "apexcharts-gridlines-vertical"
        });
        s.add(a), s.add(n);

        for (var r, o = 8, l = 0; l < t.globals.series.length && (void 0 !== t.globals.yAxisScale[l] && (o = t.globals.yAxisScale[l].result.length - 1), !(o > 2)); l++) {
          ;
        }

        if (t.globals.isBarHorizontal) {
          if (r = o, t.config.grid.xaxis.lines.show || t.config.xaxis.axisTicks.show) for (var h, c = t.globals.padHorizontal, d = t.globals.gridHeight, u = 0; u < r + 1 && (h = c = c + t.globals.gridWidth / r + .3, u !== r - 1); u++) {
            if (t.config.grid.xaxis.lines.show) {
              var g = e.drawLine(c, 0, h, d, t.config.grid.borderColor, i);
              g.node.classList.add("apexcharts-gridline"), n.add(g), this.animX && this.animateLine(g, {
                x1: 0,
                x2: 0
              }, {
                x1: c,
                x2: h
              });
            }

            new H(this.ctx).drawXaxisTicks(c, s);
          }
          if (t.config.grid.yaxis.lines.show) for (var p = 0, x = 0, b = t.globals.gridWidth, m = 0; m < t.globals.dataPoints + 1; m++) {
            var v = e.drawLine(0, p, b, x, t.config.grid.borderColor, i);
            a.add(v), v.node.classList.add("apexcharts-gridline"), this.animY && this.animateLine(v, {
              y1: p + 20,
              y2: x + 20
            }, {
              y1: p,
              y2: x
            }), x = p += t.globals.gridHeight / t.globals.dataPoints;
          }
        } else {
          if (r = this.xaxisLabels.length, t.config.grid.xaxis.lines.show || t.config.xaxis.axisTicks.show) {
            var y,
                w = t.globals.padHorizontal,
                k = t.globals.gridHeight;
            if (t.globals.timelineLabels.length > 0) for (var A = 0; A < r; A++) {
              if (w = this.xaxisLabels[A].position, y = this.xaxisLabels[A].position, t.config.grid.xaxis.lines.show && w > 0 && w < t.globals.gridWidth) {
                var S = e.drawLine(w, 0, y, k, t.config.grid.borderColor, i);
                S.node.classList.add("apexcharts-gridline"), n.add(S), this.animX && this.animateLine(S, {
                  x1: 0,
                  x2: 0
                }, {
                  x1: w,
                  x2: y
                });
              }

              var C = new H(this.ctx);
              A === r - 1 && t.globals.skipLastTimelinelabel || C.drawXaxisTicks(w, s);
            } else for (var L = r, z = 0; z < L; z++) {
              var P = L;
              if (t.globals.isXNumeric && "bar" !== t.config.chart.type && (P -= 1), y = w += t.globals.gridWidth / P, z === P - 1) break;

              if (t.config.grid.xaxis.lines.show) {
                var M = e.drawLine(w, 0, y, k, t.config.grid.borderColor, i);
                M.node.classList.add("apexcharts-gridline"), n.add(M), this.animX && this.animateLine(M, {
                  x1: 0,
                  x2: 0
                }, {
                  x1: w,
                  x2: y
                });
              }

              new H(this.ctx).drawXaxisTicks(w, s);
            }
          }

          if (t.config.grid.yaxis.lines.show) for (var E = 0, T = 0, X = t.globals.gridWidth, I = 0; I < o + 1; I++) {
            var Y = e.drawLine(0, E, X, T, t.config.grid.borderColor, i);
            a.add(Y), Y.node.classList.add("apexcharts-gridline"), this.animY && this.animateLine(Y, {
              y1: E + 20,
              y2: T + 20
            }, {
              y1: E,
              y2: T
            }), T = E += t.globals.gridHeight / o;
          }
        }

        return this.drawGridBands(s, r, o), {
          el: s,
          xAxisTickWidth: t.globals.gridWidth / r
        };
      }
    }, {
      key: "drawGridBands",
      value: function value(t, e, i) {
        var s = this.w,
            a = new f(this.ctx);
        if (void 0 !== s.config.grid.row.colors && s.config.grid.row.colors.length > 0) for (var n = 0, r = s.globals.gridHeight / i, o = s.globals.gridWidth, l = 0, h = 0; l < i; l++, h++) {
          h >= s.config.grid.row.colors.length && (h = 0);
          var c = s.config.grid.row.colors[h],
              d = a.drawRect(0, n, o, r, 0, c, s.config.grid.row.opacity);
          t.add(d), d.node.classList.add("apexcharts-gridRow"), n += s.globals.gridHeight / i;
        }
        if (void 0 !== s.config.grid.column.colors && s.config.grid.column.colors.length > 0) for (var u = s.globals.padHorizontal, g = s.globals.padHorizontal + s.globals.gridWidth / e, p = s.globals.gridHeight, x = 0, b = 0; x < e; x++, b++) {
          b >= s.config.grid.column.colors.length && (b = 0);
          var m = s.config.grid.column.colors[b],
              v = a.drawRect(u, 0, g, p, 0, m, s.config.grid.column.opacity);
          v.node.classList.add("apexcharts-gridColumn"), t.add(v), u += s.globals.gridWidth / e;
        }
      }
    }, {
      key: "animateLine",
      value: function value(t, e, i) {
        var s = this.w,
            a = s.config.chart.animations;

        if (a && !s.globals.resized && !s.globals.dataChanged) {
          var n = a.speed;
          this.anim.animateLine(t, e, i, n);
        }
      }
    }]), t;
  }(),
      ot = function () {
    function t(i, s) {
      e(this, t), this.ctx = i, this.w = i.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this);
    }

    return s(t, [{
      key: "init",
      value: function value() {
        var t = this.w,
            e = t.globals,
            i = t.config;

        if ((i.legend.showForSingleSeries && 1 === e.series.length || e.series.length > 1 || !e.axisCharts) && i.legend.show) {
          for (; e.dom.elLegendWrap.firstChild;) {
            e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);
          }

          this.drawLegends(), d.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.getLegendStyles()) : this.appendToForeignObject(), "bottom" === i.legend.position || "top" === i.legend.position ? this.legendAlignHorizontal() : "right" !== i.legend.position && "left" !== i.legend.position || this.legendAlignVertical();
        }
      }
    }, {
      key: "appendToForeignObject",
      value: function value() {
        var t = this.w.globals,
            e = document.createElementNS(t.SVGNS, "foreignObject");
        e.setAttribute("x", 0), e.setAttribute("y", 0), e.setAttribute("width", t.svgWidth), e.setAttribute("height", t.svgHeight), t.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e.appendChild(t.dom.elLegendWrap), e.appendChild(this.getLegendStyles()), t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node);
      }
    }, {
      key: "drawLegends",
      value: function value() {
        var t = this.w,
            e = t.config.legend.fontFamily,
            i = t.globals.seriesNames,
            s = t.globals.colors.slice();

        if ("heatmap" === t.config.chart.type) {
          var a = t.config.plotOptions.heatmap.colorScale.ranges;
          i = a.map(function (t) {
            return t.name ? t.name : t.from + " - " + t.to;
          }), s = a.map(function (t) {
            return t.color;
          });
        }

        for (var n = t.globals.legendFormatter, r = 0; r <= i.length - 1; r++) {
          var o = n(i[r], {
            seriesIndex: r,
            w: t
          }),
              l = !1,
              h = !1;
          if (t.globals.collapsedSeries.length > 0) for (var c = 0; c < t.globals.collapsedSeries.length; c++) {
            t.globals.collapsedSeries[c].index === r && (l = !0);
          }
          if (t.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var d = 0; d < t.globals.ancillaryCollapsedSeriesIndices.length; d++) {
            t.globals.ancillaryCollapsedSeriesIndices[d] === r && (h = !0);
          }
          var u = document.createElement("span");
          u.classList.add("apexcharts-legend-marker");
          var g = t.config.legend.markers.offsetX,
              p = t.config.legend.markers.offsetY,
              x = t.config.legend.markers.height,
              b = t.config.legend.markers.width,
              m = t.config.legend.markers.strokeWidth,
              v = t.config.legend.markers.strokeColor,
              w = t.config.legend.markers.radius,
              k = u.style;
          k.background = s[r], k.color = s[r], k.height = Array.isArray(x) ? parseFloat(x[r]) + "px" : parseFloat(x) + "px", k.width = Array.isArray(b) ? parseFloat(b[r]) + "px" : parseFloat(b) + "px", k.left = Array.isArray(g) ? g[r] : g, k.top = Array.isArray(p) ? p[r] : p, k.borderWidth = Array.isArray(m) ? m[r] : m, k.borderColor = Array.isArray(v) ? v[r] : v, k.borderRadius = Array.isArray(w) ? parseFloat(w[r]) + "px" : parseFloat(w) + "px", t.config.legend.markers.customHTML && (Array.isArray(t.config.legend.markers.customHTML) ? u.innerHTML = t.config.legend.markers.customHTML[r]() : u.innerHTML = t.config.legend.markers.customHTML()), f.setAttrs(u, {
            rel: r + 1,
            "data:collapsed": l || h
          }), (l || h) && u.classList.add("inactive-legend");
          var A = document.createElement("div"),
              S = document.createElement("span");
          S.classList.add("apexcharts-legend-text"), S.innerHTML = o;
          var C = t.config.legend.labels.useSeriesColors ? t.globals.colors[r] : t.config.legend.labels.colors;
          C || (C = t.config.chart.foreColor), S.style.color = C, S.style.fontSize = parseFloat(t.config.legend.fontSize) + "px", S.style.fontFamily = e || t.config.chart.fontFamily, f.setAttrs(S, {
            rel: r + 1,
            "data:collapsed": l || h
          }), A.appendChild(u), A.appendChild(S);
          var L = new y(this.ctx);
          if (!t.config.legend.showForZeroSeries) 0 === L.getSeriesTotalByIndex(r) && L.seriesHaveSameValues(r) && !L.isSeriesNull(r) && -1 === t.globals.collapsedSeriesIndices.indexOf(r) && -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(r) && A.classList.add("apexcharts-hidden-zero-series");
          t.config.legend.showForNullSeries || L.isSeriesNull(r) && -1 === t.globals.collapsedSeriesIndices.indexOf(r) && -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(r) && A.classList.add("apexcharts-hidden-null-series"), t.globals.dom.elLegendWrap.appendChild(A), t.globals.dom.elLegendWrap.classList.add(t.config.legend.horizontalAlign), t.globals.dom.elLegendWrap.classList.add("position-" + t.config.legend.position), A.classList.add("apexcharts-legend-series"), A.style.margin = "".concat(t.config.legend.itemMargin.horizontal, "px ").concat(t.config.legend.itemMargin.vertical, "px"), t.globals.dom.elLegendWrap.style.width = t.config.legend.width ? t.config.legend.width + "px" : "", t.globals.dom.elLegendWrap.style.height = t.config.legend.height ? t.config.legend.height + "px" : "", f.setAttrs(A, {
            rel: r + 1,
            "data:collapsed": l || h
          }), (l || h) && A.classList.add("inactive-legend"), t.config.legend.onItemClick.toggleDataSeries || A.classList.add("no-click");
        }

        "heatmap" !== t.config.chart.type && t.config.legend.onItemClick.toggleDataSeries && t.globals.dom.elWrap.addEventListener("click", this.onLegendClick, !0), t.config.legend.onItemHover.highlightDataSeries && (t.globals.dom.elWrap.addEventListener("mousemove", this.onLegendHovered, !0), t.globals.dom.elWrap.addEventListener("mouseout", this.onLegendHovered, !0));
      }
    }, {
      key: "getLegendBBox",
      value: function value() {
        var t = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(),
            e = t.width;
        return {
          clwh: t.height,
          clww: e
        };
      }
    }, {
      key: "setLegendWrapXY",
      value: function value(t, e) {
        var i = this.w,
            s = i.globals.dom.baseEl.querySelector(".apexcharts-legend"),
            a = s.getBoundingClientRect(),
            n = 0,
            r = 0;
        if ("bottom" === i.config.legend.position) r += i.globals.svgHeight - a.height / 2;else if ("top" === i.config.legend.position) {
          var o = new _(this.ctx),
              l = o.getTitleSubtitleCoords("title").height,
              h = o.getTitleSubtitleCoords("subtitle").height;
          r = r + (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);
        }
        s.style.position = "absolute", n = n + t + i.config.legend.offsetX, r = r + e + i.config.legend.offsetY, s.style.left = n + "px", s.style.top = r + "px", "bottom" === i.config.legend.position ? (s.style.top = "auto", s.style.bottom = 10 + i.config.legend.offsetY + "px") : "right" === i.config.legend.position && (s.style.left = "auto", s.style.right = 25 + i.config.legend.offsetX + "px"), s.style.width && (s.style.width = parseInt(i.config.legend.width) + "px"), s.style.height && (s.style.height = parseInt(i.config.legend.height) + "px");
      }
    }, {
      key: "legendAlignHorizontal",
      value: function value() {
        var t = this.w;
        t.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right = 0;
        var e = this.getLegendBBox(),
            i = new _(this.ctx),
            s = i.getTitleSubtitleCoords("title"),
            a = i.getTitleSubtitleCoords("subtitle"),
            n = 0;
        "bottom" === t.config.legend.position ? n = -e.clwh / 1.8 : "top" === t.config.legend.position && (n = s.height + a.height + t.config.title.margin + t.config.subtitle.margin - 15), this.setLegendWrapXY(20, n);
      }
    }, {
      key: "legendAlignVertical",
      value: function value() {
        var t = this.w,
            e = this.getLegendBBox(),
            i = 0;
        "left" === t.config.legend.position && (i = 20), "right" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);
      }
    }, {
      key: "onLegendHovered",
      value: function value(t) {
        var e = this.w,
            i = t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker");
        if ("heatmap" !== e.config.chart.type) !t.target.classList.contains("inactive-legend") && i && new G(this.ctx).toggleSeriesOnHover(t, t.target);else if (i) {
          var s = parseInt(t.target.getAttribute("rel")) - 1;
          this.ctx.fireEvent("legendHover", [this.ctx, s, this.w]), new G(this.ctx).highlightRangeInSeries(t, t.target);
        }
      }
    }, {
      key: "onLegendClick",
      value: function value(t) {
        if (t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker")) {
          var e = parseInt(t.target.getAttribute("rel")) - 1,
              i = "true" === t.target.getAttribute("data:collapsed"),
              s = this.w.config.chart.events.legendClick;
          "function" == typeof s && s(this.ctx, e, this.w), this.ctx.fireEvent("legendClick", [this.ctx, e, this.w]);
          var a = this.w.config.legend.markers.onClick;
          "function" == typeof a && t.target.classList.contains("apexcharts-legend-marker") && (a(this.ctx, e, this.w), this.ctx.fireEvent("legendMarkerClick", [this.ctx, e, this.w])), this.toggleDataSeries(e, i);
        }
      }
    }, {
      key: "getLegendStyles",
      value: function value() {
        var t = document.createElement("style");
        t.setAttribute("type", "text/css");
        var e = document.createTextNode("\n    \n      .apexcharts-legend {\n        display: flex;\n        overflow: auto;\n        padding: 0 10px;\n      }\n\n      .apexcharts-legend.position-bottom, .apexcharts-legend.position-top {\n        flex-wrap: wrap\n      }\n      .apexcharts-legend.position-right, .apexcharts-legend.position-left {\n        flex-direction: column;\n        bottom: 0;\n      }\n\n      .apexcharts-legend.position-bottom.left, .apexcharts-legend.position-top.left, .apexcharts-legend.position-right, .apexcharts-legend.position-left {\n        justify-content: flex-start;\n      }\n\n      .apexcharts-legend.position-bottom.center, .apexcharts-legend.position-top.center {\n        justify-content: center;  \n      }\n\n      .apexcharts-legend.position-bottom.right, .apexcharts-legend.position-top.right {\n        justify-content: flex-end;\n      }\n\n      .apexcharts-legend-series {\n        cursor: pointer;\n        line-height: normal;\n      }\n\n      .apexcharts-legend.position-bottom .apexcharts-legend-series, .apexcharts-legend.position-top .apexcharts-legend-series{\n        display: flex;\n        align-items: center;\n      }\n\n      .apexcharts-legend-text {\n        position: relative;\n        font-size: 14px;\n      }\n\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\n        pointer-events: none;\n      }\n\n      .apexcharts-legend-marker {\n        position: relative;\n        display: inline-block;\n        cursor: pointer;\n        margin-right: 3px;\n      }\n      \n      .apexcharts-legend.right .apexcharts-legend-series, .apexcharts-legend.left .apexcharts-legend-series{\n        display: inline-block;\n      }\n\n      .apexcharts-legend-series.no-click {\n        cursor: auto;\n      }\n\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\n        display: none !important;\n      }\n\n      .inactive-legend {\n        opacity: 0.45;\n      }");
        return t.appendChild(e), t;
      }
    }, {
      key: "resetToggleDataSeries",
      value: function value() {
        var t = this.w,
            e = null,
            i = [];

        if (t.globals.axisCharts ? (e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:realIndex]"), (e = d.listToArray(e)).forEach(function (t) {
          i.push(parseInt(t.getAttribute("data:realIndex")));
        })) : (e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series[rel]"), (e = d.listToArray(e)).forEach(function (t) {
          i.push(parseInt(t.getAttribute("rel")) - 1);
        })), i.sort(), t.globals.collapsedSeries.length > 0) {
          for (var s = t.globals.risingSeries.slice(), a = t.config.series.slice(), n = 0; n < t.globals.collapsedSeries.length; n++) {
            var r = i.indexOf(t.globals.collapsedSeries[n].index);
            -1 !== r && (t.globals.axisCharts ? a[r].data = t.globals.collapsedSeries.slice()[n].data.slice() : a[r] = t.globals.collapsedSeries.slice()[n].data, s.push(r));
          }

          t.globals.collapsedSeries = [], t.globals.ancillaryCollapsedSeries = [], t.globals.collapsedSeriesIndices = [], t.globals.ancillaryCollapsedSeriesIndices = [], t.globals.risingSeries = s, t.config.series = a, this.ctx._updateSeries(t.config.series, t.config.chart.animations.dynamicAnimation.enabled);
        }
      }
    }, {
      key: "toggleDataSeries",
      value: function value(t, e) {
        var i = this.w;

        if (i.globals.axisCharts || "radialBar" === i.config.chart.type) {
          i.globals.resized = !0;
          var s = null,
              a = null;
          if (i.globals.risingSeries = [], i.globals.axisCharts ? (s = i.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t, "']")), a = parseInt(s.getAttribute("data:realIndex"))) : (s = i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t + 1, "']")), a = parseInt(s.getAttribute("rel")) - 1), e) this.riseCollapsedSeries(i.globals.collapsedSeries, i.globals.collapsedSeriesIndices, a), this.riseCollapsedSeries(i.globals.ancillaryCollapsedSeries, i.globals.ancillaryCollapsedSeriesIndices, a);else {
            if (i.globals.axisCharts) {
              var n = !1;

              if (i.config.yaxis[a] && i.config.yaxis[a].show && i.config.yaxis[a].showAlways && (n = !0, i.globals.ancillaryCollapsedSeriesIndices.indexOf(a) < 0 && (i.globals.ancillaryCollapsedSeries.push({
                index: a,
                data: i.config.series[a].data.slice(),
                type: s.parentNode.className.baseVal.split("-")[1]
              }), i.globals.ancillaryCollapsedSeriesIndices.push(a))), !n) {
                i.globals.collapsedSeries.push({
                  index: a,
                  data: i.config.series[a].data.slice(),
                  type: s.parentNode.className.baseVal.split("-")[1]
                }), i.globals.collapsedSeriesIndices.push(a);
                var r = i.globals.risingSeries.indexOf(a);
                i.globals.risingSeries.splice(r, 1);
              }

              i.config.series[a].data = [];
            } else i.globals.collapsedSeries.push({
              index: a,
              data: i.config.series[a]
            }), i.globals.collapsedSeriesIndices.push(a), i.config.series[a] = 0;

            for (var o = s.childNodes, l = 0; l < o.length; l++) {
              o[l].classList.contains("apexcharts-series-markers-wrap") && (o[l].classList.contains("apexcharts-hide") ? o[l].classList.remove("apexcharts-hide") : o[l].classList.add("apexcharts-hide"));
            }

            i.globals.allSeriesCollapsed = i.globals.collapsedSeries.length === i.globals.series.length, this.ctx._updateSeries(i.config.series, i.config.chart.animations.dynamicAnimation.enabled);
          }
        } else {
          var h = i.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t + 1, "'] path")),
              c = i.config.chart.type;

          if ("pie" === c || "donut" === c) {
            var d = i.config.plotOptions.pie.donut.labels,
                u = new f(this.ctx),
                g = new I(this.ctx);
            u.pathMouseDown(h.members[0], null), g.printDataLabelsInner(h.members[0].node, d);
          }

          h.fire("click");
        }
      }
    }, {
      key: "riseCollapsedSeries",
      value: function value(t, e, i) {
        var s = this.w;
        if (t.length > 0) for (var a = 0; a < t.length; a++) {
          t[a].index === i && (s.globals.axisCharts ? (s.config.series[i].data = t[a].data.slice(), t.splice(a, 1), e.splice(a, 1), s.globals.risingSeries.push(i)) : (s.config.series[i] = t[a].data, t.splice(a, 1), e.splice(a, 1), s.globals.risingSeries.push(i)), this.ctx._updateSeries(s.config.series, s.config.chart.animations.dynamicAnimation.enabled));
        }
      }
    }]), t;
  }(),
      lt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "checkResponsiveConfig",
      value: function value(t) {
        var e = this,
            i = this.w,
            s = i.config;

        if (0 !== s.responsive.length) {
          var a = s.responsive.slice();
          a.sort(function (t, e) {
            return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;
          }).reverse();

          var n = new w({}),
              r = function r() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                s = a[0].breakpoint,
                r = window.innerWidth > 0 ? window.innerWidth : screen.width;

            if (r > s) {
              var o = y.extendArrayProps(n, i.globals.initialConfig);
              t = d.extend(o, t), t = d.extend(i.config, t), e.overrideResponsiveOptions(t);
            } else for (var l = 0; l < a.length; l++) {
              r < a[l].breakpoint && (t = y.extendArrayProps(n, a[l].options), t = d.extend(i.config, t), e.overrideResponsiveOptions(t));
            }
          };

          if (t) {
            var o = y.extendArrayProps(n, t);
            o = d.extend(i.config, o), r(o = d.extend(o, t));
          } else r({});
        }
      }
    }, {
      key: "overrideResponsiveOptions",
      value: function value(t) {
        var e = new w(t).init();
        this.w.config = e;
      }
    }]), t;
  }(),
      ht = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.colors = [];
    }

    return s(t, [{
      key: "init",
      value: function value() {
        this.setDefaultColors();
      }
    }, {
      key: "setDefaultColors",
      value: function value() {
        var t = this.w,
            e = new d();

        if (t.globals.dom.elWrap.classList.add(t.config.theme.mode), void 0 === t.config.colors ? t.globals.colors = this.predefined() : t.globals.colors = t.config.colors, t.config.theme.monochrome.enabled) {
          var i = [],
              s = t.globals.series.length;
          t.config.plotOptions.bar.distributed && "bar" === t.config.chart.type && (s = t.globals.series[0].length * t.globals.series.length);

          for (var a = t.config.theme.monochrome.color, n = 1 / (s / t.config.theme.monochrome.shadeIntensity), r = t.config.theme.monochrome.shadeTo, o = 0, l = 0; l < s; l++) {
            var h = void 0;
            "dark" === r ? (h = e.shadeColor(-1 * o, a), o += n) : (h = e.shadeColor(o, a), o += n), i.push(h);
          }

          t.globals.colors = i.slice();
        }

        var c = t.globals.colors.slice();
        this.pushExtraColors(t.globals.colors), void 0 === t.config.stroke.colors ? t.globals.stroke.colors = c : t.globals.stroke.colors = t.config.stroke.colors, this.pushExtraColors(t.globals.stroke.colors), void 0 === t.config.fill.colors ? t.globals.fill.colors = c : t.globals.fill.colors = t.config.fill.colors, this.pushExtraColors(t.globals.fill.colors), void 0 === t.config.dataLabels.style.colors ? t.globals.dataLabels.style.colors = c : t.globals.dataLabels.style.colors = t.config.dataLabels.style.colors, this.pushExtraColors(t.globals.dataLabels.style.colors, 50), void 0 === t.config.plotOptions.radar.polygons.fill.colors ? t.globals.radarPolygons.fill.colors = ["dark" === t.config.theme.mode ? "#202D48" : "#fff"] : t.globals.radarPolygons.fill.colors = t.config.plotOptions.radar.polygons.fill.colors, this.pushExtraColors(t.globals.radarPolygons.fill.colors, 20), void 0 === t.config.markers.colors ? t.globals.markers.colors = c : t.globals.markers.colors = t.config.markers.colors, this.pushExtraColors(t.globals.markers.colors);
      }
    }, {
      key: "pushExtraColors",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            s = this.w,
            a = e || s.globals.series.length;
        if (null === i && (i = "bar" === s.config.chart.type && s.config.plotOptions.bar.distributed || "heatmap" === s.config.chart.type && s.config.plotOptions.heatmap.colorScale.inverse), i && (a = s.globals.series[0].length * s.globals.series.length), t.length < a) for (var n = a - t.length, r = 0; r < n; r++) {
          t.push(t[r]);
        }
      }
    }, {
      key: "updateThemeOptions",
      value: function value(t) {
        t.chart = t.chart || {}, t.tooltip = t.tooltip || {};
        var e = t.theme.mode || "light",
            i = t.theme.palette ? t.theme.palette : "dark" === e ? "palette4" : "palette1",
            s = t.chart.foreColor ? t.chart.foreColor : "dark" === e ? "#f6f7f8" : "#373d3f";
        return t.tooltip.theme = e, t.chart.foreColor = s, t.theme.palette = i, t;
      }
    }, {
      key: "predefined",
      value: function value() {
        switch (this.w.config.theme.palette) {
          case "palette1":
            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
            break;

          case "palette2":
            this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
            break;

          case "palette3":
            this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
            break;

          case "palette4":
            this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
            break;

          case "palette5":
            this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
            break;

          case "palette6":
            this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
            break;

          case "palette7":
            this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
            break;

          case "palette8":
            this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
            break;

          case "palette9":
            this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
            break;

          case "palette10":
            this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"];
            break;

          default:
            this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
        }

        return this.colors;
      }
    }]), t;
  }(),
      ct = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i, this.ctx = i.ctx;
    }

    return s(t, [{
      key: "getNearestValues",
      value: function value(t) {
        var e = t.hoverArea,
            i = t.elGrid,
            s = t.clientX,
            a = t.clientY,
            n = t.hasBars,
            r = this.w,
            o = r.globals.gridWidth,
            l = o / (r.globals.dataPoints - 1),
            h = i.getBoundingClientRect();
        (n && r.globals.comboCharts || n) && (l = o / r.globals.dataPoints);
        var c = s - h.left,
            d = a - h.top;
        c < 0 || d < 0 || c > r.globals.gridWidth || d > r.globals.gridHeight ? (e.classList.remove("hovering-zoom"), e.classList.remove("hovering-pan")) : r.globals.zoomEnabled ? (e.classList.remove("hovering-pan"), e.classList.add("hovering-zoom")) : r.globals.panEnabled && (e.classList.remove("hovering-zoom"), e.classList.add("hovering-pan"));
        var u = Math.round(c / l);
        n && (u = Math.ceil(c / l), u -= 1);

        for (var g, f = null, p = null, x = [], b = 0; b < r.globals.seriesXvalues.length; b++) {
          x.push([r.globals.seriesXvalues[b][0] - 1e-6].concat(r.globals.seriesXvalues[b]));
        }

        return x = x.map(function (t) {
          return t.filter(function (t) {
            return t;
          });
        }), g = r.globals.seriesYvalues.map(function (t) {
          return t.filter(function (t) {
            return t;
          });
        }), r.globals.isXNumeric && (f = (p = this.closestInMultiArray(c, d, x, g)).index, u = p.j, null !== f && (x = r.globals.seriesXvalues[f], u = (p = this.closestInArray(c, x)).index)), (!u || u < 1) && (u = 0), {
          capturedSeries: f,
          j: u,
          hoverX: c,
          hoverY: d
        };
      }
    }, {
      key: "closestInMultiArray",
      value: function value(t, e, i, s) {
        var a = this.w,
            n = 0,
            r = null,
            o = -1;
        a.globals.series.length > 1 ? n = this.getFirstActiveXArray(i) : r = 0;
        var l = s[n][0],
            h = i[n][0],
            c = Math.abs(t - h),
            d = Math.abs(e - l),
            u = d + c;
        return s.map(function (a, n) {
          a.map(function (a, l) {
            var h = Math.abs(e - s[n][l]),
                g = Math.abs(t - i[n][l]),
                f = g + h;
            f < u && (u = f, c = g, d = h, r = n, o = l);
          });
        }), {
          index: r,
          j: o
        };
      }
    }, {
      key: "getFirstActiveXArray",
      value: function value(t) {
        for (var e = 0, i = new y(this.ctx), s = t.map(function (t, e) {
          return t.length > 0 ? e : -1;
        }), a = 0; a < s.length; a++) {
          var n = i.getSeriesTotalByIndex(a);

          if (-1 !== s[a] && 0 !== n && !i.seriesHaveSameValues(a)) {
            e = s[a];
            break;
          }
        }

        return e;
      }
    }, {
      key: "closestInArray",
      value: function value(t, e) {
        for (var i = e[0], s = null, a = Math.abs(t - i), n = 0; n < e.length; n++) {
          var r = Math.abs(t - e[n]);
          r < a && (a = r, i = e[n], s = n);
        }

        return {
          index: s
        };
      }
    }, {
      key: "isXoverlap",
      value: function value(t) {
        var e = [],
            i = this.w.globals.seriesX.filter(function (t) {
          return void 0 !== t[0];
        });
        if (i.length > 0) for (var s = 0; s < i.length - 1; s++) {
          void 0 !== i[s][t] && void 0 !== i[s + 1][t] && i[s][t] !== i[s + 1][t] && e.push("unEqual");
        }
        return 0 === e.length;
      }
    }, {
      key: "isinitialSeriesSameLen",
      value: function value() {
        for (var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++) {
          if (e[i].data.length !== e[i + 1].data.length) {
            t = !1;
            break;
          }
        }

        return t;
      }
    }, {
      key: "getBarsHeight",
      value: function value(t) {
        return c(t).reduce(function (t, e) {
          return t + e.getBBox().height;
        }, 0);
      }
    }, {
      key: "toggleAllTooltipSeriesGroups",
      value: function value(t) {
        var e = this.w,
            i = this.ttCtx;
        0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));

        for (var s = i.allTooltipSeriesGroups, a = 0; a < s.length; a++) {
          "enable" === t ? (s[a].classList.add("active"), s[a].style.display = e.config.tooltip.items.display) : (s[a].classList.remove("active"), s[a].style.display = "none");
        }
      }
    }]), t;
  }(),
      dt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ctx = i.ctx, this.ttCtx = i, this.tooltipUtil = new ct(i);
    }

    return s(t, [{
      key: "drawSeriesTexts",
      value: function value(t) {
        var e = t.shared,
            i = void 0 === e || e,
            s = t.ttItems,
            a = t.i,
            n = void 0 === a ? 0 : a,
            r = t.j,
            o = void 0 === r ? null : r;
        void 0 !== this.w.config.tooltip.custom ? this.handleCustomTooltip({
          i: n,
          j: o
        }) : this.toggleActiveInactiveSeries(i);
        var l = this.getValuesToPrint({
          i: n,
          j: o
        });
        this.printLabels({
          i: n,
          j: o,
          values: l,
          ttItems: s,
          shared: i
        });
        var h = this.ttCtx.getElTooltip();
        this.ttCtx.tooltipRect.ttWidth = h.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = h.getBoundingClientRect().height;
      }
    }, {
      key: "printLabels",
      value: function value(t) {
        var e,
            i = t.i,
            s = t.j,
            a = t.values,
            n = t.ttItems,
            r = t.shared,
            o = this.w,
            l = a.xVal,
            h = a.zVal,
            c = a.xAxisTTVal,
            d = "",
            u = o.globals.colors[i];
        null !== s && o.config.plotOptions.bar.distributed && (u = o.globals.colors[s]);

        for (var g = 0, f = o.globals.series.length - 1; g < o.globals.series.length; g++, f--) {
          var p = this.getFormatters(i);

          if (d = this.getSeriesName({
            fn: p.yLbTitleFormatter,
            index: i,
            seriesIndex: i,
            j: s
          }), r) {
            var x = o.config.tooltip.inverseOrder ? f : g;
            p = this.getFormatters(x), d = this.getSeriesName({
              fn: p.yLbTitleFormatter,
              index: x,
              seriesIndex: i,
              j: s
            }), u = o.globals.colors[x], e = p.yLbFormatter(o.globals.series[x][s], {
              series: o.globals.series,
              seriesIndex: x,
              dataPointIndex: s,
              w: o
            }), (this.ttCtx.hasBars() && o.config.chart.stacked && 0 === o.globals.series[x][s] || void 0 === o.globals.series[x][s]) && (e = void 0);
          } else e = p.yLbFormatter(o.globals.series[i][s], {
            series: o.globals.series,
            seriesIndex: i,
            dataPointIndex: s,
            w: o
          });

          null === s && (e = p.yLbFormatter(o.globals.series[i], o)), this.DOMHandling({
            t: g,
            ttItems: n,
            values: {
              val: e,
              xVal: l,
              xAxisTTVal: c,
              zVal: h
            },
            seriesName: d,
            shared: r,
            pColor: u
          });
        }
      }
    }, {
      key: "getFormatters",
      value: function value(t) {
        var e,
            i = this.w,
            s = i.globals.yLabelFormatters[t];
        return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (s = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (s = i.globals.ttVal.formatter, "function" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, "function" != typeof s && (s = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function (t) {
          return t;
        }), "function" != typeof e && (e = function e(t) {
          return t;
        }), {
          yLbFormatter: s,
          yLbTitleFormatter: e
        };
      }
    }, {
      key: "getSeriesName",
      value: function value(t) {
        var e = t.fn,
            i = t.index,
            s = t.seriesIndex,
            a = t.j,
            n = this.w;
        return e(String(n.globals.seriesNames[i]), {
          series: n.globals.series,
          seriesIndex: s,
          dataPointIndex: a,
          w: n
        });
      }
    }, {
      key: "DOMHandling",
      value: function value(t) {
        var e = t.t,
            i = t.ttItems,
            s = t.values,
            a = t.seriesName,
            n = t.shared,
            r = t.pColor,
            o = this.w,
            l = this.ttCtx,
            h = s.val,
            c = s.xVal,
            d = s.xAxisTTVal,
            u = s.zVal,
            g = null;
        g = i[e].children, o.config.tooltip.fillSeriesColor && (i[e].style.backgroundColor = r, g[0].style.display = "none"), l.showTooltipTitle && (null === l.tooltipTitle && (l.tooltipTitle = o.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), l.tooltipTitle.innerHTML = c), l.blxaxisTooltip && (l.xaxisTooltipText.innerHTML = "" !== d ? d : c);
        var f = i[e].querySelector(".apexcharts-tooltip-text-label");
        f && (f.innerHTML = a ? a + ": " : "");
        var p = i[e].querySelector(".apexcharts-tooltip-text-value");
        (p && (p.innerHTML = h), g[0] && g[0].classList.contains("apexcharts-tooltip-marker") && (g[0].style.backgroundColor = r), o.config.tooltip.marker.show || (g[0].style.display = "none"), null !== u) && (i[e].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = o.config.tooltip.z.title, i[e].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = u);
        n && g[0] && (null == h || o.globals.collapsedSeriesIndices.indexOf(e) > -1 ? g[0].parentNode.style.display = "none" : g[0].parentNode.style.display = o.config.tooltip.items.display);
      }
    }, {
      key: "toggleActiveInactiveSeries",
      value: function value(t) {
        var e = this.w;
        if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");else {
          this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
          var i = e.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
          i && (i.classList.add("active"), i.style.display = e.config.tooltip.items.display);
        }
      }
    }, {
      key: "getValuesToPrint",
      value: function value(t) {
        var e = t.i,
            i = t.j,
            s = this.w,
            a = this.ctx.series.filteredSeriesX(),
            n = "",
            r = null,
            o = null,
            l = {
          series: s.globals.series,
          seriesIndex: e,
          dataPointIndex: i,
          w: s
        },
            h = s.globals.ttZFormatter;
        null === i ? o = s.globals.series[e] : s.globals.isXNumeric ? (n = a[e][i], 0 === a[e].length && (n = a[this.tooltipUtil.getFirstActiveXArray(a)][i])) : n = void 0 !== s.globals.labels[i] ? s.globals.labels[i] : "";
        var c = n;
        s.globals.isXNumeric && "datetime" === s.config.xaxis.type ? n = new N(this.ctx).xLabelFormat(s.globals.ttKeyFormatter, c) : n = s.globals.xLabelFormatter(c, l);
        return void 0 !== s.config.tooltip.x.formatter && (n = s.globals.ttKeyFormatter(c, l)), s.globals.seriesZ.length > 0 && s.globals.seriesZ[0].length > 0 && (r = h(s.globals.seriesZ[e][i], s)), {
          val: o,
          xVal: n,
          xAxisTTVal: "function" == typeof s.config.xaxis.tooltip.formatter ? s.globals.xaxisTooltipFormatter(c, l) : n,
          zVal: r
        };
      }
    }, {
      key: "handleCustomTooltip",
      value: function value(t) {
        var e = t.i,
            i = t.j,
            s = this.w;
        this.ttCtx.getElTooltip().innerHTML = s.config.tooltip.custom({
          ctx: this.ctx,
          series: s.globals.series,
          seriesIndex: e,
          dataPointIndex: i,
          w: s
        });
      }
    }]), t;
  }(),
      ut = function () {
    function t(i) {
      e(this, t), this.ttCtx = i, this.ctx = i.ctx, this.w = i.w;
    }

    return s(t, [{
      key: "moveXCrosshairs",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            i = this.ttCtx,
            s = this.w,
            a = i.getElXCrosshairs(),
            n = t - i.xcrosshairsWidth / 2,
            r = s.globals.labels.slice().length;

        if (null !== e && (n = s.globals.gridWidth / r * e), "tickWidth" === s.config.xaxis.crosshairs.width || "barWidth" === s.config.xaxis.crosshairs.width ? n + i.xcrosshairsWidth > s.globals.gridWidth && (n = s.globals.gridWidth - i.xcrosshairsWidth) : null !== e && (n += s.globals.gridWidth / r / 2), n < 0 && (n = 0), n > s.globals.gridWidth && (n = s.globals.gridWidth), null !== a && (a.setAttribute("x", n), a.setAttribute("x1", n), a.setAttribute("x2", n), a.setAttribute("y2", s.globals.gridHeight), a.classList.add("active")), i.blxaxisTooltip) {
          var o = n;
          "tickWidth" !== s.config.xaxis.crosshairs.width && "barWidth" !== s.config.xaxis.crosshairs.width || (o = n + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(o);
        }
      }
    }, {
      key: "moveYCrosshairs",
      value: function value(t) {
        var e = this.ttCtx;
        null !== e.ycrosshairs && (f.setAttrs(e.ycrosshairs, {
          y1: t,
          y2: t
        }), f.setAttrs(e.ycrosshairsHidden, {
          y1: t,
          y2: t
        }));
      }
    }, {
      key: "moveXAxisTooltip",
      value: function value(t) {
        var e = this.w,
            i = this.ttCtx;

        if (null !== i.xaxisTooltip) {
          i.xaxisTooltip.classList.add("active");
          var s = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;

          if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {
            t += e.globals.translateX;
            var a;
            a = new f(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = a.width + "px", i.xaxisTooltip.style.left = t + "px", i.xaxisTooltip.style.top = s + "px";
          }
        }
      }
    }, {
      key: "moveYAxisTooltip",
      value: function value(t) {
        var e = this.w,
            i = this.ttCtx;
        null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
        var s = parseInt(i.ycrosshairsHidden.getAttribute("y1")),
            a = e.globals.translateY + s,
            n = i.yaxisTTEls[t].getBoundingClientRect().height,
            r = e.globals.translateYAxisX[t] - 2;
        e.config.yaxis[t].opposite && (r -= 26), a -= n / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (i.yaxisTTEls[t].classList.add("active"), i.yaxisTTEls[t].style.top = a + "px", i.yaxisTTEls[t].style.left = r + e.config.yaxis[t].tooltip.offsetX + "px") : i.yaxisTTEls[t].classList.remove("active");
      }
    }, {
      key: "moveTooltip",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            s = this.w,
            a = this.ttCtx,
            n = a.getElTooltip(),
            r = a.tooltipRect,
            o = null !== i ? parseInt(i) : 1,
            l = parseInt(t) + o + 5,
            h = parseInt(e) + o / 2;

        if (l > s.globals.gridWidth / 2 && (l = l - r.ttWidth - o - 15), l > s.globals.gridWidth - r.ttWidth - 10 && (l = s.globals.gridWidth - r.ttWidth), l < -20 && (l = -20), s.config.tooltip.followCursor) {
          var c = a.getElGrid().getBoundingClientRect();
          h = a.e.clientY + s.globals.translateY - c.top - r.ttHeight / 2;
        }

        var d = this.positionChecks(r, l, h);
        l = d.x, h = d.y, isNaN(l) || (l += s.globals.translateX, n.style.left = l + "px", n.style.top = h + "px");
      }
    }, {
      key: "positionChecks",
      value: function value(t, e, i) {
        var s = this.w;
        return t.ttHeight + i > s.globals.gridHeight && (i = s.globals.gridHeight - t.ttHeight + s.globals.translateY), i < 0 && (i = 0), {
          x: e,
          y: i
        };
      }
    }, {
      key: "moveMarkers",
      value: function value(t, e) {
        var i = this.w,
            s = this.ttCtx;
        if (i.globals.markers.size[t] > 0) for (var a = i.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t, "'] .apexcharts-marker")), n = 0; n < a.length; n++) {
          parseInt(a[n].getAttribute("rel")) === e && (s.marker.resetPointsSize(), s.marker.enlargeCurrentPoint(e, a[n]));
        } else s.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);
      }
    }, {
      key: "moveDynamicPointOnHover",
      value: function value(t, e) {
        var i,
            s,
            a = this.w,
            n = this.ttCtx,
            r = a.globals.pointsArray,
            o = a.config.markers.hover.size;
        void 0 === o && (o = a.globals.markers.size[e] + a.config.markers.hover.sizeOffset), i = r[e][t][0], s = r[e][t][1] ? r[e][t][1] : 0;
        var l = a.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e, "'] .apexcharts-series-markers circle"));
        l && (l.setAttribute("r", o), l.setAttribute("cx", i), l.setAttribute("cy", s)), this.moveXCrosshairs(i), n.fixedTooltip || this.moveTooltip(i, s, o);
      }
    }, {
      key: "moveDynamicPointsOnHover",
      value: function value(t) {
        var e,
            i = this.ttCtx,
            s = i.w,
            a = 0,
            n = 0,
            r = s.globals.pointsArray;
        e = new G(this.ctx).getActiveSeriesIndex();
        var o = s.config.markers.hover.size;
        void 0 === o && (o = s.globals.markers.size[e] + s.config.markers.hover.sizeOffset), r[e] && (a = r[e][t][0], n = r[e][t][1]);
        var l = null,
            h = i.getAllMarkers();
        if (null !== (l = null !== h ? h : s.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers circle"))) for (var c = 0; c < l.length; c++) {
          var d = r[c];

          if (d && d.length) {
            var u = r[c][t][1];
            l[c].setAttribute("cx", a);
            var g = parseInt(l[c].parentNode.parentNode.parentNode.getAttribute("data:realIndex"));
            null !== u ? (l[g] && l[g].setAttribute("r", o), l[g] && l[g].setAttribute("cy", u)) : l[g] && l[g].setAttribute("r", 0);
          }
        }

        if (this.moveXCrosshairs(a), !i.fixedTooltip) {
          var f = n || s.globals.gridHeight;
          this.moveTooltip(a, f, o);
        }
      }
    }, {
      key: "moveStickyTooltipOverBars",
      value: function value(t) {
        var e,
            i = this.w,
            s = this.ttCtx,
            a = i.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='1'] path[j='".concat(t, "'], .apexcharts-candlestick-series .apexcharts-series[rel='1'] path[j='").concat(t, "'], .apexcharts-rangebar-series .apexcharts-series[rel='1'] path[j='").concat(t, "']")),
            n = a ? parseFloat(a.getAttribute("cx")) : 0,
            r = a ? parseFloat(a.getAttribute("barWidth")) : 0;
        i.globals.isXNumeric ? n -= r / 2 : (n = s.xAxisTicksPositions[t - 1] + s.dataPointsDividedWidth / 2, isNaN(n) && (n = s.xAxisTicksPositions[t] - s.dataPointsDividedWidth / 2));
        var o = s.getElGrid().getBoundingClientRect();

        if (e = s.e.clientY - o.top - s.tooltipRect.ttHeight / 2, this.moveXCrosshairs(n), !s.fixedTooltip) {
          var l = e || i.globals.gridHeight;
          this.moveTooltip(n, l);
        }
      }
    }]), t;
  }(),
      gt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i, this.ctx = i.ctx, this.tooltipPosition = new ut(i);
    }

    return s(t, [{
      key: "drawDynamicPoints",
      value: function value() {
        for (var t = this.w, e = new f(this.ctx), i = new C(this.ctx), s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series"), a = 0; a < s.length; a++) {
          var n = parseInt(s[a].getAttribute("data:realIndex")),
              r = t.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(n, "'] .apexcharts-series-markers-wrap"));

          if (null !== r) {
            var o = void 0,
                l = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
            "line" !== t.config.chart.type && "area" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (l += " no-pointer-events");
            var h = i.getMarkerConfig(l, n);
            (o = e.drawMarker(0, 0, h)).node.setAttribute("default-marker-size", 0);
            var c = document.createElementNS(t.globals.SVGNS, "g");
            c.classList.add("apexcharts-series-markers"), c.appendChild(o.node), r.appendChild(c);
          }
        }
      }
    }, {
      key: "enlargeCurrentPoint",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
            a = this.w;
        "bubble" !== a.config.chart.type && this.newPointSize(t, e);
        var n = e.getAttribute("cx"),
            r = e.getAttribute("cy");

        if (null !== i && null !== s && (n = i, r = s), this.tooltipPosition.moveXCrosshairs(n), !this.fixedTooltip) {
          if ("radar" === a.config.chart.type) {
            var o = this.ttCtx.getElGrid().getBoundingClientRect();
            n = this.ttCtx.e.clientX - o.left;
          }

          this.tooltipPosition.moveTooltip(n, r, a.config.markers.hover.size);
        }
      }
    }, {
      key: "enlargePoints",
      value: function value(t) {
        for (var e = this.w, i = this.ttCtx, s = t, a = e.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), n = e.config.markers.hover.size, r = 0; r < a.length; r++) {
          var o = a[r].getAttribute("rel"),
              l = a[r].getAttribute("index");

          if (void 0 === n && (n = e.globals.markers.size[l] + e.config.markers.hover.sizeOffset), s === parseInt(o)) {
            this.newPointSize(s, a[r]);
            var h = a[r].getAttribute("cx"),
                c = a[r].getAttribute("cy");
            this.tooltipPosition.moveXCrosshairs(h), i.fixedTooltip || this.tooltipPosition.moveTooltip(h, c, n);
          } else this.oldPointSize(a[r]);
        }
      }
    }, {
      key: "newPointSize",
      value: function value(t, e) {
        var i = this.w,
            s = i.config.markers.hover.size,
            a = null;
        a = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;
        var n = parseInt(a.getAttribute("index"));
        void 0 === s && (s = i.globals.markers.size[n] + i.config.markers.hover.sizeOffset), a.setAttribute("r", s);
      }
    }, {
      key: "oldPointSize",
      value: function value(t) {
        var e = parseInt(t.getAttribute("default-marker-size"));
        t.setAttribute("r", e);
      }
    }, {
      key: "resetPointsSize",
      value: function value() {
        for (var t = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e = 0; e < t.length; e++) {
          var i = parseInt(t[e].getAttribute("default-marker-size"));
          d.isNumber(i) ? t[e].setAttribute("r", i) : t[e].setAttribute("r", 0);
        }
      }
    }]), t;
  }(),
      ft = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i;
    }

    return s(t, [{
      key: "getAttr",
      value: function value(t, e) {
        return parseFloat(t.target.getAttribute(e));
      }
    }, {
      key: "handleHeatTooltip",
      value: function value(t) {
        var e = t.e,
            i = t.opt,
            s = t.x,
            a = t.y,
            n = this.ttCtx,
            r = this.w;

        if (e.target.classList.contains("apexcharts-heatmap-rect")) {
          var o = this.getAttr(e, "i"),
              l = this.getAttr(e, "j"),
              h = this.getAttr(e, "cx"),
              c = this.getAttr(e, "cy"),
              d = this.getAttr(e, "width"),
              u = this.getAttr(e, "height");

          if (n.tooltipLabels.drawSeriesTexts({
            ttItems: i.ttItems,
            i: o,
            j: l,
            shared: !1
          }), s = h + n.tooltipRect.ttWidth / 2 + d, a = c + n.tooltipRect.ttHeight / 2 - u / 2, n.tooltipPosition.moveXCrosshairs(h + d / 2), s > r.globals.gridWidth / 2 && (s = h - n.tooltipRect.ttWidth / 2 + d), n.w.config.tooltip.followCursor) {
            var g = n.getElGrid().getBoundingClientRect();
            a = n.e.clientY - g.top + r.globals.translateY / 2 - 10;
          }
        }

        return {
          x: s,
          y: a
        };
      }
    }, {
      key: "handleMarkerTooltip",
      value: function value(t) {
        var e,
            i,
            s = t.e,
            a = t.opt,
            n = t.x,
            r = t.y,
            o = this.w,
            l = this.ttCtx;

        if (s.target.classList.contains("apexcharts-marker")) {
          var h = parseInt(a.paths.getAttribute("cx")),
              c = parseInt(a.paths.getAttribute("cy")),
              u = parseFloat(a.paths.getAttribute("val"));

          if (i = parseInt(a.paths.getAttribute("rel")), e = parseInt(a.paths.parentNode.parentNode.parentNode.getAttribute("rel")) - 1, l.intersect) {
            var g = d.findAncestor(a.paths, "apexcharts-series");
            g && (e = parseInt(g.getAttribute("data:realIndex")));
          }

          if (l.tooltipLabels.drawSeriesTexts({
            ttItems: a.ttItems,
            i: e,
            j: i,
            shared: !l.showOnIntersect && o.config.tooltip.shared
          }), "mouseup" === s.type && l.markerClick(s, e, i), n = h, r = c + o.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {
            var f = l.getElGrid().getBoundingClientRect();
            r = l.e.clientY + o.globals.translateY - f.top;
          }

          u < 0 && (r = c), l.marker.enlargeCurrentPoint(i, a.paths, n, r);
        }

        return {
          x: n,
          y: r
        };
      }
    }, {
      key: "handleBarTooltip",
      value: function value(t) {
        var e,
            i,
            s = t.e,
            a = t.opt,
            n = this.w,
            r = this.ttCtx,
            o = r.getElTooltip(),
            l = 0,
            h = 0,
            c = 0,
            d = this.getBarTooltipXY({
          e: s,
          opt: a
        });
        e = d.i;
        var u = d.barHeight,
            g = d.j;

        if (n.globals.isBarHorizontal && r.hasBars() || !n.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(n.config.stroke.width) ? n.config.stroke.width[e] : n.config.stroke.width, l = h) : n.globals.comboCharts || n.config.tooltip.shared || (l /= 2), isNaN(c) && (c = n.globals.svgHeight - r.tooltipRect.ttHeight), h + r.tooltipRect.ttWidth > n.globals.gridWidth ? h -= r.tooltipRect.ttWidth : h < 0 && (h += r.tooltipRect.ttWidth), r.w.config.tooltip.followCursor) {
          var f = r.getElGrid().getBoundingClientRect();
          c = r.e.clientY - f.top;
        }

        if (null === r.tooltip && (r.tooltip = n.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), n.config.tooltip.shared || (n.globals.comboChartsHasBars ? r.tooltipPosition.moveXCrosshairs(l + i / 2) : r.tooltipPosition.moveXCrosshairs(l)), !r.fixedTooltip && (!n.config.tooltip.shared || n.globals.isBarHorizontal && r.hasBars())) {
          x && (h = n.globals.gridWidth - h), o.style.left = h + n.globals.translateX + "px";
          var p = parseInt(a.paths.parentNode.getAttribute("data:realIndex")),
              x = n.globals.isMultipleYAxis ? n.config.yaxis[p] && n.config.yaxis[p].reversed : n.config.yaxis[0].reversed;
          !x || n.globals.isBarHorizontal && r.hasBars() || (c = c + u - 2 * (n.globals.series[e][g] < 0 ? u : 0)), r.tooltipRect.ttHeight + c > n.globals.gridHeight ? (c = n.globals.gridHeight - r.tooltipRect.ttHeight + n.globals.translateY, o.style.top = c + "px") : o.style.top = c + n.globals.translateY - r.tooltipRect.ttHeight / 2 + "px";
        }
      }
    }, {
      key: "getBarTooltipXY",
      value: function value(t) {
        var e = t.e,
            i = t.opt,
            s = this.w,
            a = null,
            n = this.ttCtx,
            r = 0,
            o = 0,
            l = 0,
            h = 0,
            c = 0,
            d = e.target.classList;

        if (d.contains("apexcharts-bar-area") || d.contains("apexcharts-candlestick-area") || d.contains("apexcharts-rangebar-area")) {
          var u = e.target,
              g = u.getBoundingClientRect(),
              f = i.elGrid.getBoundingClientRect(),
              p = g.height;
          c = g.height;
          var x = g.width,
              b = parseInt(u.getAttribute("cx")),
              m = parseInt(u.getAttribute("cy"));
          h = parseFloat(u.getAttribute("barWidth"));
          var v = "touchmove" === e.type ? e.touches[0].clientX : e.clientX;
          a = parseInt(u.getAttribute("j")), r = parseInt(u.parentNode.getAttribute("rel")) - 1, s.globals.comboCharts && (r = parseInt(u.parentNode.getAttribute("data:realIndex"))), n.tooltipLabels.drawSeriesTexts({
            ttItems: i.ttItems,
            i: r,
            j: a,
            shared: !n.showOnIntersect && s.config.tooltip.shared
          }), s.config.tooltip.followCursor ? s.globals.isBarHorizontal ? (o = v - f.left + 15, l = m - n.dataPointsDividedHeight + p / 2 - n.tooltipRect.ttHeight / 2) : (o = s.globals.isXNumeric ? b - x / 2 : b - n.dataPointsDividedWidth + x / 2, l = e.clientY - f.top - n.tooltipRect.ttHeight / 2 - 15) : s.globals.isBarHorizontal ? ((o = b) < n.xyRatios.baseLineInvertedY && (o = b - n.tooltipRect.ttWidth), l = m - n.dataPointsDividedHeight + p / 2 - n.tooltipRect.ttHeight / 2) : (o = s.globals.isXNumeric ? b - x / 2 : b - n.dataPointsDividedWidth + x / 2, l = m);
        }

        return {
          x: o,
          y: l,
          barHeight: c,
          barWidth: h,
          i: r,
          j: a
        };
      }
    }]), t;
  }(),
      pt = function () {
    function t(i) {
      e(this, t), this.w = i.w, this.ttCtx = i;
    }

    return s(t, [{
      key: "drawXaxisTooltip",
      value: function value() {
        var t = this.w,
            e = this.ttCtx,
            i = "bottom" === t.config.xaxis.position;
        e.xaxisOffY = i ? t.globals.gridHeight + 1 : 1;
        var s = i ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
            a = t.globals.dom.elWrap;
        e.blxaxisTooltip && null === t.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e.xaxisTooltip = document.createElement("div"), e.xaxisTooltip.setAttribute("class", s + " " + t.config.tooltip.theme), a.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement("div"), e.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));
      }
    }, {
      key: "drawYaxisTooltip",
      value: function value() {
        for (var t = this.w, e = this.ttCtx, i = 0; i < t.config.yaxis.length; i++) {
          var s = t.config.yaxis[i].opposite || t.config.yaxis[i].crosshairs.opposite;
          e.yaxisOffX = s ? t.globals.gridWidth + 1 : 1;
          var a = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i, s ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left"),
              n = t.globals.dom.elWrap;
          if (e.blyaxisTooltip) null === t.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(i)) && (e.yaxisTooltip = document.createElement("div"), e.yaxisTooltip.setAttribute("class", a + " " + t.config.tooltip.theme), n.appendChild(e.yaxisTooltip), 0 === i && (e.yaxisTooltipText = []), e.yaxisTooltipText.push(document.createElement("div")), e.yaxisTooltipText[i].classList.add("apexcharts-yaxistooltip-text"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[i]));
        }
      }
    }, {
      key: "setXCrosshairWidth",
      value: function value() {
        var t = this.w,
            e = this.ttCtx,
            i = e.getElXCrosshairs();

        if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width), t.globals.comboCharts) {
          var s = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");

          if (null !== s && "barWidth" === t.config.xaxis.crosshairs.width) {
            var a = parseFloat(s.getAttribute("barWidth"));
            e.xcrosshairsWidth = a;
          } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
            var n = t.globals.labels.length;
            e.xcrosshairsWidth = t.globals.gridWidth / n;
          }
        } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
          var r = t.globals.labels.length;
          e.xcrosshairsWidth = t.globals.gridWidth / r;
        } else if ("barWidth" === t.config.xaxis.crosshairs.width) {
          var o = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");

          if (null !== o) {
            var l = parseFloat(o.getAttribute("barWidth"));
            e.xcrosshairsWidth = l;
          } else e.xcrosshairsWidth = 1;
        }

        t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute("width", e.xcrosshairsWidth);
      }
    }, {
      key: "handleYCrosshair",
      value: function value() {
        var t = this.w,
            e = this.ttCtx;
        e.ycrosshairs = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden");
      }
    }, {
      key: "drawYaxisTooltipText",
      value: function value(t, e, i) {
        var s = this.ttCtx,
            a = this.w,
            n = a.globals.yLabelFormatters[t];

        if (s.blyaxisTooltip) {
          var r = s.getElGrid().getBoundingClientRect(),
              o = (e - r.top) * i.yRatio[t],
              l = a.globals.maxYArr[t] - a.globals.minYArr[t],
              h = a.globals.minYArr[t] + (l - o);
          s.tooltipPosition.moveYCrosshairs(e - r.top), s.yaxisTooltipText[t].innerHTML = n(h), s.tooltipPosition.moveYAxisTooltip(t);
        }
      }
    }]), t;
  }(),
      xt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
      var s = this.w;
      this.tConfig = s.config.tooltip, this.tooltipUtil = new ct(this), this.tooltipLabels = new dt(this), this.tooltipPosition = new ut(this), this.marker = new gt(this), this.intersect = new ft(this), this.axesTooltip = new pt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !s.globals.isBarHorizontal && this.tConfig.shared;
    }

    return s(t, [{
      key: "getElTooltip",
      value: function value(t) {
        return t || (t = this), t.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip");
      }
    }, {
      key: "getElXCrosshairs",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs");
      }
    }, {
      key: "getElGrid",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid");
      }
    }, {
      key: "drawTooltip",
      value: function value(t) {
        var e = this.w;
        this.xyRatios = t, this.blxaxisTooltip = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.blyaxisTooltip = e.config.yaxis[0].tooltip.enabled && e.globals.axisCharts, this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);
        var i = document.createElement("div");

        if (i.classList.add("apexcharts-tooltip"), i.classList.add(this.tConfig.theme), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {
          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
          var s = new H(this.ctx);
          this.xAxisTicksPositions = s.getXAxisTicksPositions();
        }

        if ((e.globals.comboCharts && !this.tConfig.shared || this.tConfig.intersect && !this.tConfig.shared || ("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type) && !this.tConfig.shared) && (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {
          this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));
          var a = e.globals.series.length;
          (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (a = this.showOnIntersect ? 1 : e.globals.series.length), this.ttItems = this.createTTElements(a), this.addSVGEvents();
        }
      }
    }, {
      key: "createTTElements",
      value: function value(t) {
        for (var e = this.w, i = [], s = this.getElTooltip(), a = 0; a < t; a++) {
          var n = document.createElement("div");
          n.classList.add("apexcharts-tooltip-series-group"), this.tConfig.shared && this.tConfig.enabledOnSeries && Array.isArray(this.tConfig.enabledOnSeries) && this.tConfig.enabledOnSeries.indexOf(a) < 0 && n.classList.add("apexcharts-tooltip-series-group-hidden");
          var r = document.createElement("span");
          r.classList.add("apexcharts-tooltip-marker"), r.style.backgroundColor = e.globals.colors[a], n.appendChild(r);
          var o = document.createElement("div");
          o.classList.add("apexcharts-tooltip-text"), o.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, o.style.fontSize = this.tConfig.style.fontSize;
          var l = document.createElement("div");
          l.classList.add("apexcharts-tooltip-y-group");
          var h = document.createElement("span");
          h.classList.add("apexcharts-tooltip-text-label"), l.appendChild(h);
          var c = document.createElement("span");
          c.classList.add("apexcharts-tooltip-text-value"), l.appendChild(c);
          var d = document.createElement("div");
          d.classList.add("apexcharts-tooltip-z-group");
          var u = document.createElement("span");
          u.classList.add("apexcharts-tooltip-text-z-label"), d.appendChild(u);
          var g = document.createElement("span");
          g.classList.add("apexcharts-tooltip-text-z-value"), d.appendChild(g), o.appendChild(l), o.appendChild(d), n.appendChild(o), s.appendChild(n), i.push(n);
        }

        return i;
      }
    }, {
      key: "addSVGEvents",
      value: function value() {
        var t = this.w,
            e = t.config.chart.type,
            i = this.getElTooltip(),
            s = !("bar" !== e && "candlestick" !== e && "rangeBar" !== e),
            a = t.globals.dom.Paper.node,
            n = this.getElGrid();
        n && (this.seriesBound = n.getBoundingClientRect());
        var r,
            o = [],
            l = [],
            h = {
          hoverArea: a,
          elGrid: n,
          tooltipEl: i,
          tooltipY: o,
          tooltipX: l,
          ttItems: this.ttItems
        };
        if (t.globals.axisCharts && ("area" === e || "line" === e || "scatter" === e || "bubble" === e ? r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : s ? r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" === e ? r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap") : "radar" === e && (r = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-marker")), r && r.length)) for (var c = 0; c < r.length; c++) {
          o.push(r[c].getAttribute("cy")), l.push(r[c].getAttribute("cx"));
        }
        if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || s && this.hasBars() && this.tConfig.shared) this.addPathsEventListeners([a], h);else if (s && !t.globals.comboCharts) this.addBarsEventListeners(h);else if ("bubble" === e || "scatter" === e || "radar" === e || this.showOnIntersect && ("area" === e || "line" === e)) this.addPointsEventsListeners(h);else if (!t.globals.axisCharts || "heatmap" === e) {
          var d = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
          this.addPathsEventListeners(d, h);
        }

        if (this.showOnIntersect) {
          var u = t.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker");
          u.length > 0 && this.addPathsEventListeners(u, h);
          var g = t.globals.dom.baseEl.querySelectorAll(".apexcharts-area-series .apexcharts-marker");
          g.length > 0 && this.addPathsEventListeners(g, h), this.hasBars() && !this.tConfig.shared && this.addBarsEventListeners(h);
        }
      }
    }, {
      key: "drawFixedTooltipRect",
      value: function value() {
        var t = this.w,
            e = this.getElTooltip(),
            i = e.getBoundingClientRect(),
            s = i.width + 10,
            a = i.height + 10,
            n = this.tConfig.fixed.offsetX,
            r = this.tConfig.fixed.offsetY;
        return this.tConfig.fixed.position.toLowerCase().indexOf("right") > -1 && (n = n + t.globals.svgWidth - s + 10), this.tConfig.fixed.position.toLowerCase().indexOf("bottom") > -1 && (r = r + t.globals.svgHeight - a - 10), e.style.left = n + "px", e.style.top = r + "px", {
          x: n,
          y: r,
          ttWidth: s,
          ttHeight: a
        };
      }
    }, {
      key: "addPointsEventsListeners",
      value: function value(t) {
        var e = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker");
        this.addPathsEventListeners(e, t);
      }
    }, {
      key: "addBarsEventListeners",
      value: function value(t) {
        var e = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-rangebar-area");
        this.addPathsEventListeners(e, t);
      }
    }, {
      key: "addPathsEventListeners",
      value: function value(t, e) {
        for (var i = this, s = this, a = function a(_a) {
          var n = {
            paths: t[_a],
            tooltipEl: e.tooltipEl,
            tooltipY: e.tooltipY,
            tooltipX: e.tooltipX,
            elGrid: e.elGrid,
            hoverArea: e.hoverArea,
            ttItems: e.ttItems
          };
          i.w.globals.tooltipOpts = n;
          ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map(function (e) {
            return t[_a].addEventListener(e, s.seriesHover.bind(s, n), {
              capture: !1,
              passive: !0
            });
          });
        }, n = 0; n < t.length; n++) {
          a(n);
        }
      }
    }, {
      key: "seriesHover",
      value: function value(t, e) {
        var i = this,
            s = [],
            a = this.w;
        a.config.chart.group && (s = this.ctx.getGroupedCharts()), a.globals.axisCharts && (a.globals.minX === -1 / 0 && a.globals.maxX === 1 / 0 || 0 === a.globals.dataPoints) || (s.length ? s.forEach(function (s) {
          var a = i.getElTooltip(s),
              n = {
            paths: t.paths,
            tooltipEl: a,
            tooltipY: t.tooltipY,
            tooltipX: t.tooltipX,
            elGrid: t.elGrid,
            hoverArea: t.hoverArea,
            ttItems: s.w.globals.tooltip.ttItems
          };
          s.w.globals.minX === i.w.globals.minX && s.w.globals.maxX === i.w.globals.maxX && s.w.globals.tooltip.seriesHoverByContext({
            chartCtx: s,
            ttCtx: s.w.globals.tooltip,
            opt: n,
            e: e
          });
        }) : this.seriesHoverByContext({
          chartCtx: this.ctx,
          ttCtx: this.w.globals.tooltip,
          opt: t,
          e: e
        }));
      }
    }, {
      key: "seriesHoverByContext",
      value: function value(t) {
        var e = t.chartCtx,
            i = t.ttCtx,
            s = t.opt,
            a = t.e,
            n = e.w,
            r = this.getElTooltip();
        (i.tooltipRect = {
          x: 0,
          y: 0,
          ttWidth: r.getBoundingClientRect().width,
          ttHeight: r.getBoundingClientRect().height
        }, i.e = a, !i.hasBars() || n.globals.comboCharts || i.isBarShared) || this.tConfig.onDatasetHover.highlightDataSeries && new G(e).toggleSeriesOnHover(a, a.target.parentNode);
        i.fixedTooltip && i.drawFixedTooltipRect(), n.globals.axisCharts ? i.axisChartsTooltips({
          e: a,
          opt: s,
          tooltipRect: i.tooltipRect
        }) : i.nonAxisChartsTooltips({
          e: a,
          opt: s,
          tooltipRect: i.tooltipRect
        });
      }
    }, {
      key: "axisChartsTooltips",
      value: function value(t) {
        var e,
            i,
            s,
            a = t.e,
            n = t.opt,
            r = this.w,
            o = null,
            l = n.elGrid.getBoundingClientRect(),
            h = "touchmove" === a.type ? a.touches[0].clientX : a.clientX,
            c = "touchmove" === a.type ? a.touches[0].clientY : a.clientY;
        if (this.clientY = c, this.clientX = h, c < l.top || c > l.top + l.height) this.handleMouseOut(n);else {
          if (Array.isArray(this.tConfig.enabledOnSeries)) {
            var d = parseInt(n.paths.getAttribute("index"));
            if (this.tConfig.enabledOnSeries.indexOf(d) < 0) return void this.handleMouseOut(n);
          }

          var u = this.getElTooltip(),
              g = this.getElXCrosshairs(),
              f = r.globals.xyCharts || "bar" === r.config.chart.type && !r.globals.isBarHorizontal && this.hasBars() && this.tConfig.shared || r.globals.comboCharts && this.hasBars;

          if (r.globals.isBarHorizontal && this.hasBars() && (f = !1), "mousemove" === a.type || "touchmove" === a.type || "mouseup" === a.type) {
            if (null !== g && g.classList.add("active"), null !== this.ycrosshairs && this.blyaxisTooltip && this.ycrosshairs.classList.add("active"), f && !this.showOnIntersect) {
              e = (o = this.tooltipUtil.getNearestValues({
                context: this,
                hoverArea: n.hoverArea,
                elGrid: n.elGrid,
                clientX: h,
                clientY: c,
                hasBars: this.hasBars
              })).j;
              var p = o.capturedSeries;
              if (o.hoverX < 0 || o.hoverX > r.globals.gridWidth) return void this.handleMouseOut(n);

              if (null !== p) {
                if (null === r.globals.series[p][e]) return void n.tooltipEl.classList.remove("active");
                void 0 !== r.globals.series[p][e] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(e) && this.tooltipUtil.isinitialSeriesSameLen() ? this.create(a, this, p, e, n.ttItems) : this.create(a, this, p, e, n.ttItems, !1) : this.tooltipUtil.isXoverlap(e) && this.create(a, this, 0, e, n.ttItems);
              } else this.tooltipUtil.isXoverlap(e) && this.create(a, this, 0, e, n.ttItems);
            } else if ("heatmap" === r.config.chart.type) {
              var x = this.intersect.handleHeatTooltip({
                e: a,
                opt: n,
                x: i,
                y: s
              });
              i = x.x, s = x.y, u.style.left = i + "px", u.style.top = s + "px";
            } else this.hasBars && this.intersect.handleBarTooltip({
              e: a,
              opt: n
            }), this.hasMarkers && this.intersect.handleMarkerTooltip({
              e: a,
              opt: n,
              x: i,
              y: s
            });

            if (this.blyaxisTooltip) for (var b = 0; b < r.config.yaxis.length; b++) {
              this.axesTooltip.drawYaxisTooltipText(b, c, this.xyRatios);
            }
            n.tooltipEl.classList.add("active");
          } else "mouseout" !== a.type && "touchend" !== a.type || this.handleMouseOut(n);
        }
      }
    }, {
      key: "nonAxisChartsTooltips",
      value: function value(t) {
        var e = t.e,
            i = t.opt,
            s = t.tooltipRect,
            a = this.w,
            n = i.paths.getAttribute("rel"),
            r = this.getElTooltip(),
            o = a.globals.dom.elWrap.getBoundingClientRect();

        if ("mousemove" === e.type || "touchmove" === e.type) {
          r.classList.add("active"), this.tooltipLabels.drawSeriesTexts({
            ttItems: i.ttItems,
            i: parseInt(n) - 1,
            shared: !1
          });
          var l = a.globals.clientX - o.left - s.ttWidth / 2,
              h = a.globals.clientY - o.top - s.ttHeight - 10;
          r.style.left = l + "px", r.style.top = h + "px";
        } else "mouseout" !== e.type && "touchend" !== e.type || r.classList.remove("active");
      }
    }, {
      key: "deactivateHoverFilter",
      value: function value() {
        for (var t = this.w, e = new f(this.ctx), i = t.globals.dom.Paper.select(".apexcharts-bar-area"), s = 0; s < i.length; s++) {
          e.pathMouseLeave(i[s]);
        }
      }
    }, {
      key: "handleMouseOut",
      value: function value(t) {
        var e = this.w,
            i = this.getElXCrosshairs();

        if (t.tooltipEl.classList.remove("active"), this.deactivateHoverFilter(), "bubble" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove("active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("active"), this.blxaxisTooltip && this.xaxisTooltip.classList.remove("active"), this.blyaxisTooltip) {
          null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));

          for (var s = 0; s < this.yaxisTTEls.length; s++) {
            this.yaxisTTEls[s].classList.remove("active");
          }
        }
      }
    }, {
      key: "getElMarkers",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers");
      }
    }, {
      key: "getAllMarkers",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker");
      }
    }, {
      key: "hasMarkers",
      value: function value() {
        return this.getElMarkers().length > 0;
      }
    }, {
      key: "getElBars",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-rangebar-series");
      }
    }, {
      key: "hasBars",
      value: function value() {
        return this.getElBars().length > 0;
      }
    }, {
      key: "markerClick",
      value: function value(t, e, i) {
        var s = this.w;
        "function" == typeof s.config.chart.events.markerClick && s.config.chart.events.markerClick(t, this.ctx, {
          seriesIndex: e,
          dataPointIndex: i,
          w: s
        }), this.ctx.fireEvent("markerClick", [t, this.ctx, {
          seriesIndex: e,
          dataPointIndex: i,
          w: s
        }]);
      }
    }, {
      key: "create",
      value: function value(t, e, i, s, a) {
        var n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
            r = this.w,
            o = e;
        "mouseup" === t.type && this.markerClick(t, i, s), null === n && (n = this.tConfig.shared);
        var l = this.hasMarkers(),
            h = this.getElBars();

        if (n) {
          if (o.tooltipLabels.drawSeriesTexts({
            ttItems: a,
            i: i,
            j: s,
            shared: !this.showOnIntersect && this.tConfig.shared
          }), l && (r.globals.markers.largestSize > 0 ? o.marker.enlargePoints(s) : o.tooltipPosition.moveDynamicPointsOnHover(s)), this.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h), this.barSeriesHeight > 0)) {
            var c = new f(this.ctx),
                d = r.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(s, "']"));
            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(s);

            for (var u = 0; u < d.length; u++) {
              c.pathMouseEnter(d[u]);
            }
          }
        } else o.tooltipLabels.drawSeriesTexts({
          shared: !1,
          ttItems: a,
          i: i,
          j: s
        }), this.hasBars() && o.tooltipPosition.moveStickyTooltipOverBars(s), l && o.tooltipPosition.moveMarkers(i, s);
      }
    }]), t;
  }(),
      bt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w, this.ev = this.w.config.chart.events, this.localeValues = this.w.globals.locale.toolbar;
    }

    return s(t, [{
      key: "createToolbar",
      value: function value() {
        var t = this.w,
            e = document.createElement("div");
        if (e.setAttribute("class", "apexcharts-toolbar"), t.globals.dom.elWrap.appendChild(e), this.elZoom = document.createElement("div"), this.elZoomIn = document.createElement("div"), this.elZoomOut = document.createElement("div"), this.elPan = document.createElement("div"), this.elSelection = document.createElement("div"), this.elZoomReset = document.createElement("div"), this.elMenuIcon = document.createElement("div"), this.elMenu = document.createElement("div"), this.elCustomIcons = [], this.t = t.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var i = 0; i < this.t.customIcons.length; i++) {
          this.elCustomIcons.push(document.createElement("div"));
        }
        this.elMenuItems = [];
        var s = [];
        this.t.zoomin && t.config.chart.zoom.enabled && s.push({
          el: this.elZoomIn,
          icon: "string" == typeof this.t.zoomin ? this.t.zoomin : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n',
          title: this.localeValues.zoomIn,
          "class": "apexcharts-zoom-in-icon"
        }), this.t.zoomout && t.config.chart.zoom.enabled && s.push({
          el: this.elZoomOut,
          icon: "string" == typeof this.t.zoomout ? this.t.zoomout : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n',
          title: this.localeValues.zoomOut,
          "class": "apexcharts-zoom-out-icon"
        }), this.t.zoom && t.config.chart.zoom.enabled && s.push({
          el: this.elZoom,
          icon: "string" == typeof this.t.zoom ? this.t.zoom : '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>',
          title: this.localeValues.selectionZoom,
          "class": t.globals.isTouchDevice ? "hidden" : "apexcharts-zoom-icon"
        }), this.t.selection && t.config.chart.selection.enabled && s.push({
          el: this.elSelection,
          icon: "string" == typeof this.t.selection ? this.t.selection : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
          title: this.localeValues.selection,
          "class": t.globals.isTouchDevice ? "hidden" : "apexcharts-selection-icon"
        }), this.t.pan && t.config.chart.zoom.enabled && s.push({
          el: this.elPan,
          icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
          title: this.localeValues.pan,
          "class": t.globals.isTouchDevice ? "hidden" : "apexcharts-pan-icon"
        }), this.t.reset && t.config.chart.zoom.enabled && s.push({
          el: this.elZoomReset,
          icon: "string" == typeof this.t.reset ? this.t.reset : '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>',
          title: this.localeValues.reset,
          "class": "apexcharts-reset-zoom-icon"
        }), this.t.download && s.push({
          el: this.elMenuIcon,
          icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
          title: this.localeValues.menu,
          "class": "apexcharts-menu-icon"
        });

        for (var a = 0; a < this.elCustomIcons.length; a++) {
          s.push({
            el: this.elCustomIcons[a],
            icon: this.t.customIcons[a].icon,
            title: this.t.customIcons[a].title,
            index: this.t.customIcons[a].index,
            "class": "apexcharts-toolbar-custom-icon " + this.t.customIcons[a]["class"]
          });
        }

        s.forEach(function (t, e) {
          t.index && d.moveIndexInArray(s, e, t.index);
        });

        for (var n = 0; n < s.length; n++) {
          f.setAttrs(s[n].el, {
            "class": s[n]["class"],
            title: s[n].title
          }), s[n].el.innerHTML = s[n].icon, e.appendChild(s[n].el);
        }

        e.appendChild(this.elMenu), f.setAttrs(this.elMenu, {
          "class": "apexcharts-menu"
        });

        for (var r = [{
          name: "exportSVG",
          title: this.localeValues.exportToSVG
        }, {
          name: "exportPNG",
          title: this.localeValues.exportToPNG
        }], o = 0; o < r.length; o++) {
          this.elMenuItems.push(document.createElement("div")), this.elMenuItems[o].innerHTML = r[o].title, f.setAttrs(this.elMenuItems[o], {
            "class": "apexcharts-menu-item ".concat(r[o].name),
            title: r[o].title
          }), this.elMenu.appendChild(this.elMenuItems[o]);
        }

        t.globals.zoomEnabled ? this.elZoom.classList.add("selected") : t.globals.panEnabled ? this.elPan.classList.add("selected") : t.globals.selectionEnabled && this.elSelection.classList.add("selected"), this.addToolbarEventListeners();
      }
    }, {
      key: "addToolbarEventListeners",
      value: function value() {
        var t = this;
        this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleSelection.bind(this)), this.elZoom.addEventListener("click", this.toggleZooming.bind(this)), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function (e) {
          e.classList.contains("exportSVG") ? e.addEventListener("click", t.downloadSVG.bind(t)) : e.classList.contains("exportPNG") && e.addEventListener("click", t.downloadPNG.bind(t));
        });

        for (var e = 0; e < this.t.customIcons.length; e++) {
          this.elCustomIcons[e].addEventListener("click", this.t.customIcons[e].click);
        }
      }
    }, {
      key: "toggleSelection",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.selectionEnabled = !this.w.globals.selectionEnabled, this.elSelection.classList.contains("selected") ? this.elSelection.classList.remove("selected") : this.elSelection.classList.add("selected");
      }
    }, {
      key: "toggleZooming",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.zoomEnabled = !this.w.globals.zoomEnabled, this.elZoom.classList.contains("selected") ? this.elZoom.classList.remove("selected") : this.elZoom.classList.add("selected");
      }
    }, {
      key: "getToolbarIconsReference",
      value: function value() {
        var t = this.w;
        this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"));
      }
    }, {
      key: "enableZooming",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.zoomEnabled = !0, this.elZoom && this.elZoom.classList.add("selected"), this.elPan && this.elPan.classList.remove("selected");
      }
    }, {
      key: "enablePanning",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.panEnabled = !0, this.elPan && this.elPan.classList.add("selected"), this.elZoom && this.elZoom.classList.remove("selected");
      }
    }, {
      key: "togglePanning",
      value: function value() {
        this.toggleOtherControls(), this.w.globals.panEnabled = !this.w.globals.panEnabled, this.elPan.classList.contains("selected") ? this.elPan.classList.remove("selected") : this.elPan.classList.add("selected");
      }
    }, {
      key: "toggleOtherControls",
      value: function value() {
        var t = this.w;
        t.globals.panEnabled = !1, t.globals.zoomEnabled = !1, t.globals.selectionEnabled = !1, this.getToolbarIconsReference(), this.elPan && this.elPan.classList.remove("selected"), this.elSelection && this.elSelection.classList.remove("selected"), this.elZoom && this.elZoom.classList.remove("selected");
      }
    }, {
      key: "handleZoomIn",
      value: function value() {
        var t = this.w,
            e = (t.globals.minX + t.globals.maxX) / 2,
            i = (t.globals.minX + e) / 2,
            s = (t.globals.maxX + e) / 2;
        t.globals.disableZoomIn || this.zoomUpdateOptions(i, s);
      }
    }, {
      key: "handleZoomOut",
      value: function value() {
        var t = this.w;

        if (!("datetime" === t.config.xaxis.type && new Date(t.globals.minX).getUTCFullYear() < 1e3)) {
          var e = (t.globals.minX + t.globals.maxX) / 2,
              i = t.globals.minX - (e - t.globals.minX),
              s = t.globals.maxX - (e - t.globals.maxX);
          t.globals.disableZoomOut || this.zoomUpdateOptions(i, s);
        }
      }
    }, {
      key: "zoomUpdateOptions",
      value: function value(t, e) {
        var i = {
          min: t,
          max: e
        },
            s = this.getBeforeZoomRange(i);
        s && (i = s.xaxis), this.w.globals.zoomed = !0, this.ctx._updateOptions({
          xaxis: i
        }, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(i);
      }
    }, {
      key: "zoomCallback",
      value: function value(t, e) {
        "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {
          xaxis: t,
          yaxis: e
        });
      }
    }, {
      key: "getBeforeZoomRange",
      value: function value(t, e) {
        var i = null;
        return "function" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {
          xaxis: t,
          yaxis: e
        })), i;
      }
    }, {
      key: "toggleMenu",
      value: function value() {
        this.elMenu.classList.contains("open") ? this.elMenu.classList.remove("open") : this.elMenu.classList.add("open");
      }
    }, {
      key: "downloadPNG",
      value: function value() {
        var t = new nt(this.ctx);
        t.exportToPng(this.ctx), this.toggleMenu();
      }
    }, {
      key: "downloadSVG",
      value: function value() {
        var t = new nt(this.ctx);
        t.exportToSVG(), this.toggleMenu();
      }
    }, {
      key: "handleZoomReset",
      value: function value(t) {
        var e = this;
        this.ctx.getSyncedCharts().forEach(function (t) {
          var i = t.w;
          i.globals.minX !== i.globals.initialminX && i.globals.maxX !== i.globals.initialmaxX && (t.revertDefaultAxisMinMax(), "function" == typeof i.config.chart.events.zoomed && e.zoomCallback({
            min: i.config.xaxis.min,
            max: i.config.xaxis.max
          }), i.globals.zoomed = !1, t._updateSeries(i.globals.initialSeries, i.config.chart.animations.dynamicAnimation.enabled));
        });
      }
    }, {
      key: "destroy",
      value: function value() {
        this.elZoomReset && (this.elZoomReset.removeEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.removeEventListener("click", this.toggleSelection.bind(this)), this.elZoom.removeEventListener("click", this.toggleZooming.bind(this)), this.elZoomIn.removeEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.removeEventListener("click", this.handleZoomOut.bind(this)), this.elPan.removeEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.removeEventListener("click", this.toggleMenu.bind(this))), this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;
      }
    }]), t;
  }(),
      mt = function (t) {
    function i(t) {
      var s;
      return e(this, i), (s = h(this, o(i).call(this, t))).ctx = t, s.w = t.w, s.dragged = !1, s.graphics = new f(s.ctx), s.eventList = ["mousedown", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], s.clientX = 0, s.clientY = 0, s.startX = 0, s.endX = 0, s.dragX = 0, s.startY = 0, s.endY = 0, s.dragY = 0, s;
    }

    return r(i, bt), s(i, [{
      key: "init",
      value: function value(t) {
        var e = this,
            i = t.xyRatios,
            s = this.w,
            a = this;
        this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = s.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), s.globals.dom.elGraphical.add(this.zoomRect), s.globals.dom.elGraphical.add(this.selectionRect), "x" === s.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
          minX: 0,
          minY: 0,
          maxX: s.globals.gridWidth,
          maxY: s.globals.gridHeight
        }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === s.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
          minX: 0,
          maxX: s.globals.gridWidth
        }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = s.globals.dom.baseEl.querySelector(s.globals.chartClass), this.hoverArea.classList.add("zoomable"), this.eventList.forEach(function (t) {
          e.hoverArea.addEventListener(t, a.svgMouseEvents.bind(a, i), {
            capture: !1,
            passive: !0
          });
        });
      }
    }, {
      key: "destroy",
      value: function value() {
        var t = this,
            e = this;
        this.eventList.forEach(function (i) {
          t.hoverArea && t.hoverArea.removeEventListener(i, e.svgMouseEvents.bind(e, e.xyRatios), {
            capture: !1,
            passive: !0
          });
        }), this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;
      }
    }, {
      key: "svgMouseEvents",
      value: function value(t, e) {
        var i = this.w,
            s = this,
            a = this.ctx.toolbar,
            n = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type;

        if (e.shiftKey ? (this.shiftWasPressed = !0, a.enablePanning()) : this.shiftWasPressed && (a.enableZooming(), this.shiftWasPressed = !1), !(e.target.classList.contains("apexcharts-selection-rect") || e.target.parentNode.classList.contains("apexcharts-toolbar"))) {
          if (s.clientX = "touchmove" === e.type || "touchstart" === e.type ? e.touches[0].clientX : "touchend" === e.type ? e.changedTouches[0].clientX : e.clientX, s.clientY = "touchmove" === e.type || "touchstart" === e.type ? e.touches[0].clientY : "touchend" === e.type ? e.changedTouches[0].clientY : e.clientY, "mousedown" === e.type && 1 === e.which) {
            var r = s.gridRect.getBoundingClientRect();
            s.startX = s.clientX - r.left, s.startY = s.clientY - r.top, s.dragged = !1, s.w.globals.mousedown = !0;
          }

          if (("mousemove" === e.type && 1 === e.which || "touchmove" === e.type) && (s.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, s.w.globals.mousedown && s.panDragging({
            context: s,
            zoomtype: n,
            xyRatios: t
          })) : (s.w.globals.mousedown && i.globals.zoomEnabled || s.w.globals.mousedown && i.globals.selectionEnabled) && (s.selection = s.selectionDrawing({
            context: s,
            zoomtype: n
          }))), "mouseup" === e.type || "touchend" === e.type) {
            var o = s.gridRect.getBoundingClientRect();
            s.w.globals.mousedown && (s.endX = s.clientX - o.left, s.endY = s.clientY - o.top, s.dragX = Math.abs(s.endX - s.startX), s.dragY = Math.abs(s.endY - s.startY), (i.globals.zoomEnabled || i.globals.selectionEnabled) && s.selectionDrawn({
              context: s,
              zoomtype: n
            })), i.globals.zoomEnabled && s.hideSelectionRect(this.selectionRect), s.dragged = !1, s.w.globals.mousedown = !1;
          }

          this.makeSelectionRectDraggable();
        }
      }
    }, {
      key: "makeSelectionRectDraggable",
      value: function value() {
        var t = this.w;

        if (this.selectionRect) {
          var e = this.selectionRect.node.getBoundingClientRect();
          e.width > 0 && e.height > 0 && this.slDraggableRect.selectize().resize({
            constraint: {
              minX: 0,
              minY: 0,
              maxX: t.globals.gridWidth,
              maxY: t.globals.gridHeight
            }
          }).on("resizing", this.selectionDragging.bind(this, "resizing"));
        }
      }
    }, {
      key: "preselectedSelection",
      value: function value() {
        var t = this.w,
            e = this.xyRatios;
        if (!t.globals.zoomEnabled) if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {
          var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio,
              s = {
            x: i,
            y: 0,
            width: t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i,
            height: t.globals.gridHeight,
            translateX: 0,
            translateY: 0,
            selectionEnabled: !0
          };
          this.drawSelectionRect(s), this.makeSelectionRectDraggable(), "function" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {
            xaxis: {
              min: t.config.chart.selection.xaxis.min,
              max: t.config.chart.selection.xaxis.max
            },
            yaxis: {}
          });
        }
      }
    }, {
      key: "drawSelectionRect",
      value: function value(t) {
        var e = t.x,
            i = t.y,
            s = t.width,
            a = t.height,
            n = t.translateX,
            r = t.translateY,
            o = this.w,
            l = this.zoomRect,
            h = this.selectionRect;

        if (this.dragged || null !== o.globals.selection) {
          var c = {
            transform: "translate(" + n + ", " + r + ")"
          };
          o.globals.zoomEnabled && this.dragged && (l.attr({
            x: e,
            y: i,
            width: s,
            height: a,
            fill: o.config.chart.zoom.zoomedArea.fill.color,
            "fill-opacity": o.config.chart.zoom.zoomedArea.fill.opacity,
            stroke: o.config.chart.zoom.zoomedArea.stroke.color,
            "stroke-width": o.config.chart.zoom.zoomedArea.stroke.width,
            "stroke-opacity": o.config.chart.zoom.zoomedArea.stroke.opacity
          }), f.setAttrs(l.node, c)), o.globals.selectionEnabled && (h.attr({
            x: e,
            y: i,
            width: s > 0 ? s : 0,
            height: a > 0 ? a : 0,
            fill: o.config.chart.selection.fill.color,
            "fill-opacity": o.config.chart.selection.fill.opacity,
            stroke: o.config.chart.selection.stroke.color,
            "stroke-width": o.config.chart.selection.stroke.width,
            "stroke-dasharray": o.config.chart.selection.stroke.dashArray,
            "stroke-opacity": o.config.chart.selection.stroke.opacity
          }), f.setAttrs(h.node, c));
        }
      }
    }, {
      key: "hideSelectionRect",
      value: function value(t) {
        t && t.attr({
          x: 0,
          y: 0,
          width: 0,
          height: 0
        });
      }
    }, {
      key: "selectionDrawing",
      value: function value(t) {
        var e = t.context,
            i = t.zoomtype,
            s = this.w,
            a = e,
            n = this.gridRect.getBoundingClientRect(),
            r = a.startX - 1,
            o = a.startY,
            l = a.clientX - n.left - r,
            h = a.clientY - n.top - o,
            c = 0,
            d = 0,
            u = {};
        return (Math.abs(l + r) > s.globals.gridWidth || a.clientX - n.left < 0) && (a.hideSelectionRect(this.zoomRect), a.dragged = !1, a.w.globals.mousedown = !1), r > a.clientX - n.left && (c = -(l = Math.abs(l))), o > a.clientY - n.top && (d = -(h = Math.abs(h))), u = "x" === i ? {
          x: r,
          y: 0,
          width: l,
          height: s.globals.gridHeight,
          translateX: c,
          translateY: 0
        } : "y" === i ? {
          x: 0,
          y: o,
          width: s.globals.gridWidth,
          height: h,
          translateX: 0,
          translateY: d
        } : {
          x: r,
          y: o,
          width: l,
          height: h,
          translateX: c,
          translateY: d
        }, a.drawSelectionRect(u), a.selectionDragging("resizing"), u;
      }
    }, {
      key: "selectionDragging",
      value: function value(t, e) {
        var i = this,
            s = this.w,
            a = this.xyRatios,
            n = this.selectionRect,
            r = 0;
        "resizing" === t && (r = 30), "function" == typeof s.config.chart.events.selection && s.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function () {
          var t = i.gridRect.getBoundingClientRect(),
              e = n.node.getBoundingClientRect(),
              r = s.globals.xAxisScale.niceMin + (e.left - t.left) * a.xRatio,
              o = s.globals.xAxisScale.niceMin + (e.right - t.left) * a.xRatio,
              l = s.globals.yAxisScale[0].niceMin + (t.bottom - e.bottom) * a.yRatio[0],
              h = s.globals.yAxisScale[0].niceMax - (e.top - t.top) * a.yRatio[0];
          s.config.chart.events.selection(i.ctx, {
            xaxis: {
              min: r,
              max: o
            },
            yaxis: {
              min: l,
              max: h
            }
          });
        }, r));
      }
    }, {
      key: "selectionDrawn",
      value: function value(t) {
        var e = t.context,
            i = t.zoomtype,
            s = this.w,
            a = e,
            n = this.xyRatios,
            r = this.ctx.toolbar;

        if (a.startX > a.endX) {
          var o = a.startX;
          a.startX = a.endX, a.endX = o;
        }

        if (a.startY > a.endY) {
          var l = a.startY;
          a.startY = a.endY, a.endY = l;
        }

        var h = s.globals.xAxisScale.niceMin + a.startX * n.xRatio,
            c = s.globals.xAxisScale.niceMin + a.endX * n.xRatio,
            u = [],
            g = [];
        if (s.config.yaxis.forEach(function (t, e) {
          u.push(Math.floor(s.globals.yAxisScale[e].niceMax - n.yRatio[e] * a.startY)), g.push(Math.floor(s.globals.yAxisScale[e].niceMax - n.yRatio[e] * a.endY));
        }), a.dragged && (a.dragX > 10 || a.dragY > 10) && h !== c) if (s.globals.zoomEnabled) {
          var f = d.clone(s.config.yaxis);
          s.globals.zoomed || (s.globals.lastXAxis = d.clone(s.config.xaxis), s.globals.lastYAxis = d.clone(s.config.yaxis));
          var p = {
            min: h,
            max: c
          };

          if ("xy" !== i && "y" !== i || f.forEach(function (t, e) {
            f[e].min = g[e], f[e].max = u[e];
          }), s.config.chart.zoom.autoScaleYaxis) {
            var x = new B(a.ctx);
            f = x.autoScaleY(a.ctx, {
              xaxis: p
            });
          }

          if (r) {
            var b = r.getBeforeZoomRange(p, f);
            b && (p = b.xaxis ? b.xaxis : p, f = b.yaxis ? b.yaxe : f);
          }

          a.ctx._updateOptions({
            xaxis: p,
            yaxis: f
          }, !1, a.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof s.config.chart.events.zoomed && r.zoomCallback(p, f), s.globals.zoomed = !0;
        } else if (s.globals.selectionEnabled) {
          var m,
              v = null;
          m = {
            min: h,
            max: c
          }, "xy" !== i && "y" !== i || (v = d.clone(s.config.yaxis)).forEach(function (t, e) {
            v[e].min = g[e], v[e].max = u[e];
          }), s.globals.selection = a.selection, "function" == typeof s.config.chart.events.selection && s.config.chart.events.selection(a.ctx, {
            xaxis: m,
            yaxis: v
          });
        }
      }
    }, {
      key: "panDragging",
      value: function value(t) {
        var e,
            i = t.context,
            s = (t.zoomtype, this.w),
            a = i;

        if (void 0 !== s.globals.lastClientPosition.x) {
          var n = s.globals.lastClientPosition.x - a.clientX,
              r = s.globals.lastClientPosition.y - a.clientY;
          Math.abs(n) > Math.abs(r) && n > 0 ? e = "left" : Math.abs(n) > Math.abs(r) && n < 0 ? e = "right" : Math.abs(r) > Math.abs(n) && r > 0 ? e = "up" : Math.abs(r) > Math.abs(n) && r < 0 && (e = "down");
        }

        s.globals.lastClientPosition = {
          x: a.clientX,
          y: a.clientY
        };
        var o = s.globals.minX,
            l = s.globals.maxX;
        this.panScrolled(e, o, l);
      }
    }, {
      key: "panScrolled",
      value: function value(t, e, i) {
        var s = this.w,
            a = this.xyRatios,
            n = d.clone(s.config.yaxis);
        "left" === t ? (e = s.globals.minX + s.globals.gridWidth / 15 * a.xRatio, i = s.globals.maxX + s.globals.gridWidth / 15 * a.xRatio) : "right" === t && (e = s.globals.minX - s.globals.gridWidth / 15 * a.xRatio, i = s.globals.maxX - s.globals.gridWidth / 15 * a.xRatio), (e < s.globals.initialminX || i > s.globals.initialmaxX) && (e = s.globals.minX, i = s.globals.maxX);
        var r = {
          min: e,
          max: i
        };
        s.config.chart.zoom.autoScaleYaxis && (n = new B(me.ctx).autoScaleY(me.ctx, {
          xaxis: r
        }));
        this.ctx._updateOptions({
          xaxis: {
            min: e,
            max: i
          },
          yaxis: n
        }, !1, !1), "function" == typeof s.config.chart.events.scrolled && s.config.chart.events.scrolled(this.ctx, {
          xaxis: {
            min: e,
            max: i
          }
        });
      }
    }]), i;
  }(),
      vt = function () {
    function t(i) {
      e(this, t), this.ctx = i, this.w = i.w;
    }

    return s(t, [{
      key: "draw",
      value: function value() {
        this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle");
      }
    }, {
      key: "drawTitleSubtitle",
      value: function value(t) {
        var e = this.w,
            i = "title" === t ? e.config.title : e.config.subtitle,
            s = e.globals.svgWidth / 2,
            a = i.offsetY,
            n = "middle";

        if ("left" === i.align ? (s = 10, n = "start") : "right" === i.align && (s = e.globals.svgWidth - 10, n = "end"), s += i.offsetX, a = a + parseInt(i.style.fontSize) + 2, void 0 !== i.text) {
          var r = new f(this.ctx).drawText({
            x: s,
            y: a,
            text: i.text,
            textAnchor: n,
            fontSize: i.style.fontSize,
            fontFamily: i.style.fontFamily,
            foreColor: i.style.color,
            opacity: 1
          });
          r.node.setAttribute("class", "apexcharts-".concat(t, "-text")), e.globals.dom.Paper.add(r);
        }
      }
    }]), t;
  }();

  st = "undefined" != typeof window ? window : void 0, _at = function at(e, i) {
    var s = (void 0 !== this ? this : e).SVG = function (t) {
      if (s.supported) return t = new s.Doc(t), s.parser.draw || s.prepare(), t;
    };

    if (s.ns = "http://www.w3.org/2000/svg", s.xmlns = "http://www.w3.org/2000/xmlns/", s.xlink = "http://www.w3.org/1999/xlink", s.svgjs = "http://svgjs.com/svgjs", s.supported = !0, !s.supported) return !1;
    s.did = 1e3, s.eid = function (t) {
      return "Svgjs" + d(t) + s.did++;
    }, s.create = function (t) {
      var e = i.createElementNS(this.ns, t);
      return e.setAttribute("id", this.eid(t)), e;
    }, s.extend = function () {
      var t, e, i, a;

      for (e = (t = [].slice.call(arguments)).pop(), a = t.length - 1; a >= 0; a--) {
        if (t[a]) for (i in e) {
          t[a].prototype[i] = e[i];
        }
      }

      s.Set && s.Set.inherit && s.Set.inherit();
    }, s.invent = function (t) {
      var e = "function" == typeof t.create ? t.create : function () {
        this.constructor.call(this, s.create(t.create));
      };
      return t.inherit && (e.prototype = new t.inherit()), t.extend && s.extend(e, t.extend), t.construct && s.extend(t.parent || s.Container, t.construct), e;
    }, s.adopt = function (t) {
      return t ? t.instance ? t.instance : ((i = "svg" == t.nodeName ? t.parentNode instanceof e.SVGElement ? new s.Nested() : new s.Doc() : "linearGradient" == t.nodeName ? new s.Gradient("linear") : "radialGradient" == t.nodeName ? new s.Gradient("radial") : s[d(t.nodeName)] ? new s[d(t.nodeName)]() : new s.Element(t)).type = t.nodeName, i.node = t, t.instance = i, i instanceof s.Doc && i.namespace().defs(), i.setData(JSON.parse(t.getAttribute("svgjs:data")) || {}), i) : null;
      var i;
    }, s.prepare = function () {
      var t = i.getElementsByTagName("body")[0],
          e = (t ? new s.Doc(t) : s.adopt(i.documentElement).nested()).size(2, 0);
      s.parser = {
        body: t || i.documentElement,
        draw: e.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,
        poly: e.polyline().node,
        path: e.path().node,
        "native": s.create("svg")
      };
    }, s.parser = {
      "native": s.create("svg")
    }, i.addEventListener("DOMContentLoaded", function () {
      s.parser.draw || s.prepare();
    }, !1), s.regex = {
      numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
      hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
      rgb: /rgb\((\d+),(\d+),(\d+)\)/,
      reference: /#([a-z0-9\-_]+)/i,
      transforms: /\)\s*,?\s*/,
      whitespace: /\s/g,
      isHex: /^#[a-f0-9]{3,6}$/i,
      isRgb: /^rgb\(/,
      isCss: /[^:]+:[^;]+;?/,
      isBlank: /^(\s+)?$/,
      isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
      isPercent: /^-?[\d\.]+%$/,
      isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
      delimiter: /[\s,]+/,
      hyphen: /([^e])\-/gi,
      pathLetters: /[MLHVCSQTAZ]/gi,
      isPathLetter: /[MLHVCSQTAZ]/i,
      numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
      dots: /\./g
    }, s.utils = {
      map: function map(t, e) {
        var i,
            s = t.length,
            a = [];

        for (i = 0; i < s; i++) {
          a.push(e(t[i]));
        }

        return a;
      },
      filter: function filter(t, e) {
        var i,
            s = t.length,
            a = [];

        for (i = 0; i < s; i++) {
          e(t[i]) && a.push(t[i]);
        }

        return a;
      },
      radians: function radians(t) {
        return t % 360 * Math.PI / 180;
      },
      degrees: function degrees(t) {
        return 180 * t / Math.PI % 360;
      },
      filterSVGElements: function filterSVGElements(t) {
        return this.filter(t, function (t) {
          return t instanceof e.SVGElement;
        });
      }
    }, s.defaults = {
      attrs: {
        "fill-opacity": 1,
        "stroke-opacity": 1,
        "stroke-width": 0,
        "stroke-linejoin": "miter",
        "stroke-linecap": "butt",
        fill: "#000000",
        stroke: "#000000",
        opacity: 1,
        x: 0,
        y: 0,
        cx: 0,
        cy: 0,
        width: 0,
        height: 0,
        r: 0,
        rx: 0,
        ry: 0,
        offset: 0,
        "stop-opacity": 1,
        "stop-color": "#000000",
        "font-size": 16,
        "font-family": "Helvetica, Arial, sans-serif",
        "text-anchor": "start"
      }
    }, s.Color = function (e) {
      var i, a;
      (this.r = 0, this.g = 0, this.b = 0, e) && ("string" == typeof e ? s.regex.isRgb.test(e) ? (i = s.regex.rgb.exec(e.replace(s.regex.whitespace, "")), this.r = parseInt(i[1]), this.g = parseInt(i[2]), this.b = parseInt(i[3])) : s.regex.isHex.test(e) && (i = s.regex.hex.exec(4 == (a = e).length ? ["#", a.substring(1, 2), a.substring(1, 2), a.substring(2, 3), a.substring(2, 3), a.substring(3, 4), a.substring(3, 4)].join("") : a), this.r = parseInt(i[1], 16), this.g = parseInt(i[2], 16), this.b = parseInt(i[3], 16)) : "object" === t(e) && (this.r = e.r, this.g = e.g, this.b = e.b));
    }, s.extend(s.Color, {
      toString: function toString() {
        return this.toHex();
      },
      toHex: function toHex() {
        return "#" + u(this.r) + u(this.g) + u(this.b);
      },
      toRgb: function toRgb() {
        return "rgb(" + [this.r, this.g, this.b].join() + ")";
      },
      brightness: function brightness() {
        return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;
      },
      morph: function morph(t) {
        return this.destination = new s.Color(t), this;
      },
      at: function at(t) {
        return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new s.Color({
          r: ~~(this.r + (this.destination.r - this.r) * t),
          g: ~~(this.g + (this.destination.g - this.g) * t),
          b: ~~(this.b + (this.destination.b - this.b) * t)
        })) : this;
      }
    }), s.Color.test = function (t) {
      return t += "", s.regex.isHex.test(t) || s.regex.isRgb.test(t);
    }, s.Color.isRgb = function (t) {
      return t && "number" == typeof t.r && "number" == typeof t.g && "number" == typeof t.b;
    }, s.Color.isColor = function (t) {
      return s.Color.isRgb(t) || s.Color.test(t);
    }, s.Array = function (t, e) {
      0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t);
    }, s.extend(s.Array, {
      morph: function morph(t) {
        if (this.destination = this.parse(t), this.value.length != this.destination.length) {
          for (var e = this.value[this.value.length - 1], i = this.destination[this.destination.length - 1]; this.value.length > this.destination.length;) {
            this.destination.push(i);
          }

          for (; this.value.length < this.destination.length;) {
            this.value.push(e);
          }
        }

        return this;
      },
      settle: function settle() {
        for (var t = 0, e = this.value.length, i = []; t < e; t++) {
          -1 == i.indexOf(this.value[t]) && i.push(this.value[t]);
        }

        return this.value = i;
      },
      at: function at(t) {
        if (!this.destination) return this;

        for (var e = 0, i = this.value.length, a = []; e < i; e++) {
          a.push(this.value[e] + (this.destination[e] - this.value[e]) * t);
        }

        return new s.Array(a);
      },
      toString: function toString() {
        return this.value.join(" ");
      },
      valueOf: function valueOf() {
        return this.value;
      },
      parse: function parse(t) {
        return t = t.valueOf(), Array.isArray(t) ? t : this.split(t);
      },
      split: function split(t) {
        return t.trim().split(s.regex.delimiter).map(parseFloat);
      },
      reverse: function reverse() {
        return this.value.reverse(), this;
      },
      clone: function clone() {
        var t = new this.constructor();
        return t.value = function t(e) {
          var i = e.slice(0);

          for (var s = i.length; s--;) {
            Array.isArray(i[s]) && (i[s] = t(i[s]));
          }

          return i;
        }(this.value), t;
      }
    }), s.PointArray = function (t, e) {
      s.Array.call(this, t, e || [[0, 0]]);
    }, s.PointArray.prototype = new s.Array(), s.PointArray.prototype.constructor = s.PointArray, s.extend(s.PointArray, {
      toString: function toString() {
        for (var t = 0, e = this.value.length, i = []; t < e; t++) {
          i.push(this.value[t].join(","));
        }

        return i.join(" ");
      },
      toLine: function toLine() {
        return {
          x1: this.value[0][0],
          y1: this.value[0][1],
          x2: this.value[1][0],
          y2: this.value[1][1]
        };
      },
      at: function at(t) {
        if (!this.destination) return this;

        for (var e = 0, i = this.value.length, a = []; e < i; e++) {
          a.push([this.value[e][0] + (this.destination[e][0] - this.value[e][0]) * t, this.value[e][1] + (this.destination[e][1] - this.value[e][1]) * t]);
        }

        return new s.PointArray(a);
      },
      parse: function parse(t) {
        var e = [];

        if (t = t.valueOf(), Array.isArray(t)) {
          if (Array.isArray(t[0])) return t.map(function (t) {
            return t.slice();
          });
          if (null != t[0].x) return t.map(function (t) {
            return [t.x, t.y];
          });
        } else t = t.trim().split(s.regex.delimiter).map(parseFloat);

        t.length % 2 != 0 && t.pop();

        for (var i = 0, a = t.length; i < a; i += 2) {
          e.push([t[i], t[i + 1]]);
        }

        return e;
      },
      move: function move(t, e) {
        var i = this.bbox();
        if (t -= i.x, e -= i.y, !isNaN(t) && !isNaN(e)) for (var s = this.value.length - 1; s >= 0; s--) {
          this.value[s] = [this.value[s][0] + t, this.value[s][1] + e];
        }
        return this;
      },
      size: function size(t, e) {
        var i,
            s = this.bbox();

        for (i = this.value.length - 1; i >= 0; i--) {
          s.width && (this.value[i][0] = (this.value[i][0] - s.x) * t / s.width + s.x), s.height && (this.value[i][1] = (this.value[i][1] - s.y) * e / s.height + s.y);
        }

        return this;
      },
      bbox: function bbox() {
        return s.parser.draw || s.prepare(), s.parser.poly.setAttribute("points", this.toString()), s.parser.poly.getBBox();
      }
    });

    for (var a = {
      M: function M(t, e, i) {
        return e.x = i.x = t[0], e.y = i.y = t[1], ["M", e.x, e.y];
      },
      L: function L(t, e) {
        return e.x = t[0], e.y = t[1], ["L", t[0], t[1]];
      },
      H: function H(t, e) {
        return e.x = t[0], ["H", t[0]];
      },
      V: function V(t, e) {
        return e.y = t[0], ["V", t[0]];
      },
      C: function C(t, e) {
        return e.x = t[4], e.y = t[5], ["C", t[0], t[1], t[2], t[3], t[4], t[5]];
      },
      S: function S(t, e) {
        return e.x = t[2], e.y = t[3], ["S", t[0], t[1], t[2], t[3]];
      },
      Q: function Q(t, e) {
        return e.x = t[2], e.y = t[3], ["Q", t[0], t[1], t[2], t[3]];
      },
      T: function T(t, e) {
        return e.x = t[0], e.y = t[1], ["T", t[0], t[1]];
      },
      Z: function Z(t, e, i) {
        return e.x = i.x, e.y = i.y, ["Z"];
      },
      A: function A(t, e) {
        return e.x = t[5], e.y = t[6], ["A", t[0], t[1], t[2], t[3], t[4], t[5], t[6]];
      }
    }, n = "mlhvqtcsaz".split(""), r = 0, o = n.length; r < o; ++r) {
      a[n[r]] = function (t) {
        return function (e, i, s) {
          if ("H" == t) e[0] = e[0] + i.x;else if ("V" == t) e[0] = e[0] + i.y;else if ("A" == t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;else for (var n = 0, r = e.length; n < r; ++n) {
            e[n] = e[n] + (n % 2 ? i.y : i.x);
          }
          return a[t](e, i, s);
        };
      }(n[r].toUpperCase());
    }

    s.PathArray = function (t, e) {
      s.Array.call(this, t, e || [["M", 0, 0]]);
    }, s.PathArray.prototype = new s.Array(), s.PathArray.prototype.constructor = s.PathArray, s.extend(s.PathArray, {
      toString: function toString() {
        return function (t) {
          for (var e = 0, i = t.length, s = ""; e < i; e++) {
            s += t[e][0], null != t[e][1] && (s += t[e][1], null != t[e][2] && (s += " ", s += t[e][2], null != t[e][3] && (s += " ", s += t[e][3], s += " ", s += t[e][4], null != t[e][5] && (s += " ", s += t[e][5], s += " ", s += t[e][6], null != t[e][7] && (s += " ", s += t[e][7])))));
          }

          return s + " ";
        }(this.value);
      },
      move: function move(t, e) {
        var i = this.bbox();
        if (t -= i.x, e -= i.y, !isNaN(t) && !isNaN(e)) for (var s, a = this.value.length - 1; a >= 0; a--) {
          "M" == (s = this.value[a][0]) || "L" == s || "T" == s ? (this.value[a][1] += t, this.value[a][2] += e) : "H" == s ? this.value[a][1] += t : "V" == s ? this.value[a][1] += e : "C" == s || "S" == s || "Q" == s ? (this.value[a][1] += t, this.value[a][2] += e, this.value[a][3] += t, this.value[a][4] += e, "C" == s && (this.value[a][5] += t, this.value[a][6] += e)) : "A" == s && (this.value[a][6] += t, this.value[a][7] += e);
        }
        return this;
      },
      size: function size(t, e) {
        var i,
            s,
            a = this.bbox();

        for (i = this.value.length - 1; i >= 0; i--) {
          "M" == (s = this.value[i][0]) || "L" == s || "T" == s ? (this.value[i][1] = (this.value[i][1] - a.x) * t / a.width + a.x, this.value[i][2] = (this.value[i][2] - a.y) * e / a.height + a.y) : "H" == s ? this.value[i][1] = (this.value[i][1] - a.x) * t / a.width + a.x : "V" == s ? this.value[i][1] = (this.value[i][1] - a.y) * e / a.height + a.y : "C" == s || "S" == s || "Q" == s ? (this.value[i][1] = (this.value[i][1] - a.x) * t / a.width + a.x, this.value[i][2] = (this.value[i][2] - a.y) * e / a.height + a.y, this.value[i][3] = (this.value[i][3] - a.x) * t / a.width + a.x, this.value[i][4] = (this.value[i][4] - a.y) * e / a.height + a.y, "C" == s && (this.value[i][5] = (this.value[i][5] - a.x) * t / a.width + a.x, this.value[i][6] = (this.value[i][6] - a.y) * e / a.height + a.y)) : "A" == s && (this.value[i][1] = this.value[i][1] * t / a.width, this.value[i][2] = this.value[i][2] * e / a.height, this.value[i][6] = (this.value[i][6] - a.x) * t / a.width + a.x, this.value[i][7] = (this.value[i][7] - a.y) * e / a.height + a.y);
        }

        return this;
      },
      equalCommands: function equalCommands(t) {
        var e, i, a;

        for (t = new s.PathArray(t), a = this.value.length === t.value.length, e = 0, i = this.value.length; a && e < i; e++) {
          a = this.value[e][0] === t.value[e][0];
        }

        return a;
      },
      morph: function morph(t) {
        return t = new s.PathArray(t), this.equalCommands(t) ? this.destination = t : this.destination = null, this;
      },
      at: function at(t) {
        if (!this.destination) return this;
        var e,
            i,
            a,
            n,
            r = this.value,
            o = this.destination.value,
            l = [],
            h = new s.PathArray();

        for (e = 0, i = r.length; e < i; e++) {
          for (l[e] = [r[e][0]], a = 1, n = r[e].length; a < n; a++) {
            l[e][a] = r[e][a] + (o[e][a] - r[e][a]) * t;
          }

          "A" === l[e][0] && (l[e][4] = +(0 != l[e][4]), l[e][5] = +(0 != l[e][5]));
        }

        return h.value = l, h;
      },
      parse: function parse(t) {
        if (t instanceof s.PathArray) return t.valueOf();
        var e,
            i = {
          M: 2,
          L: 2,
          H: 1,
          V: 1,
          C: 6,
          S: 4,
          Q: 4,
          T: 2,
          A: 7,
          Z: 0
        };
        t = "string" == typeof t ? t.replace(s.regex.numbersWithDots, h).replace(s.regex.pathLetters, " $& ").replace(s.regex.hyphen, "$1 -").trim().split(s.regex.delimiter) : t.reduce(function (t, e) {
          return [].concat.call(t, e);
        }, []);
        var n = [],
            r = new s.Point(),
            o = new s.Point(),
            l = 0,
            c = t.length;

        do {
          s.regex.isPathLetter.test(t[l]) ? (e = t[l], ++l) : "M" == e ? e = "L" : "m" == e && (e = "l"), n.push(a[e].call(null, t.slice(l, l += i[e.toUpperCase()]).map(parseFloat), r, o));
        } while (c > l);

        return n;
      },
      bbox: function bbox() {
        return s.parser.draw || s.prepare(), s.parser.path.setAttribute("d", this.toString()), s.parser.path.getBBox();
      }
    }), s.Number = s.invent({
      create: function create(t, e) {
        this.value = 0, this.unit = e || "", "number" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -3.4e38 : 3.4e38 : "string" == typeof t ? (e = t.match(s.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), "%" == e[5] ? this.value /= 100 : "s" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof s.Number && (this.value = t.valueOf(), this.unit = t.unit);
      },
      extend: {
        toString: function toString() {
          return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit;
        },
        toJSON: function toJSON() {
          return this.toString();
        },
        valueOf: function valueOf() {
          return this.value;
        },
        plus: function plus(t) {
          return t = new s.Number(t), new s.Number(this + t, this.unit || t.unit);
        },
        minus: function minus(t) {
          return t = new s.Number(t), new s.Number(this - t, this.unit || t.unit);
        },
        times: function times(t) {
          return t = new s.Number(t), new s.Number(this * t, this.unit || t.unit);
        },
        divide: function divide(t) {
          return t = new s.Number(t), new s.Number(this / t, this.unit || t.unit);
        },
        to: function to(t) {
          var e = new s.Number(this);
          return "string" == typeof t && (e.unit = t), e;
        },
        morph: function morph(t) {
          return this.destination = new s.Number(t), t.relative && (this.destination.value += this.value), this;
        },
        at: function at(t) {
          return this.destination ? new s.Number(this.destination).minus(this).times(t).plus(this) : this;
        }
      }
    }), s.Element = s.invent({
      create: function create(t) {
        this._stroke = s.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute("stroke") || this._stroke);
      },
      extend: {
        x: function x(t) {
          return this.attr("x", t);
        },
        y: function y(t) {
          return this.attr("y", t);
        },
        cx: function cx(t) {
          return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);
        },
        cy: function cy(t) {
          return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);
        },
        move: function move(t, e) {
          return this.x(t).y(e);
        },
        center: function center(t, e) {
          return this.cx(t).cy(e);
        },
        width: function width(t) {
          return this.attr("width", t);
        },
        height: function height(t) {
          return this.attr("height", t);
        },
        size: function size(t, e) {
          var i = g(this, t, e);
          return this.width(new s.Number(i.width)).height(new s.Number(i.height));
        },
        clone: function clone(t) {
          this.writeDataToDom();
          var e = b(this.node.cloneNode(!0));
          return t ? t.add(e) : this.after(e), e;
        },
        remove: function remove() {
          return this.parent() && this.parent().removeElement(this), this;
        },
        replace: function replace(t) {
          return this.after(t).remove(), t;
        },
        addTo: function addTo(t) {
          return t.put(this);
        },
        putIn: function putIn(t) {
          return t.add(this);
        },
        id: function id(t) {
          return this.attr("id", t);
        },
        inside: function inside(t, e) {
          var i = this.bbox();
          return t > i.x && e > i.y && t < i.x + i.width && e < i.y + i.height;
        },
        show: function show() {
          return this.style("display", "");
        },
        hide: function hide() {
          return this.style("display", "none");
        },
        visible: function visible() {
          return "none" != this.style("display");
        },
        toString: function toString() {
          return this.attr("id");
        },
        classes: function classes() {
          var t = this.attr("class");
          return null == t ? [] : t.trim().split(s.regex.delimiter);
        },
        hasClass: function hasClass(t) {
          return -1 != this.classes().indexOf(t);
        },
        addClass: function addClass(t) {
          if (!this.hasClass(t)) {
            var e = this.classes();
            e.push(t), this.attr("class", e.join(" "));
          }

          return this;
        },
        removeClass: function removeClass(t) {
          return this.hasClass(t) && this.attr("class", this.classes().filter(function (e) {
            return e != t;
          }).join(" ")), this;
        },
        toggleClass: function toggleClass(t) {
          return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);
        },
        reference: function reference(t) {
          return s.get(this.attr(t));
        },
        parent: function parent(t) {
          var i = this;
          if (!i.node.parentNode) return null;
          if (i = s.adopt(i.node.parentNode), !t) return i;

          for (; i && i.node instanceof e.SVGElement;) {
            if ("string" == typeof t ? i.matches(t) : i instanceof t) return i;
            if (!i.node.parentNode || "#document" == i.node.parentNode.nodeName) return null;
            i = s.adopt(i.node.parentNode);
          }
        },
        doc: function doc() {
          return this instanceof s.Doc ? this : this.parent(s.Doc);
        },
        parents: function parents(t) {
          var e = [],
              i = this;

          do {
            if (!(i = i.parent(t)) || !i.node) break;
            e.push(i);
          } while (i.parent);

          return e;
        },
        matches: function matches(t) {
          return function (t, e) {
            return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e);
          }(this.node, t);
        },
        "native": function native() {
          return this.node;
        },
        svg: function svg(t) {
          var e = i.createElement("svg");
          if (!(t && this instanceof s.Parent)) return e.appendChild(t = i.createElement("svg")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), e.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
          e.innerHTML = "<svg>" + t.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";

          for (var a = 0, n = e.firstChild.childNodes.length; a < n; a++) {
            this.node.appendChild(e.firstChild.firstChild);
          }

          return this;
        },
        writeDataToDom: function writeDataToDom() {
          (this.each || this.lines) && (this.each ? this : this.lines()).each(function () {
            this.writeDataToDom();
          });
          return this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this;
        },
        setData: function setData(t) {
          return this.dom = t, this;
        },
        is: function is(t) {
          return function (t, e) {
            return t instanceof e;
          }(this, t);
        }
      }
    }), s.easing = {
      "-": function _(t) {
        return t;
      },
      "<>": function _(t) {
        return -Math.cos(t * Math.PI) / 2 + .5;
      },
      ">": function _(t) {
        return Math.sin(t * Math.PI / 2);
      },
      "<": function _(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }
    }, s.morph = function (t) {
      return function (e, i) {
        return new s.MorphObj(e, i).at(t);
      };
    }, s.Situation = s.invent({
      create: function create(t) {
        this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new s.Number(t.duration).valueOf(), this.delay = new s.Number(t.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};
      }
    }), s.FX = s.invent({
      create: function create(t) {
        this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;
      },
      extend: {
        animate: function animate(e, i, a) {
          "object" === t(e) && (i = e.ease, a = e.delay, e = e.duration);
          var n = new s.Situation({
            duration: e || 1e3,
            delay: a || 0,
            ease: s.easing[i || "-"] || i
          });
          return this.queue(n), this;
        },
        delay: function delay(t) {
          var e = new s.Situation({
            duration: t,
            delay: 0,
            ease: s.easing["-"]
          });
          return this.queue(e);
        },
        target: function target(t) {
          return t && t instanceof s.Element ? (this._target = t, this) : this._target;
        },
        timeToAbsPos: function timeToAbsPos(t) {
          return (t - this.situation.start) / (this.situation.duration / this._speed);
        },
        absPosToTime: function absPosToTime(t) {
          return this.situation.duration / this._speed * t + this.situation.start;
        },
        startAnimFrame: function startAnimFrame() {
          this.stopAnimFrame(), this.animationFrame = e.requestAnimationFrame(function () {
            this.step();
          }.bind(this));
        },
        stopAnimFrame: function stopAnimFrame() {
          e.cancelAnimationFrame(this.animationFrame);
        },
        start: function start() {
          return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;
        },
        startCurrent: function startCurrent() {
          return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();
        },
        queue: function queue(t) {
          return ("function" == typeof t || t instanceof s.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this;
        },
        dequeue: function dequeue() {
          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof s.Situation ? this.start() : this.situation.call(this)), this;
        },
        initAnimations: function initAnimations() {
          var t,
              e,
              i,
              a = this.situation;
          if (a.init) return this;

          for (t in a.animations) {
            for (i = this.target()[t](), Array.isArray(i) || (i = [i]), Array.isArray(a.animations[t]) || (a.animations[t] = [a.animations[t]]), e = i.length; e--;) {
              a.animations[t][e] instanceof s.Number && (i[e] = new s.Number(i[e])), a.animations[t][e] = i[e].morph(a.animations[t][e]);
            }
          }

          for (t in a.attrs) {
            a.attrs[t] = new s.MorphObj(this.target().attr(t), a.attrs[t]);
          }

          for (t in a.styles) {
            a.styles[t] = new s.MorphObj(this.target().style(t), a.styles[t]);
          }

          return a.initialTransformation = this.target().matrixify(), a.init = !0, this;
        },
        clearQueue: function clearQueue() {
          return this.situations = [], this;
        },
        clearCurrent: function clearCurrent() {
          return this.situation = null, this;
        },
        stop: function stop(t, e) {
          var i = this.active;
          return this.active = !1, e && this.clearQueue(), t && this.situation && (!i && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();
        },
        reset: function reset() {
          if (this.situation) {
            var t = this.situation;
            this.stop(), this.situation = t, this.atStart();
          }

          return this;
        },
        finish: function finish() {
          for (this.stop(!0, !1); this.dequeue().situation && this.stop(!0, !1);) {
            ;
          }

          return this.clearQueue().clearCurrent(), this;
        },
        atStart: function atStart() {
          return this.at(0, !0);
        },
        atEnd: function atEnd() {
          return !0 === this.situation.loops && (this.situation.loops = this.situation.loop + 1), "number" == typeof this.situation.loops ? this.at(this.situation.loops, !0) : this.at(1, !0);
        },
        at: function at(t, e) {
          var i = this.situation.duration / this._speed;
          return this.absPos = t, e || (this.situation.reversed && (this.absPos = 1 - this.absPos), this.absPos += this.situation.loop), this.situation.start = +new Date() - this.absPos * i, this.situation.finish = this.situation.start + i, this.step(!0);
        },
        speed: function speed(t) {
          return 0 === t ? this.pause() : t ? (this._speed = t, this.at(this.absPos, !0)) : this._speed;
        },
        loop: function loop(t, e) {
          var i = this.last();
          return i.loops = null == t || t, i.loop = 0, e && (i.reversing = !0), this;
        },
        pause: function pause() {
          return this.paused = !0, this.stopAnimFrame(), this;
        },
        play: function play() {
          return this.paused ? (this.paused = !1, this.at(this.absPos, !0)) : this;
        },
        reverse: function reverse(t) {
          var e = this.last();
          return e.reversed = void 0 === t ? !e.reversed : t, this;
        },
        progress: function progress(t) {
          return t ? this.situation.ease(this.pos) : this.pos;
        },
        after: function after(t) {
          var e = this.last();
          return this.target().on("finished.fx", function i(s) {
            s.detail.situation == e && (t.call(this, e), this.off("finished.fx", i));
          }), this._callStart();
        },
        during: function during(t) {
          var e = this.last(),
              i = function i(_i2) {
            _i2.detail.situation == e && t.call(this, _i2.detail.pos, s.morph(_i2.detail.pos), _i2.detail.eased, e);
          };

          return this.target().off("during.fx", i).on("during.fx", i), this.after(function () {
            this.off("during.fx", i);
          }), this._callStart();
        },
        afterAll: function afterAll(t) {
          var e = function e(i) {
            t.call(this), this.off("allfinished.fx", e);
          };

          return this.target().off("allfinished.fx", e).on("allfinished.fx", e), this._callStart();
        },
        duringAll: function duringAll(t) {
          var e = function e(_e) {
            t.call(this, _e.detail.pos, s.morph(_e.detail.pos), _e.detail.eased, _e.detail.situation);
          };

          return this.target().off("during.fx", e).on("during.fx", e), this.afterAll(function () {
            this.off("during.fx", e);
          }), this._callStart();
        },
        last: function last() {
          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;
        },
        add: function add(t, e, i) {
          return this.last()[i || "animations"][t] = e, this._callStart();
        },
        step: function step(t) {
          var e, i, s;
          (t || (this.absPos = this.timeToAbsPos(+new Date())), !1 !== this.situation.loops) ? (e = Math.max(this.absPos, 0), i = Math.floor(e), !0 === this.situation.loops || i < this.situation.loops ? (this.pos = e - i, s = this.situation.loop, this.situation.loop = i) : (this.absPos = this.situation.loops, this.pos = 1, s = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - s) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos);
          this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
          var a = this.situation.ease(this.pos);

          for (var n in this.situation.once) {
            n > this.lastPos && n <= a && (this.situation.once[n].call(this.target(), this.pos, a), delete this.situation.once[n]);
          }

          return this.active && this.target().fire("during", {
            pos: this.pos,
            eased: a,
            fx: this,
            situation: this.situation
          }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", {
            fx: this,
            situation: this.situation
          }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = a, this) : this;
        },
        eachAt: function eachAt() {
          var t,
              e,
              i,
              a = this,
              n = this.target(),
              r = this.situation;

          for (t in r.animations) {
            i = [].concat(r.animations[t]).map(function (t) {
              return "string" != typeof t && t.at ? t.at(r.ease(a.pos), a.pos) : t;
            }), n[t].apply(n, i);
          }

          for (t in r.attrs) {
            i = [t].concat(r.attrs[t]).map(function (t) {
              return "string" != typeof t && t.at ? t.at(r.ease(a.pos), a.pos) : t;
            }), n.attr.apply(n, i);
          }

          for (t in r.styles) {
            i = [t].concat(r.styles[t]).map(function (t) {
              return "string" != typeof t && t.at ? t.at(r.ease(a.pos), a.pos) : t;
            }), n.style.apply(n, i);
          }

          if (r.transforms.length) {
            for (i = r.initialTransformation, t = 0, e = r.transforms.length; t < e; t++) {
              var o = r.transforms[t];
              o instanceof s.Matrix ? i = o.relative ? i.multiply(new s.Matrix().morph(o).at(r.ease(this.pos))) : i.morph(o).at(r.ease(this.pos)) : (o.relative || o.undo(i.extract()), i = i.multiply(o.at(r.ease(this.pos))));
            }

            n.matrix(i);
          }

          return this;
        },
        once: function once(t, e, i) {
          var s = this.last();
          return i || (t = s.ease(t)), s.once[t] = e, this;
        },
        _callStart: function _callStart() {
          return setTimeout(function () {
            this.start();
          }.bind(this), 0), this;
        }
      },
      parent: s.Element,
      construct: {
        animate: function animate(t, e, i) {
          return (this.fx || (this.fx = new s.FX(this))).animate(t, e, i);
        },
        delay: function delay(t) {
          return (this.fx || (this.fx = new s.FX(this))).delay(t);
        },
        stop: function stop(t, e) {
          return this.fx && this.fx.stop(t, e), this;
        },
        finish: function finish() {
          return this.fx && this.fx.finish(), this;
        },
        pause: function pause() {
          return this.fx && this.fx.pause(), this;
        },
        play: function play() {
          return this.fx && this.fx.play(), this;
        },
        speed: function speed(t) {
          if (this.fx) {
            if (null == t) return this.fx.speed();
            this.fx.speed(t);
          }

          return this;
        }
      }
    }), s.MorphObj = s.invent({
      create: function create(t, e) {
        return s.Color.isColor(e) ? new s.Color(t).morph(e) : s.regex.delimiter.test(t) ? s.regex.pathLetters.test(t) ? new s.PathArray(t).morph(e) : new s.Array(t).morph(e) : s.regex.numberAndUnit.test(e) ? new s.Number(t).morph(e) : (this.value = t, void (this.destination = e));
      },
      extend: {
        at: function at(t, e) {
          return e < 1 ? this.value : this.destination;
        },
        valueOf: function valueOf() {
          return this.value;
        }
      }
    }), s.extend(s.FX, {
      attr: function attr(e, i, s) {
        if ("object" === t(e)) for (var a in e) {
          this.attr(a, e[a]);
        } else this.add(e, i, "attrs");
        return this;
      },
      style: function style(e, i) {
        if ("object" === t(e)) for (var s in e) {
          this.style(s, e[s]);
        } else this.add(e, i, "styles");
        return this;
      },
      x: function x(t, e) {
        if (this.target() instanceof s.G) return this.transform({
          x: t
        }, e), this;
        var i = new s.Number(t);
        return i.relative = e, this.add("x", i);
      },
      y: function y(t, e) {
        if (this.target() instanceof s.G) return this.transform({
          y: t
        }, e), this;
        var i = new s.Number(t);
        return i.relative = e, this.add("y", i);
      },
      cx: function cx(t) {
        return this.add("cx", new s.Number(t));
      },
      cy: function cy(t) {
        return this.add("cy", new s.Number(t));
      },
      move: function move(t, e) {
        return this.x(t).y(e);
      },
      center: function center(t, e) {
        return this.cx(t).cy(e);
      },
      size: function size(t, e) {
        var i;
        this.target() instanceof s.Text ? this.attr("font-size", t) : (t && e || (i = this.target().bbox()), t || (t = i.width / i.height * e), e || (e = i.height / i.width * t), this.add("width", new s.Number(t)).add("height", new s.Number(e)));
        return this;
      },
      width: function width(t) {
        return this.add("width", new s.Number(t));
      },
      height: function height(t) {
        return this.add("height", new s.Number(t));
      },
      plot: function plot(t, e, i, s) {
        return 4 == arguments.length ? this.plot([t, e, i, s]) : this.add("plot", new (this.target().morphArray)(t));
      },
      leading: function leading(t) {
        return this.target().leading ? this.add("leading", new s.Number(t)) : this;
      },
      viewbox: function viewbox(t, e, i, a) {
        return this.target() instanceof s.Container && this.add("viewbox", new s.ViewBox(t, e, i, a)), this;
      },
      update: function update(t) {
        if (this.target() instanceof s.Stop) {
          if ("number" == typeof t || t instanceof s.Number) return this.update({
            offset: arguments[0],
            color: arguments[1],
            opacity: arguments[2]
          });
          null != t.opacity && this.attr("stop-opacity", t.opacity), null != t.color && this.attr("stop-color", t.color), null != t.offset && this.attr("offset", t.offset);
        }

        return this;
      }
    }), s.Box = s.invent({
      create: function create(e, i, a, n) {
        if (!("object" !== t(e) || e instanceof s.Element)) return s.Box.call(this, null != e.left ? e.left : e.x, null != e.top ? e.top : e.y, e.width, e.height);
        4 == arguments.length && (this.x = e, this.y = i, this.width = a, this.height = n), m(this);
      },
      extend: {
        merge: function merge(t) {
          var e = new this.constructor();
          return e.x = Math.min(this.x, t.x), e.y = Math.min(this.y, t.y), e.width = Math.max(this.x + this.width, t.x + t.width) - e.x, e.height = Math.max(this.y + this.height, t.y + t.height) - e.y, m(e);
        },
        transform: function transform(t) {
          var e,
              i = 1 / 0,
              a = -1 / 0,
              n = 1 / 0,
              r = -1 / 0;
          return [new s.Point(this.x, this.y), new s.Point(this.x2, this.y), new s.Point(this.x, this.y2), new s.Point(this.x2, this.y2)].forEach(function (e) {
            e = e.transform(t), i = Math.min(i, e.x), a = Math.max(a, e.x), n = Math.min(n, e.y), r = Math.max(r, e.y);
          }), (e = new this.constructor()).x = i, e.width = a - i, e.y = n, e.height = r - n, m(e), e;
        }
      }
    }), s.BBox = s.invent({
      create: function create(t) {
        if (s.Box.apply(this, [].slice.call(arguments)), t instanceof s.Element) {
          var e;

          try {
            if (!i.documentElement.contains) {
              for (var a = t.node; a.parentNode;) {
                a = a.parentNode;
              }

              if (a != i) throw new Error("Element not in the dom");
            }

            e = t.node.getBBox();
          } catch (i) {
            if (t instanceof s.Shape) {
              s.parser.draw || s.prepare();
              var n = t.clone(s.parser.draw.instance).show();
              e = n.node.getBBox(), n.remove();
            } else e = {
              x: t.node.clientLeft,
              y: t.node.clientTop,
              width: t.node.clientWidth,
              height: t.node.clientHeight
            };
          }

          s.Box.call(this, e);
        }
      },
      inherit: s.Box,
      parent: s.Element,
      construct: {
        bbox: function bbox() {
          return new s.BBox(this);
        }
      }
    }), s.BBox.prototype.constructor = s.BBox, s.extend(s.Element, {
      tbox: function tbox() {
        return console.warn("Use of TBox is deprecated and mapped to RBox. Use .rbox() instead."), this.rbox(this.doc());
      }
    }), s.RBox = s.invent({
      create: function create(t) {
        s.Box.apply(this, [].slice.call(arguments)), t instanceof s.Element && s.Box.call(this, t.node.getBoundingClientRect());
      },
      inherit: s.Box,
      parent: s.Element,
      extend: {
        addOffset: function addOffset() {
          return this.x += e.pageXOffset, this.y += e.pageYOffset, this;
        }
      },
      construct: {
        rbox: function rbox(t) {
          return t ? new s.RBox(this).transform(t.screenCTM().inverse()) : new s.RBox(this).addOffset();
        }
      }
    }), s.RBox.prototype.constructor = s.RBox, s.Matrix = s.invent({
      create: function create(e) {
        var i,
            a = p([1, 0, 0, 1, 0, 0]);

        for (e = e instanceof s.Element ? e.matrixify() : "string" == typeof e ? p(e.split(s.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p([].slice.call(arguments)) : Array.isArray(e) ? p(e) : "object" === t(e) ? e : a, i = y.length - 1; i >= 0; --i) {
          this[y[i]] = null != e[y[i]] ? e[y[i]] : a[y[i]];
        }
      },
      extend: {
        extract: function extract() {
          var t = f(this, 0, 1),
              e = f(this, 1, 0),
              i = 180 / Math.PI * Math.atan2(t.y, t.x) - 90;
          return {
            x: this.e,
            y: this.f,
            transformedX: (this.e * Math.cos(i * Math.PI / 180) + this.f * Math.sin(i * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
            transformedY: (this.f * Math.cos(i * Math.PI / 180) + this.e * Math.sin(-i * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
            skewX: -i,
            skewY: 180 / Math.PI * Math.atan2(e.y, e.x),
            scaleX: Math.sqrt(this.a * this.a + this.b * this.b),
            scaleY: Math.sqrt(this.c * this.c + this.d * this.d),
            rotation: i,
            a: this.a,
            b: this.b,
            c: this.c,
            d: this.d,
            e: this.e,
            f: this.f,
            matrix: new s.Matrix(this)
          };
        },
        clone: function clone() {
          return new s.Matrix(this);
        },
        morph: function morph(t) {
          return this.destination = new s.Matrix(t), this;
        },
        at: function at(t) {
          return this.destination ? new s.Matrix({
            a: this.a + (this.destination.a - this.a) * t,
            b: this.b + (this.destination.b - this.b) * t,
            c: this.c + (this.destination.c - this.c) * t,
            d: this.d + (this.destination.d - this.d) * t,
            e: this.e + (this.destination.e - this.e) * t,
            f: this.f + (this.destination.f - this.f) * t
          }) : this;
        },
        multiply: function multiply(t) {
          return new s.Matrix(this["native"]().multiply(function (t) {
            t instanceof s.Matrix || (t = new s.Matrix(t));
            return t;
          }(t)["native"]()));
        },
        inverse: function inverse() {
          return new s.Matrix(this["native"]().inverse());
        },
        translate: function translate(t, e) {
          return new s.Matrix(this["native"]().translate(t || 0, e || 0));
        },
        scale: function scale(t, e, i, a) {
          return 1 == arguments.length ? e = t : 3 == arguments.length && (a = i, i = e, e = t), this.around(i, a, new s.Matrix(t, 0, 0, e, 0, 0));
        },
        rotate: function rotate(t, e, i) {
          return t = s.utils.radians(t), this.around(e, i, new s.Matrix(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0));
        },
        flip: function flip(t, e) {
          return "x" == t ? this.scale(-1, 1, e, 0) : "y" == t ? this.scale(1, -1, 0, e) : this.scale(-1, -1, t, null != e ? e : t);
        },
        skew: function skew(t, e, i, a) {
          return 1 == arguments.length ? e = t : 3 == arguments.length && (a = i, i = e, e = t), t = s.utils.radians(t), e = s.utils.radians(e), this.around(i, a, new s.Matrix(1, Math.tan(e), Math.tan(t), 1, 0, 0));
        },
        skewX: function skewX(t, e, i) {
          return this.skew(t, 0, e, i);
        },
        skewY: function skewY(t, e, i) {
          return this.skew(0, t, e, i);
        },
        around: function around(t, e, i) {
          return this.multiply(new s.Matrix(1, 0, 0, 1, t || 0, e || 0)).multiply(i).multiply(new s.Matrix(1, 0, 0, 1, -t || 0, -e || 0));
        },
        "native": function native() {
          for (var t = s.parser["native"].createSVGMatrix(), e = y.length - 1; e >= 0; e--) {
            t[y[e]] = this[y[e]];
          }

          return t;
        },
        toString: function toString() {
          return "matrix(" + v(this.a) + "," + v(this.b) + "," + v(this.c) + "," + v(this.d) + "," + v(this.e) + "," + v(this.f) + ")";
        }
      },
      parent: s.Element,
      construct: {
        ctm: function ctm() {
          return new s.Matrix(this.node.getCTM());
        },
        screenCTM: function screenCTM() {
          if (this instanceof s.Nested) {
            var t = this.rect(1, 1),
                e = t.node.getScreenCTM();
            return t.remove(), new s.Matrix(e);
          }

          return new s.Matrix(this.node.getScreenCTM());
        }
      }
    }), s.Point = s.invent({
      create: function create(e, i) {
        var s;
        s = Array.isArray(e) ? {
          x: e[0],
          y: e[1]
        } : "object" === t(e) ? {
          x: e.x,
          y: e.y
        } : null != e ? {
          x: e,
          y: null != i ? i : e
        } : {
          x: 0,
          y: 0
        }, this.x = s.x, this.y = s.y;
      },
      extend: {
        clone: function clone() {
          return new s.Point(this);
        },
        morph: function morph(t, e) {
          return this.destination = new s.Point(t, e), this;
        },
        at: function at(t) {
          return this.destination ? new s.Point({
            x: this.x + (this.destination.x - this.x) * t,
            y: this.y + (this.destination.y - this.y) * t
          }) : this;
        },
        "native": function native() {
          var t = s.parser["native"].createSVGPoint();
          return t.x = this.x, t.y = this.y, t;
        },
        transform: function transform(t) {
          return new s.Point(this["native"]().matrixTransform(t["native"]()));
        }
      }
    }), s.extend(s.Element, {
      point: function point(t, e) {
        return new s.Point(t, e).transform(this.screenCTM().inverse());
      }
    }), s.extend(s.Element, {
      attr: function attr(e, i, a) {
        if (null == e) {
          for (e = {}, a = (i = this.node.attributes).length - 1; a >= 0; a--) {
            e[i[a].nodeName] = s.regex.isNumber.test(i[a].nodeValue) ? parseFloat(i[a].nodeValue) : i[a].nodeValue;
          }

          return e;
        }

        if ("object" === t(e)) for (i in e) {
          this.attr(i, e[i]);
        } else if (null === i) this.node.removeAttribute(e);else {
          if (null == i) return null == (i = this.node.getAttribute(e)) ? s.defaults.attrs[e] : s.regex.isNumber.test(i) ? parseFloat(i) : i;
          "stroke-width" == e ? this.attr("stroke", parseFloat(i) > 0 ? this._stroke : null) : "stroke" == e && (this._stroke = i), "fill" != e && "stroke" != e || (s.regex.isImage.test(i) && (i = this.doc().defs().image(i, 0, 0)), i instanceof s.Image && (i = this.doc().defs().pattern(0, 0, function () {
            this.add(i);
          }))), "number" == typeof i ? i = new s.Number(i) : s.Color.isColor(i) ? i = new s.Color(i) : Array.isArray(i) && (i = new s.Array(i)), "leading" == e ? this.leading && this.leading(i) : "string" == typeof a ? this.node.setAttributeNS(a, e, i.toString()) : this.node.setAttribute(e, i.toString()), !this.rebuild || "font-size" != e && "x" != e || this.rebuild(e, i);
        }
        return this;
      }
    }), s.extend(s.Element, {
      transform: function transform(e, i) {
        var a, n;
        if ("object" !== t(e)) return a = new s.Matrix(this).extract(), "string" == typeof e ? a[e] : a;
        if (a = new s.Matrix(this), i = !!i || !!e.relative, null != e.a) a = i ? a.multiply(new s.Matrix(e)) : new s.Matrix(e);else if (null != e.rotation) x(e, this), a = i ? a.rotate(e.rotation, e.cx, e.cy) : a.rotate(e.rotation - a.extract().rotation, e.cx, e.cy);else if (null != e.scale || null != e.scaleX || null != e.scaleY) {
          if (x(e, this), e.scaleX = null != e.scale ? e.scale : null != e.scaleX ? e.scaleX : 1, e.scaleY = null != e.scale ? e.scale : null != e.scaleY ? e.scaleY : 1, !i) {
            var r = a.extract();
            e.scaleX = 1 * e.scaleX / r.scaleX, e.scaleY = 1 * e.scaleY / r.scaleY;
          }

          a = a.scale(e.scaleX, e.scaleY, e.cx, e.cy);
        } else if (null != e.skew || null != e.skewX || null != e.skewY) {
          if (x(e, this), e.skewX = null != e.skew ? e.skew : null != e.skewX ? e.skewX : 0, e.skewY = null != e.skew ? e.skew : null != e.skewY ? e.skewY : 0, !i) {
            r = a.extract();
            a = a.multiply(new s.Matrix().skew(r.skewX, r.skewY, e.cx, e.cy).inverse());
          }

          a = a.skew(e.skewX, e.skewY, e.cx, e.cy);
        } else e.flip ? ("x" == e.flip || "y" == e.flip ? e.offset = null == e.offset ? this.bbox()["c" + e.flip] : e.offset : null == e.offset ? (n = this.bbox(), e.flip = n.cx, e.offset = n.cy) : e.flip = e.offset, a = new s.Matrix().flip(e.flip, e.offset)) : null == e.x && null == e.y || (i ? a = a.translate(e.x, e.y) : (null != e.x && (a.e = e.x), null != e.y && (a.f = e.y)));
        return this.attr("transform", a);
      }
    }), s.extend(s.FX, {
      transform: function transform(e, i) {
        var a,
            n,
            r = this.target();
        return "object" !== t(e) ? (a = new s.Matrix(r).extract(), "string" == typeof e ? a[e] : a) : (i = !!i || !!e.relative, null != e.a ? a = new s.Matrix(e) : null != e.rotation ? (x(e, r), a = new s.Rotate(e.rotation, e.cx, e.cy)) : null != e.scale || null != e.scaleX || null != e.scaleY ? (x(e, r), e.scaleX = null != e.scale ? e.scale : null != e.scaleX ? e.scaleX : 1, e.scaleY = null != e.scale ? e.scale : null != e.scaleY ? e.scaleY : 1, a = new s.Scale(e.scaleX, e.scaleY, e.cx, e.cy)) : null != e.skewX || null != e.skewY ? (x(e, r), e.skewX = null != e.skewX ? e.skewX : 0, e.skewY = null != e.skewY ? e.skewY : 0, a = new s.Skew(e.skewX, e.skewY, e.cx, e.cy)) : e.flip ? ("x" == e.flip || "y" == e.flip ? e.offset = null == e.offset ? r.bbox()["c" + e.flip] : e.offset : null == e.offset ? (n = r.bbox(), e.flip = n.cx, e.offset = n.cy) : e.flip = e.offset, a = new s.Matrix().flip(e.flip, e.offset)) : null == e.x && null == e.y || (a = new s.Translate(e.x, e.y)), a ? (a.relative = i, this.last().transforms.push(a), this._callStart()) : this);
      }
    }), s.extend(s.Element, {
      untransform: function untransform() {
        return this.attr("transform", null);
      },
      matrixify: function matrixify() {
        return (this.attr("transform") || "").split(s.regex.transforms).slice(0, -1).map(function (t) {
          var e = t.trim().split("(");
          return [e[0], e[1].split(s.regex.delimiter).map(function (t) {
            return parseFloat(t);
          })];
        }).reduce(function (t, e) {
          return "matrix" == e[0] ? t.multiply(p(e[1])) : t[e[0]].apply(t, e[1]);
        }, new s.Matrix());
      },
      toParent: function toParent(t) {
        if (this == t) return this;
        var e = this.screenCTM(),
            i = t.screenCTM().inverse();
        return this.addTo(t).untransform().transform(i.multiply(e)), this;
      },
      toDoc: function toDoc() {
        return this.toParent(this.doc());
      }
    }), s.Transformation = s.invent({
      create: function create(e, i) {
        if (arguments.length > 1 && "boolean" != typeof i) return this.constructor.call(this, [].slice.call(arguments));
        if (Array.isArray(e)) for (var s = 0, a = this.arguments.length; s < a; ++s) {
          this[this.arguments[s]] = e[s];
        } else if ("object" === t(e)) for (s = 0, a = this.arguments.length; s < a; ++s) {
          this[this.arguments[s]] = e[this.arguments[s]];
        }
        this.inversed = !1, !0 === i && (this.inversed = !0);
      },
      extend: {
        arguments: [],
        method: "",
        at: function at(t) {
          for (var e = [], i = 0, a = this.arguments.length; i < a; ++i) {
            e.push(this[this.arguments[i]]);
          }

          var n = this._undo || new s.Matrix();
          return n = new s.Matrix().morph(s.Matrix.prototype[this.method].apply(n, e)).at(t), this.inversed ? n.inverse() : n;
        },
        undo: function undo(t) {
          for (var e = 0, i = this.arguments.length; e < i; ++e) {
            t[this.arguments[e]] = void 0 === this[this.arguments[e]] ? 0 : t[this.arguments[e]];
          }

          return t.cx = this.cx, t.cy = this.cy, this._undo = new s[d(this.method)](t, !0).at(1), this;
        }
      }
    }), s.Translate = s.invent({
      parent: s.Matrix,
      inherit: s.Transformation,
      create: function create(t, e) {
        this.constructor.apply(this, [].slice.call(arguments));
      },
      extend: {
        arguments: ["transformedX", "transformedY"],
        method: "translate"
      }
    }), s.Rotate = s.invent({
      parent: s.Matrix,
      inherit: s.Transformation,
      create: function create(t, e) {
        this.constructor.apply(this, [].slice.call(arguments));
      },
      extend: {
        arguments: ["rotation", "cx", "cy"],
        method: "rotate",
        at: function at(t) {
          var e = new s.Matrix().rotate(new s.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(t), this.cx, this.cy);
          return this.inversed ? e.inverse() : e;
        },
        undo: function undo(t) {
          return this._undo = t, this;
        }
      }
    }), s.Scale = s.invent({
      parent: s.Matrix,
      inherit: s.Transformation,
      create: function create(t, e) {
        this.constructor.apply(this, [].slice.call(arguments));
      },
      extend: {
        arguments: ["scaleX", "scaleY", "cx", "cy"],
        method: "scale"
      }
    }), s.Skew = s.invent({
      parent: s.Matrix,
      inherit: s.Transformation,
      create: function create(t, e) {
        this.constructor.apply(this, [].slice.call(arguments));
      },
      extend: {
        arguments: ["skewX", "skewY", "cx", "cy"],
        method: "skew"
      }
    }), s.extend(s.Element, {
      style: function style(e, i) {
        if (0 == arguments.length) return this.node.style.cssText || "";
        if (arguments.length < 2) {
          if ("object" === t(e)) for (i in e) {
            this.style(i, e[i]);
          } else {
            if (!s.regex.isCss.test(e)) return this.node.style[c(e)];

            for (e = e.split(/\s*;\s*/).filter(function (t) {
              return !!t;
            }).map(function (t) {
              return t.split(/\s*:\s*/);
            }); i = e.pop();) {
              this.style(i[0], i[1]);
            }
          }
        } else this.node.style[c(e)] = null === i || s.regex.isBlank.test(i) ? "" : i;
        return this;
      }
    }), s.Parent = s.invent({
      create: function create(t) {
        this.constructor.call(this, t);
      },
      inherit: s.Element,
      extend: {
        children: function children() {
          return s.utils.map(s.utils.filterSVGElements(this.node.childNodes), function (t) {
            return s.adopt(t);
          });
        },
        add: function add(t, e) {
          return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;
        },
        put: function put(t, e) {
          return this.add(t, e), t;
        },
        has: function has(t) {
          return this.index(t) >= 0;
        },
        index: function index(t) {
          return [].slice.call(this.node.childNodes).indexOf(t.node);
        },
        get: function get(t) {
          return s.adopt(this.node.childNodes[t]);
        },
        first: function first() {
          return this.get(0);
        },
        last: function last() {
          return this.get(this.node.childNodes.length - 1);
        },
        each: function each(t, e) {
          var i,
              a,
              n = this.children();

          for (i = 0, a = n.length; i < a; i++) {
            n[i] instanceof s.Element && t.apply(n[i], [i, n]), e && n[i] instanceof s.Container && n[i].each(t, e);
          }

          return this;
        },
        removeElement: function removeElement(t) {
          return this.node.removeChild(t.node), this;
        },
        clear: function clear() {
          for (; this.node.hasChildNodes();) {
            this.node.removeChild(this.node.lastChild);
          }

          return delete this._defs, this;
        },
        defs: function defs() {
          return this.doc().defs();
        }
      }
    }), s.extend(s.Parent, {
      ungroup: function ungroup(t, e) {
        return 0 === e || this instanceof s.Defs || this.node == s.parser.draw ? this : (t = t || (this instanceof s.Doc ? this : this.parent(s.Parent)), e = e || 1 / 0, this.each(function () {
          return this instanceof s.Defs ? this : this instanceof s.Parent ? this.ungroup(t, e - 1) : this.toParent(t);
        }), this.node.firstChild || this.remove(), this);
      },
      flatten: function flatten(t, e) {
        return this.ungroup(t, e);
      }
    }), s.Container = s.invent({
      create: function create(t) {
        this.constructor.call(this, t);
      },
      inherit: s.Parent
    }), s.ViewBox = s.invent({
      create: function create(e) {
        var i,
            a,
            n,
            r,
            o,
            l,
            h,
            c = 1,
            d = 1,
            u = /[+-]?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?/gi;

        if (e instanceof s.Element) {
          for (l = e, h = e, o = (e.attr("viewBox") || "").match(u), e.bbox, n = new s.Number(e.width()), r = new s.Number(e.height()); "%" == n.unit;) {
            c *= n.value, n = new s.Number(l instanceof s.Doc ? l.parent().offsetWidth : l.parent().width()), l = l.parent();
          }

          for (; "%" == r.unit;) {
            d *= r.value, r = new s.Number(h instanceof s.Doc ? h.parent().offsetHeight : h.parent().height()), h = h.parent();
          }

          this.x = 0, this.y = 0, this.width = n * c, this.height = r * d, this.zoom = 1, o && (i = parseFloat(o[0]), a = parseFloat(o[1]), n = parseFloat(o[2]), r = parseFloat(o[3]), this.zoom = this.width / this.height > n / r ? this.height / r : this.width / n, this.x = i, this.y = a, this.width = n, this.height = r);
        } else e = "string" == typeof e ? e.match(u).map(function (t) {
          return parseFloat(t);
        }) : Array.isArray(e) ? e : "object" === t(e) ? [e.x, e.y, e.width, e.height] : 4 == arguments.length ? [].slice.call(arguments) : [0, 0, 0, 0], this.x = e[0], this.y = e[1], this.width = e[2], this.height = e[3];
      },
      extend: {
        toString: function toString() {
          return this.x + " " + this.y + " " + this.width + " " + this.height;
        },
        morph: function morph(t, e, i, a) {
          return this.destination = new s.ViewBox(t, e, i, a), this;
        },
        at: function at(t) {
          return this.destination ? new s.ViewBox([this.x + (this.destination.x - this.x) * t, this.y + (this.destination.y - this.y) * t, this.width + (this.destination.width - this.width) * t, this.height + (this.destination.height - this.height) * t]) : this;
        }
      },
      parent: s.Container,
      construct: {
        viewbox: function viewbox(t, e, i, a) {
          return 0 == arguments.length ? new s.ViewBox(this) : this.attr("viewBox", new s.ViewBox(t, e, i, a));
        }
      }
    }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach(function (t) {
      s.Element.prototype[t] = function (e) {
        return s.on(this.node, t, e), this;
      };
    }), s.listeners = [], s.handlerMap = [], s.listenerId = 0, s.on = function (t, e, i, a, n) {
      var r = i.bind(a || t.instance || t),
          o = (s.handlerMap.indexOf(t) + 1 || s.handlerMap.push(t)) - 1,
          l = e.split(".")[0],
          h = e.split(".")[1] || "*";
      s.listeners[o] = s.listeners[o] || {}, s.listeners[o][l] = s.listeners[o][l] || {}, s.listeners[o][l][h] = s.listeners[o][l][h] || {}, i._svgjsListenerId || (i._svgjsListenerId = ++s.listenerId), s.listeners[o][l][h][i._svgjsListenerId] = r, t.addEventListener(l, r, n || !1);
    }, s.off = function (t, e, i) {
      var a = s.handlerMap.indexOf(t),
          n = e && e.split(".")[0],
          r = e && e.split(".")[1],
          o = "";
      if (-1 != a) if (i) {
        if ("function" == typeof i && (i = i._svgjsListenerId), !i) return;
        s.listeners[a][n] && s.listeners[a][n][r || "*"] && (t.removeEventListener(n, s.listeners[a][n][r || "*"][i], !1), delete s.listeners[a][n][r || "*"][i]);
      } else if (r && n) {
        if (s.listeners[a][n] && s.listeners[a][n][r]) {
          for (i in s.listeners[a][n][r]) {
            s.off(t, [n, r].join("."), i);
          }

          delete s.listeners[a][n][r];
        }
      } else if (r) for (e in s.listeners[a]) {
        for (o in s.listeners[a][e]) {
          r === o && s.off(t, [e, r].join("."));
        }
      } else if (n) {
        if (s.listeners[a][n]) {
          for (o in s.listeners[a][n]) {
            s.off(t, [n, o].join("."));
          }

          delete s.listeners[a][n];
        }
      } else {
        for (e in s.listeners[a]) {
          s.off(t, e);
        }

        delete s.listeners[a], delete s.handlerMap[a];
      }
    }, s.extend(s.Element, {
      on: function on(t, e, i, a) {
        return s.on(this.node, t, e, i, a), this;
      },
      off: function off(t, e) {
        return s.off(this.node, t, e), this;
      },
      fire: function fire(t, i) {
        return t instanceof e.Event ? this.node.dispatchEvent(t) : this.node.dispatchEvent(t = new s.CustomEvent(t, {
          detail: i,
          cancelable: !0
        })), this._event = t, this;
      },
      event: function event() {
        return this._event;
      }
    }), s.Defs = s.invent({
      create: "defs",
      inherit: s.Container
    }), s.G = s.invent({
      create: "g",
      inherit: s.Container,
      extend: {
        x: function x(t) {
          return null == t ? this.transform("x") : this.transform({
            x: t - this.x()
          }, !0);
        },
        y: function y(t) {
          return null == t ? this.transform("y") : this.transform({
            y: t - this.y()
          }, !0);
        },
        cx: function cx(t) {
          return null == t ? this.gbox().cx : this.x(t - this.gbox().width / 2);
        },
        cy: function cy(t) {
          return null == t ? this.gbox().cy : this.y(t - this.gbox().height / 2);
        },
        gbox: function gbox() {
          var t = this.bbox(),
              e = this.transform();
          return t.x += e.x, t.x2 += e.x, t.cx += e.x, t.y += e.y, t.y2 += e.y, t.cy += e.y, t;
        }
      },
      construct: {
        group: function group() {
          return this.put(new s.G());
        }
      }
    }), s.Doc = s.invent({
      create: function create(t) {
        t && ("svg" == (t = "string" == typeof t ? i.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, s.create("svg")), t.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs());
      },
      inherit: s.Container,
      extend: {
        namespace: function namespace() {
          return this.attr({
            xmlns: s.ns,
            version: "1.1"
          }).attr("xmlns:xlink", s.xlink, s.xmlns).attr("xmlns:svgjs", s.svgjs, s.xmlns);
        },
        defs: function defs() {
          var t;
          this._defs || ((t = this.node.getElementsByTagName("defs")[0]) ? this._defs = s.adopt(t) : this._defs = new s.Defs(), this.node.appendChild(this._defs.node));
          return this._defs;
        },
        parent: function parent() {
          return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null;
        },
        spof: function spof() {
          var t = this.node.getScreenCTM();
          return t && this.style("left", -t.e % 1 + "px").style("top", -t.f % 1 + "px"), this;
        },
        remove: function remove() {
          return this.parent() && this.parent().removeChild(this.node), this;
        },
        clear: function clear() {
          for (; this.node.hasChildNodes();) {
            this.node.removeChild(this.node.lastChild);
          }

          return delete this._defs, s.parser.draw && !s.parser.draw.parentNode && this.node.appendChild(s.parser.draw), this;
        },
        clone: function clone(t) {
          this.writeDataToDom();
          var e = this.node,
              i = b(e.cloneNode(!0));
          return t ? (t.node || t).appendChild(i.node) : e.parentNode.insertBefore(i.node, e.nextSibling), i;
        }
      }
    }), s.extend(s.Element, {
      siblings: function siblings() {
        return this.parent().children();
      },
      position: function position() {
        return this.parent().index(this);
      },
      next: function next() {
        return this.siblings()[this.position() + 1];
      },
      previous: function previous() {
        return this.siblings()[this.position() - 1];
      },
      forward: function forward() {
        var t = this.position() + 1,
            e = this.parent();
        return e.removeElement(this).add(this, t), e instanceof s.Doc && e.node.appendChild(e.defs().node), this;
      },
      backward: function backward() {
        var t = this.position();
        return t > 0 && this.parent().removeElement(this).add(this, t - 1), this;
      },
      front: function front() {
        var t = this.parent();
        return t.node.appendChild(this.node), t instanceof s.Doc && t.node.appendChild(t.defs().node), this;
      },
      back: function back() {
        return this.position() > 0 && this.parent().removeElement(this).add(this, 0), this;
      },
      before: function before(t) {
        t.remove();
        var e = this.position();
        return this.parent().add(t, e), this;
      },
      after: function after(t) {
        t.remove();
        var e = this.position();
        return this.parent().add(t, e + 1), this;
      }
    }), s.Mask = s.invent({
      create: function create() {
        this.constructor.call(this, s.create("mask")), this.targets = [];
      },
      inherit: s.Container,
      extend: {
        remove: function remove() {
          for (var t = this.targets.length - 1; t >= 0; t--) {
            this.targets[t] && this.targets[t].unmask();
          }

          return this.targets = [], s.Element.prototype.remove.call(this), this;
        }
      },
      construct: {
        mask: function mask() {
          return this.defs().put(new s.Mask());
        }
      }
    }), s.extend(s.Element, {
      maskWith: function maskWith(t) {
        return this.masker = t instanceof s.Mask ? t : this.parent().mask().add(t), this.masker.targets.push(this), this.attr("mask", 'url("#' + this.masker.attr("id") + '")');
      },
      unmask: function unmask() {
        return delete this.masker, this.attr("mask", null);
      }
    }), s.ClipPath = s.invent({
      create: function create() {
        this.constructor.call(this, s.create("clipPath")), this.targets = [];
      },
      inherit: s.Container,
      extend: {
        remove: function remove() {
          for (var t = this.targets.length - 1; t >= 0; t--) {
            this.targets[t] && this.targets[t].unclip();
          }

          return this.targets = [], this.parent().removeElement(this), this;
        }
      },
      construct: {
        clip: function clip() {
          return this.defs().put(new s.ClipPath());
        }
      }
    }), s.extend(s.Element, {
      clipWith: function clipWith(t) {
        return this.clipper = t instanceof s.ClipPath ? t : this.parent().clip().add(t), this.clipper.targets.push(this), this.attr("clip-path", 'url("#' + this.clipper.attr("id") + '")');
      },
      unclip: function unclip() {
        return delete this.clipper, this.attr("clip-path", null);
      }
    }), s.Gradient = s.invent({
      create: function create(t) {
        this.constructor.call(this, s.create(t + "Gradient")), this.type = t;
      },
      inherit: s.Container,
      extend: {
        at: function at(t, e, i) {
          return this.put(new s.Stop()).update(t, e, i);
        },
        update: function update(t) {
          return this.clear(), "function" == typeof t && t.call(this, this), this;
        },
        fill: function fill() {
          return "url(#" + this.id() + ")";
        },
        toString: function toString() {
          return this.fill();
        },
        attr: function attr(t, e, i) {
          return "transform" == t && (t = "gradientTransform"), s.Container.prototype.attr.call(this, t, e, i);
        }
      },
      construct: {
        gradient: function gradient(t, e) {
          return this.defs().gradient(t, e);
        }
      }
    }), s.extend(s.Gradient, s.FX, {
      from: function from(t, e) {
        return "radial" == (this._target || this).type ? this.attr({
          fx: new s.Number(t),
          fy: new s.Number(e)
        }) : this.attr({
          x1: new s.Number(t),
          y1: new s.Number(e)
        });
      },
      to: function to(t, e) {
        return "radial" == (this._target || this).type ? this.attr({
          cx: new s.Number(t),
          cy: new s.Number(e)
        }) : this.attr({
          x2: new s.Number(t),
          y2: new s.Number(e)
        });
      }
    }), s.extend(s.Defs, {
      gradient: function gradient(t, e) {
        return this.put(new s.Gradient(t)).update(e);
      }
    }), s.Stop = s.invent({
      create: "stop",
      inherit: s.Element,
      extend: {
        update: function update(t) {
          return ("number" == typeof t || t instanceof s.Number) && (t = {
            offset: arguments[0],
            color: arguments[1],
            opacity: arguments[2]
          }), null != t.opacity && this.attr("stop-opacity", t.opacity), null != t.color && this.attr("stop-color", t.color), null != t.offset && this.attr("offset", new s.Number(t.offset)), this;
        }
      }
    }), s.Pattern = s.invent({
      create: "pattern",
      inherit: s.Container,
      extend: {
        fill: function fill() {
          return "url(#" + this.id() + ")";
        },
        update: function update(t) {
          return this.clear(), "function" == typeof t && t.call(this, this), this;
        },
        toString: function toString() {
          return this.fill();
        },
        attr: function attr(t, e, i) {
          return "transform" == t && (t = "patternTransform"), s.Container.prototype.attr.call(this, t, e, i);
        }
      },
      construct: {
        pattern: function pattern(t, e, i) {
          return this.defs().pattern(t, e, i);
        }
      }
    }), s.extend(s.Defs, {
      pattern: function pattern(t, e, i) {
        return this.put(new s.Pattern()).update(i).attr({
          x: 0,
          y: 0,
          width: t,
          height: e,
          patternUnits: "userSpaceOnUse"
        });
      }
    }), s.Shape = s.invent({
      create: function create(t) {
        this.constructor.call(this, t);
      },
      inherit: s.Element
    }), s.Bare = s.invent({
      create: function create(t, e) {
        if (this.constructor.call(this, s.create(t)), e) for (var i in e.prototype) {
          "function" == typeof e.prototype[i] && (this[i] = e.prototype[i]);
        }
      },
      inherit: s.Element,
      extend: {
        words: function words(t) {
          for (; this.node.hasChildNodes();) {
            this.node.removeChild(this.node.lastChild);
          }

          return this.node.appendChild(i.createTextNode(t)), this;
        }
      }
    }), s.extend(s.Parent, {
      element: function element(t, e) {
        return this.put(new s.Bare(t, e));
      }
    }), s.Symbol = s.invent({
      create: "symbol",
      inherit: s.Container,
      construct: {
        symbol: function symbol() {
          return this.put(new s.Symbol());
        }
      }
    }), s.Use = s.invent({
      create: "use",
      inherit: s.Shape,
      extend: {
        element: function element(t, e) {
          return this.attr("href", (e || "") + "#" + t, s.xlink);
        }
      },
      construct: {
        use: function use(t, e) {
          return this.put(new s.Use()).element(t, e);
        }
      }
    }), s.Rect = s.invent({
      create: "rect",
      inherit: s.Shape,
      construct: {
        rect: function rect(t, e) {
          return this.put(new s.Rect()).size(t, e);
        }
      }
    }), s.Circle = s.invent({
      create: "circle",
      inherit: s.Shape,
      construct: {
        circle: function circle(t) {
          return this.put(new s.Circle()).rx(new s.Number(t).divide(2)).move(0, 0);
        }
      }
    }), s.extend(s.Circle, s.FX, {
      rx: function rx(t) {
        return this.attr("r", t);
      },
      ry: function ry(t) {
        return this.rx(t);
      }
    }), s.Ellipse = s.invent({
      create: "ellipse",
      inherit: s.Shape,
      construct: {
        ellipse: function ellipse(t, e) {
          return this.put(new s.Ellipse()).size(t, e).move(0, 0);
        }
      }
    }), s.extend(s.Ellipse, s.Rect, s.FX, {
      rx: function rx(t) {
        return this.attr("rx", t);
      },
      ry: function ry(t) {
        return this.attr("ry", t);
      }
    }), s.extend(s.Circle, s.Ellipse, {
      x: function x(t) {
        return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());
      },
      y: function y(t) {
        return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());
      },
      cx: function cx(t) {
        return null == t ? this.attr("cx") : this.attr("cx", t);
      },
      cy: function cy(t) {
        return null == t ? this.attr("cy") : this.attr("cy", t);
      },
      width: function width(t) {
        return null == t ? 2 * this.rx() : this.rx(new s.Number(t).divide(2));
      },
      height: function height(t) {
        return null == t ? 2 * this.ry() : this.ry(new s.Number(t).divide(2));
      },
      size: function size(t, e) {
        var i = g(this, t, e);
        return this.rx(new s.Number(i.width).divide(2)).ry(new s.Number(i.height).divide(2));
      }
    }), s.Line = s.invent({
      create: "line",
      inherit: s.Shape,
      extend: {
        array: function array() {
          return new s.PointArray([[this.attr("x1"), this.attr("y1")], [this.attr("x2"), this.attr("y2")]]);
        },
        plot: function plot(t, e, i, a) {
          return null == t ? this.array() : (t = void 0 !== e ? {
            x1: t,
            y1: e,
            x2: i,
            y2: a
          } : new s.PointArray(t).toLine(), this.attr(t));
        },
        move: function move(t, e) {
          return this.attr(this.array().move(t, e).toLine());
        },
        size: function size(t, e) {
          var i = g(this, t, e);
          return this.attr(this.array().size(i.width, i.height).toLine());
        }
      },
      construct: {
        line: function line(t, e, i, a) {
          return s.Line.prototype.plot.apply(this.put(new s.Line()), null != t ? [t, e, i, a] : [0, 0, 0, 0]);
        }
      }
    }), s.Polyline = s.invent({
      create: "polyline",
      inherit: s.Shape,
      construct: {
        polyline: function polyline(t) {
          return this.put(new s.Polyline()).plot(t || new s.PointArray());
        }
      }
    }), s.Polygon = s.invent({
      create: "polygon",
      inherit: s.Shape,
      construct: {
        polygon: function polygon(t) {
          return this.put(new s.Polygon()).plot(t || new s.PointArray());
        }
      }
    }), s.extend(s.Polyline, s.Polygon, {
      array: function array() {
        return this._array || (this._array = new s.PointArray(this.attr("points")));
      },
      plot: function plot(t) {
        return null == t ? this.array() : this.clear().attr("points", "string" == typeof t ? t : this._array = new s.PointArray(t));
      },
      clear: function clear() {
        return delete this._array, this;
      },
      move: function move(t, e) {
        return this.attr("points", this.array().move(t, e));
      },
      size: function size(t, e) {
        var i = g(this, t, e);
        return this.attr("points", this.array().size(i.width, i.height));
      }
    }), s.extend(s.Line, s.Polyline, s.Polygon, {
      morphArray: s.PointArray,
      x: function x(t) {
        return null == t ? this.bbox().x : this.move(t, this.bbox().y);
      },
      y: function y(t) {
        return null == t ? this.bbox().y : this.move(this.bbox().x, t);
      },
      width: function width(t) {
        var e = this.bbox();
        return null == t ? e.width : this.size(t, e.height);
      },
      height: function height(t) {
        var e = this.bbox();
        return null == t ? e.height : this.size(e.width, t);
      }
    }), s.Path = s.invent({
      create: "path",
      inherit: s.Shape,
      extend: {
        morphArray: s.PathArray,
        array: function array() {
          return this._array || (this._array = new s.PathArray(this.attr("d")));
        },
        plot: function plot(t) {
          return null == t ? this.array() : this.clear().attr("d", "string" == typeof t ? t : this._array = new s.PathArray(t));
        },
        clear: function clear() {
          return delete this._array, this;
        },
        move: function move(t, e) {
          return this.attr("d", this.array().move(t, e));
        },
        x: function x(t) {
          return null == t ? this.bbox().x : this.move(t, this.bbox().y);
        },
        y: function y(t) {
          return null == t ? this.bbox().y : this.move(this.bbox().x, t);
        },
        size: function size(t, e) {
          var i = g(this, t, e);
          return this.attr("d", this.array().size(i.width, i.height));
        },
        width: function width(t) {
          return null == t ? this.bbox().width : this.size(t, this.bbox().height);
        },
        height: function height(t) {
          return null == t ? this.bbox().height : this.size(this.bbox().width, t);
        }
      },
      construct: {
        path: function path(t) {
          return this.put(new s.Path()).plot(t || new s.PathArray());
        }
      }
    }), s.Image = s.invent({
      create: "image",
      inherit: s.Shape,
      extend: {
        load: function load(t) {
          if (!t) return this;
          var i = this,
              a = new e.Image();
          return s.on(a, "load", function () {
            s.off(a);
            var e = i.parent(s.Pattern);
            null !== e && (0 == i.width() && 0 == i.height() && i.size(a.width, a.height), e && 0 == e.width() && 0 == e.height() && e.size(i.width(), i.height()), "function" == typeof i._loaded && i._loaded.call(i, {
              width: a.width,
              height: a.height,
              ratio: a.width / a.height,
              url: t
            }));
          }), s.on(a, "error", function (t) {
            s.off(a), "function" == typeof i._error && i._error.call(i, t);
          }), this.attr("href", a.src = this.src = t, s.xlink);
        },
        loaded: function loaded(t) {
          return this._loaded = t, this;
        },
        error: function error(t) {
          return this._error = t, this;
        }
      },
      construct: {
        image: function image(t, e, i) {
          return this.put(new s.Image()).load(t).size(e || 0, i || e || 0);
        }
      }
    }), s.Text = s.invent({
      create: function create() {
        this.constructor.call(this, s.create("text")), this.dom.leading = new s.Number(1.3), this._rebuild = !0, this._build = !1, this.attr("font-family", s.defaults.attrs["font-family"]);
      },
      inherit: s.Shape,
      extend: {
        x: function x(t) {
          return null == t ? this.attr("x") : this.attr("x", t);
        },
        y: function y(t) {
          var e = this.attr("y"),
              i = "number" == typeof e ? e - this.bbox().y : 0;
          return null == t ? "number" == typeof e ? e - i : e : this.attr("y", "number" == typeof t.valueOf() ? t + i : t);
        },
        cx: function cx(t) {
          return null == t ? this.bbox().cx : this.x(t - this.bbox().width / 2);
        },
        cy: function cy(t) {
          return null == t ? this.bbox().cy : this.y(t - this.bbox().height / 2);
        },
        text: function text(t) {
          if (void 0 === t) {
            t = "";

            for (var e = this.node.childNodes, i = 0, a = e.length; i < a; ++i) {
              0 != i && 3 != e[i].nodeType && 1 == s.adopt(e[i]).dom.newLined && (t += "\n"), t += e[i].textContent;
            }

            return t;
          }

          if (this.clear().build(!0), "function" == typeof t) t.call(this, this);else {
            i = 0;

            for (var n = (t = t.split("\n")).length; i < n; i++) {
              this.tspan(t[i]).newLine();
            }
          }
          return this.build(!1).rebuild();
        },
        size: function size(t) {
          return this.attr("font-size", t).rebuild();
        },
        leading: function leading(t) {
          return null == t ? this.dom.leading : (this.dom.leading = new s.Number(t), this.rebuild());
        },
        lines: function lines() {
          var t = (this.textPath && this.textPath() || this).node,
              e = s.utils.map(s.utils.filterSVGElements(t.childNodes), function (t) {
            return s.adopt(t);
          });
          return new s.Set(e);
        },
        rebuild: function rebuild(t) {
          if ("boolean" == typeof t && (this._rebuild = t), this._rebuild) {
            var e = this,
                i = 0,
                a = this.dom.leading * new s.Number(this.attr("font-size"));
            this.lines().each(function () {
              this.dom.newLined && (e.textPath() || this.attr("x", e.attr("x")), "\n" == this.text() ? i += a : (this.attr("dy", a + i), i = 0));
            }), this.fire("rebuild");
          }

          return this;
        },
        build: function build(t) {
          return this._build = !!t, this;
        },
        setData: function setData(t) {
          return this.dom = t, this.dom.leading = new s.Number(t.leading || 1.3), this;
        }
      },
      construct: {
        text: function text(t) {
          return this.put(new s.Text()).text(t);
        },
        plain: function plain(t) {
          return this.put(new s.Text()).plain(t);
        }
      }
    }), s.Tspan = s.invent({
      create: "tspan",
      inherit: s.Shape,
      extend: {
        text: function text(t) {
          return null == t ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t ? t.call(this, this) : this.plain(t), this);
        },
        dx: function dx(t) {
          return this.attr("dx", t);
        },
        dy: function dy(t) {
          return this.attr("dy", t);
        },
        newLine: function newLine() {
          var t = this.parent(s.Text);
          return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr("font-size")).attr("x", t.x());
        }
      }
    }), s.extend(s.Text, s.Tspan, {
      plain: function plain(t) {
        return !1 === this._build && this.clear(), this.node.appendChild(i.createTextNode(t)), this;
      },
      tspan: function tspan(t) {
        var e = (this.textPath && this.textPath() || this).node,
            i = new s.Tspan();
        return !1 === this._build && this.clear(), e.appendChild(i.node), i.text(t);
      },
      clear: function clear() {
        for (var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();) {
          t.removeChild(t.lastChild);
        }

        return this;
      },
      length: function length() {
        return this.node.getComputedTextLength();
      }
    }), s.TextPath = s.invent({
      create: "textPath",
      inherit: s.Parent,
      parent: s.Text,
      construct: {
        morphArray: s.PathArray,
        path: function path(t) {
          for (var e = new s.TextPath(), i = this.doc().defs().path(t); this.node.hasChildNodes();) {
            e.node.appendChild(this.node.firstChild);
          }

          return this.node.appendChild(e.node), e.attr("href", "#" + i, s.xlink), this;
        },
        array: function array() {
          var t = this.track();
          return t ? t.array() : null;
        },
        plot: function plot(t) {
          var e = this.track(),
              i = null;
          return e && (i = e.plot(t)), null == t ? i : this;
        },
        track: function track() {
          var t = this.textPath();
          if (t) return t.reference("href");
        },
        textPath: function textPath() {
          if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return s.adopt(this.node.firstChild);
        }
      }
    }), s.Nested = s.invent({
      create: function create() {
        this.constructor.call(this, s.create("svg")), this.style("overflow", "visible");
      },
      inherit: s.Container,
      construct: {
        nested: function nested() {
          return this.put(new s.Nested());
        }
      }
    }), s.A = s.invent({
      create: "a",
      inherit: s.Container,
      extend: {
        to: function to(t) {
          return this.attr("href", t, s.xlink);
        },
        show: function show(t) {
          return this.attr("show", t, s.xlink);
        },
        target: function target(t) {
          return this.attr("target", t);
        }
      },
      construct: {
        link: function link(t) {
          return this.put(new s.A()).to(t);
        }
      }
    }), s.extend(s.Element, {
      linkTo: function linkTo(t) {
        var e = new s.A();
        return "function" == typeof t ? t.call(e, e) : e.to(t), this.parent().put(e).put(this);
      }
    }), s.Marker = s.invent({
      create: "marker",
      inherit: s.Container,
      extend: {
        width: function width(t) {
          return this.attr("markerWidth", t);
        },
        height: function height(t) {
          return this.attr("markerHeight", t);
        },
        ref: function ref(t, e) {
          return this.attr("refX", t).attr("refY", e);
        },
        update: function update(t) {
          return this.clear(), "function" == typeof t && t.call(this, this), this;
        },
        toString: function toString() {
          return "url(#" + this.id() + ")";
        }
      },
      construct: {
        marker: function marker(t, e, i) {
          return this.defs().marker(t, e, i);
        }
      }
    }), s.extend(s.Defs, {
      marker: function marker(t, e, i) {
        return this.put(new s.Marker()).size(t, e).ref(t / 2, e / 2).viewbox(0, 0, t, e).attr("orient", "auto").update(i);
      }
    }), s.extend(s.Line, s.Polyline, s.Polygon, s.Path, {
      marker: function marker(t, e, i, a) {
        var n = ["marker"];
        return "all" != t && n.push(t), n = n.join("-"), t = arguments[1] instanceof s.Marker ? arguments[1] : this.doc().marker(e, i, a), this.attr(n, t);
      }
    });
    var l = {
      stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"],
      fill: ["color", "opacity", "rule"],
      prefix: function prefix(t, e) {
        return "color" == e ? t : t + "-" + e;
      }
    };

    function h(t, e, i, a) {
      return i + a.replace(s.regex.dots, " .");
    }

    function c(t) {
      return t.toLowerCase().replace(/-(.)/g, function (t, e) {
        return e.toUpperCase();
      });
    }

    function d(t) {
      return t.charAt(0).toUpperCase() + t.slice(1);
    }

    function u(t) {
      var e = t.toString(16);
      return 1 == e.length ? "0" + e : e;
    }

    function g(t, e, i) {
      if (null == e || null == i) {
        var s = t.bbox();
        null == e ? e = s.width / s.height * i : null == i && (i = s.height / s.width * e);
      }

      return {
        width: e,
        height: i
      };
    }

    function f(t, e, i) {
      return {
        x: e * t.a + i * t.c + 0,
        y: e * t.b + i * t.d + 0
      };
    }

    function p(t) {
      return {
        a: t[0],
        b: t[1],
        c: t[2],
        d: t[3],
        e: t[4],
        f: t[5]
      };
    }

    function x(t, e) {
      t.cx = null == t.cx ? e.bbox().cx : t.cx, t.cy = null == t.cy ? e.bbox().cy : t.cy;
    }

    function b(t) {
      for (var i = t.childNodes.length - 1; i >= 0; i--) {
        t.childNodes[i] instanceof e.SVGElement && b(t.childNodes[i]);
      }

      return s.adopt(t).id(s.eid(t.nodeName));
    }

    function m(t) {
      return null == t.x && (t.x = 0, t.y = 0, t.width = 0, t.height = 0), t.w = t.width, t.h = t.height, t.x2 = t.x + t.width, t.y2 = t.y + t.height, t.cx = t.x + t.width / 2, t.cy = t.y + t.height / 2, t;
    }

    function v(t) {
      return Math.abs(t) > 1e-37 ? t : 0;
    }

    ["fill", "stroke"].forEach(function (t) {
      var e,
          i = {};
      i[t] = function (i) {
        if (void 0 === i) return this;
        if ("string" == typeof i || s.Color.isRgb(i) || i && "function" == typeof i.fill) this.attr(t, i);else for (e = l[t].length - 1; e >= 0; e--) {
          null != i[l[t][e]] && this.attr(l.prefix(t, l[t][e]), i[l[t][e]]);
        }
        return this;
      }, s.extend(s.Element, s.FX, i);
    }), s.extend(s.Element, s.FX, {
      rotate: function rotate(t, e, i) {
        return this.transform({
          rotation: t,
          cx: e,
          cy: i
        });
      },
      skew: function skew(t, e, i, s) {
        return 1 == arguments.length || 3 == arguments.length ? this.transform({
          skew: t,
          cx: e,
          cy: i
        }) : this.transform({
          skewX: t,
          skewY: e,
          cx: i,
          cy: s
        });
      },
      scale: function scale(t, e, i, s) {
        return 1 == arguments.length || 3 == arguments.length ? this.transform({
          scale: t,
          cx: e,
          cy: i
        }) : this.transform({
          scaleX: t,
          scaleY: e,
          cx: i,
          cy: s
        });
      },
      translate: function translate(t, e) {
        return this.transform({
          x: t,
          y: e
        });
      },
      flip: function flip(t, e) {
        return e = "number" == typeof t ? t : e, this.transform({
          flip: t || "both",
          offset: e
        });
      },
      matrix: function matrix(t) {
        return this.attr("transform", new s.Matrix(6 == arguments.length ? [].slice.call(arguments) : t));
      },
      opacity: function opacity(t) {
        return this.attr("opacity", t);
      },
      dx: function dx(t) {
        return this.x(new s.Number(t).plus(this instanceof s.FX ? 0 : this.x()), !0);
      },
      dy: function dy(t) {
        return this.y(new s.Number(t).plus(this instanceof s.FX ? 0 : this.y()), !0);
      },
      dmove: function dmove(t, e) {
        return this.dx(t).dy(e);
      }
    }), s.extend(s.Rect, s.Ellipse, s.Circle, s.Gradient, s.FX, {
      radius: function radius(t, e) {
        var i = (this._target || this).type;
        return "radial" == i || "circle" == i ? this.attr("r", new s.Number(t)) : this.rx(t).ry(null == e ? t : e);
      }
    }), s.extend(s.Path, {
      length: function length() {
        return this.node.getTotalLength();
      },
      pointAt: function pointAt(t) {
        return this.node.getPointAtLength(t);
      }
    }), s.extend(s.Parent, s.Text, s.Tspan, s.FX, {
      font: function font(e, i) {
        if ("object" === t(e)) for (i in e) {
          this.font(i, e[i]);
        }
        return "leading" == e ? this.leading(i) : "anchor" == e ? this.attr("text-anchor", i) : "size" == e || "family" == e || "weight" == e || "stretch" == e || "variant" == e || "style" == e ? this.attr("font-" + e, i) : this.attr(e, i);
      }
    }), s.Set = s.invent({
      create: function create(t) {
        Array.isArray(t) ? this.members = t : this.clear();
      },
      extend: {
        add: function add() {
          var t,
              e,
              i = [].slice.call(arguments);

          for (t = 0, e = i.length; t < e; t++) {
            this.members.push(i[t]);
          }

          return this;
        },
        remove: function remove(t) {
          var e = this.index(t);
          return e > -1 && this.members.splice(e, 1), this;
        },
        each: function each(t) {
          for (var e = 0, i = this.members.length; e < i; e++) {
            t.apply(this.members[e], [e, this.members]);
          }

          return this;
        },
        clear: function clear() {
          return this.members = [], this;
        },
        length: function length() {
          return this.members.length;
        },
        has: function has(t) {
          return this.index(t) >= 0;
        },
        index: function index(t) {
          return this.members.indexOf(t);
        },
        get: function get(t) {
          return this.members[t];
        },
        first: function first() {
          return this.get(0);
        },
        last: function last() {
          return this.get(this.members.length - 1);
        },
        valueOf: function valueOf() {
          return this.members;
        },
        bbox: function bbox() {
          if (0 == this.members.length) return new s.RBox();
          var t = this.members[0].rbox(this.members[0].doc());
          return this.each(function () {
            t = t.merge(this.rbox(this.doc()));
          }), t;
        }
      },
      construct: {
        set: function set(t) {
          return new s.Set(t);
        }
      }
    }), s.FX.Set = s.invent({
      create: function create(t) {
        this.set = t;
      }
    }), s.Set.inherit = function () {
      var t = [];

      for (var e in s.Shape.prototype) {
        "function" == typeof s.Shape.prototype[e] && "function" != typeof s.Set.prototype[e] && t.push(e);
      }

      for (var e in t.forEach(function (t) {
        s.Set.prototype[t] = function () {
          for (var e = 0, i = this.members.length; e < i; e++) {
            this.members[e] && "function" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);
          }

          return "animate" == t ? this.fx || (this.fx = new s.FX.Set(this)) : this;
        };
      }), t = [], s.FX.prototype) {
        "function" == typeof s.FX.prototype[e] && "function" != typeof s.FX.Set.prototype[e] && t.push(e);
      }

      t.forEach(function (t) {
        s.FX.Set.prototype[t] = function () {
          for (var e = 0, i = this.set.members.length; e < i; e++) {
            this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);
          }

          return this;
        };
      });
    }, s.extend(s.Element, {
      data: function data(e, i, s) {
        if ("object" === t(e)) for (i in e) {
          this.data(i, e[i]);
        } else if (arguments.length < 2) try {
          return JSON.parse(this.attr("data-" + e));
        } catch (t) {
          return this.attr("data-" + e);
        } else this.attr("data-" + e, null === i ? null : !0 === s || "string" == typeof i || "number" == typeof i ? i : JSON.stringify(i));
        return this;
      }
    }), s.extend(s.Element, {
      remember: function remember(e, i) {
        if ("object" === t(arguments[0])) for (var i in e) {
          this.remember(i, e[i]);
        } else {
          if (1 == arguments.length) return this.memory()[e];
          this.memory()[e] = i;
        }
        return this;
      },
      forget: function forget() {
        if (0 == arguments.length) this._memory = {};else for (var t = arguments.length - 1; t >= 0; t--) {
          delete this.memory()[arguments[t]];
        }
        return this;
      },
      memory: function memory() {
        return this._memory || (this._memory = {});
      }
    }), s.get = function (t) {
      var e = i.getElementById(function (t) {
        var e = (t || "").toString().match(s.regex.reference);
        if (e) return e[1];
      }(t) || t);
      return s.adopt(e);
    }, s.select = function (t, e) {
      return new s.Set(s.utils.map((e || i).querySelectorAll(t), function (t) {
        return s.adopt(t);
      }));
    }, s.extend(s.Parent, {
      select: function select(t) {
        return s.select(t, this.node);
      }
    });
    var y = "abcdef".split("");

    if ("function" != typeof e.CustomEvent) {
      var w = function w(t, e) {
        e = e || {
          bubbles: !1,
          cancelable: !1,
          detail: void 0
        };
        var s = i.createEvent("CustomEvent");
        return s.initCustomEvent(t, e.bubbles, e.cancelable, e.detail), s;
      };

      w.prototype = e.Event.prototype, s.CustomEvent = w;
    } else s.CustomEvent = e.CustomEvent;

    return function (t) {
      for (var i = 0, s = ["moz", "webkit"], a = 0; a < s.length && !e.requestAnimationFrame; ++a) {
        t.requestAnimationFrame = t[s[a] + "RequestAnimationFrame"], t.cancelAnimationFrame = t[s[a] + "CancelAnimationFrame"] || t[s[a] + "CancelRequestAnimationFrame"];
      }

      t.requestAnimationFrame = t.requestAnimationFrame || function (e) {
        var s = new Date().getTime(),
            a = Math.max(0, 16 - (s - i)),
            n = t.setTimeout(function () {
          e(s + a);
        }, a);
        return i = s + a, n;
      }, t.cancelAnimationFrame = t.cancelAnimationFrame || t.clearTimeout;
    }(e), s;
  },  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return _at(st, st.document);
  }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0, function () {
    SVG.Filter = SVG.invent({
      create: "filter",
      inherit: SVG.Parent,
      extend: {
        source: "SourceGraphic",
        sourceAlpha: "SourceAlpha",
        background: "BackgroundImage",
        backgroundAlpha: "BackgroundAlpha",
        fill: "FillPaint",
        stroke: "StrokePaint",
        autoSetIn: !0,
        put: function put(t, e) {
          return this.add(t, e), !t.attr("in") && this.autoSetIn && t.attr("in", this.source), t.attr("result") || t.attr("result", t), t;
        },
        blend: function blend(t, e, i) {
          return this.put(new SVG.BlendEffect(t, e, i));
        },
        colorMatrix: function colorMatrix(t, e) {
          return this.put(new SVG.ColorMatrixEffect(t, e));
        },
        convolveMatrix: function convolveMatrix(t) {
          return this.put(new SVG.ConvolveMatrixEffect(t));
        },
        componentTransfer: function componentTransfer(t) {
          return this.put(new SVG.ComponentTransferEffect(t));
        },
        composite: function composite(t, e, i) {
          return this.put(new SVG.CompositeEffect(t, e, i));
        },
        flood: function flood(t, e) {
          return this.put(new SVG.FloodEffect(t, e));
        },
        offset: function offset(t, e) {
          return this.put(new SVG.OffsetEffect(t, e));
        },
        image: function image(t) {
          return this.put(new SVG.ImageEffect(t));
        },
        merge: function merge() {
          var t = [void 0];

          for (var e in arguments) {
            t.push(arguments[e]);
          }

          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))());
        },
        gaussianBlur: function gaussianBlur(t, e) {
          return this.put(new SVG.GaussianBlurEffect(t, e));
        },
        morphology: function morphology(t, e) {
          return this.put(new SVG.MorphologyEffect(t, e));
        },
        diffuseLighting: function diffuseLighting(t, e, i) {
          return this.put(new SVG.DiffuseLightingEffect(t, e, i));
        },
        displacementMap: function displacementMap(t, e, i, s, a) {
          return this.put(new SVG.DisplacementMapEffect(t, e, i, s, a));
        },
        specularLighting: function specularLighting(t, e, i, s) {
          return this.put(new SVG.SpecularLightingEffect(t, e, i, s));
        },
        tile: function tile() {
          return this.put(new SVG.TileEffect());
        },
        turbulence: function turbulence(t, e, i, s, a) {
          return this.put(new SVG.TurbulenceEffect(t, e, i, s, a));
        },
        toString: function toString() {
          return "url(#" + this.attr("id") + ")";
        }
      }
    }), SVG.extend(SVG.Defs, {
      filter: function filter(t) {
        var e = this.put(new SVG.Filter());
        return "function" == typeof t && t.call(e, e), e;
      }
    }), SVG.extend(SVG.Container, {
      filter: function filter(t) {
        return this.defs().filter(t);
      }
    }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
      filter: function filter(t) {
        return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer;
      },
      unfilter: function unfilter(t) {
        return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr("filter", null);
      }
    }), SVG.Effect = SVG.invent({
      create: function create() {
        this.constructor.call(this);
      },
      inherit: SVG.Element,
      extend: {
        "in": function _in(t) {
          return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t);
        },
        result: function result(t) {
          return null == t ? this.attr("result") : this.attr("result", t);
        },
        toString: function toString() {
          return this.result();
        }
      }
    }), SVG.ParentEffect = SVG.invent({
      create: function create() {
        this.constructor.call(this);
      },
      inherit: SVG.Parent,
      extend: {
        "in": function _in(t) {
          return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t);
        },
        result: function result(t) {
          return null == t ? this.attr("result") : this.attr("result", t);
        },
        toString: function toString() {
          return this.result();
        }
      }
    });
    var t = {
      blend: function blend(t, e) {
        return this.parent() && this.parent().blend(this, t, e);
      },
      colorMatrix: function colorMatrix(t, e) {
        return this.parent() && this.parent().colorMatrix(t, e)["in"](this);
      },
      convolveMatrix: function convolveMatrix(t) {
        return this.parent() && this.parent().convolveMatrix(t)["in"](this);
      },
      componentTransfer: function componentTransfer(t) {
        return this.parent() && this.parent().componentTransfer(t)["in"](this);
      },
      composite: function composite(t, e) {
        return this.parent() && this.parent().composite(this, t, e);
      },
      flood: function flood(t, e) {
        return this.parent() && this.parent().flood(t, e);
      },
      offset: function offset(t, e) {
        return this.parent() && this.parent().offset(t, e)["in"](this);
      },
      image: function image(t) {
        return this.parent() && this.parent().image(t);
      },
      merge: function merge() {
        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));
      },
      gaussianBlur: function gaussianBlur(t, e) {
        return this.parent() && this.parent().gaussianBlur(t, e)["in"](this);
      },
      morphology: function morphology(t, e) {
        return this.parent() && this.parent().morphology(t, e)["in"](this);
      },
      diffuseLighting: function diffuseLighting(t, e, i) {
        return this.parent() && this.parent().diffuseLighting(t, e, i)["in"](this);
      },
      displacementMap: function displacementMap(t, e, i, s) {
        return this.parent() && this.parent().displacementMap(this, t, e, i, s);
      },
      specularLighting: function specularLighting(t, e, i, s) {
        return this.parent() && this.parent().specularLighting(t, e, i, s)["in"](this);
      },
      tile: function tile() {
        return this.parent() && this.parent().tile()["in"](this);
      },
      turbulence: function turbulence(t, e, i, s, a) {
        return this.parent() && this.parent().turbulence(t, e, i, s, a)["in"](this);
      }
    };
    SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({
      create: function create() {
        this.constructor.call(this);
      },
      inherit: SVG.Element,
      extend: {
        "in": function _in(t) {
          this.attr("in", t);
        }
      }
    });
    var e = {
      blend: function blend(t, e, i) {
        this.attr({
          "in": t,
          in2: e,
          mode: i || "normal"
        });
      },
      colorMatrix: function colorMatrix(t, e) {
        "matrix" == t && (e = a(e)), this.attr({
          type: t,
          values: void 0 === e ? null : e
        });
      },
      convolveMatrix: function convolveMatrix(t) {
        t = a(t), this.attr({
          order: Math.sqrt(t.split(" ").length),
          kernelMatrix: t
        });
      },
      composite: function composite(t, e, i) {
        this.attr({
          "in": t,
          in2: e,
          operator: i
        });
      },
      flood: function flood(t, e) {
        this.attr("flood-color", t), null != e && this.attr("flood-opacity", e);
      },
      offset: function offset(t, e) {
        this.attr({
          dx: t,
          dy: e
        });
      },
      image: function image(t) {
        this.attr("href", t, SVG.xlink);
      },
      displacementMap: function displacementMap(t, e, i, s, a) {
        this.attr({
          "in": t,
          in2: e,
          scale: i,
          xChannelSelector: s,
          yChannelSelector: a
        });
      },
      gaussianBlur: function gaussianBlur(t, e) {
        null != t || null != e ? this.attr("stdDeviation", function (t) {
          if (!Array.isArray(t)) return t;

          for (var e = 0, i = t.length, s = []; e < i; e++) {
            s.push(t[e]);
          }

          return s.join(" ");
        }(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0");
      },
      morphology: function morphology(t, e) {
        this.attr({
          operator: t,
          radius: e
        });
      },
      tile: function tile() {},
      turbulence: function turbulence(t, e, i, s, a) {
        this.attr({
          numOctaves: e,
          seed: i,
          stitchTiles: s,
          baseFrequency: t,
          type: a
        });
      }
    },
        i = {
      merge: function merge() {
        var t;

        if (arguments[0] instanceof SVG.Set) {
          var e = this;
          arguments[0].each(function (t) {
            this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this));
          });
        } else {
          t = Array.isArray(arguments[0]) ? arguments[0] : arguments;

          for (var i = 0; i < t.length; i++) {
            t[i] instanceof SVG.MergeNode ? this.put(t[i]) : this.put(new SVG.MergeNode(t[i]));
          }
        }
      },
      componentTransfer: function componentTransfer(t) {
        if (this.rgb = new SVG.Set(), ["r", "g", "b", "a"].forEach(function (t) {
          this[t] = new SVG["Func" + t.toUpperCase()]("identity"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);
        }.bind(this)), t) for (var e in t.rgb && (["r", "g", "b"].forEach(function (e) {
          this[e].attr(t.rgb);
        }.bind(this)), delete t.rgb), t) {
          this[e].attr(t[e]);
        }
      },
      diffuseLighting: function diffuseLighting(t, e, i) {
        this.attr({
          surfaceScale: t,
          diffuseConstant: e,
          kernelUnitLength: i
        });
      },
      specularLighting: function specularLighting(t, e, i, s) {
        this.attr({
          surfaceScale: t,
          diffuseConstant: e,
          specularExponent: i,
          kernelUnitLength: s
        });
      }
    },
        s = {
      distantLight: function distantLight(t, e) {
        this.attr({
          azimuth: t,
          elevation: e
        });
      },
      pointLight: function pointLight(t, e, i) {
        this.attr({
          x: t,
          y: e,
          z: i
        });
      },
      spotLight: function spotLight(t, e, i, s, a, n) {
        this.attr({
          x: t,
          y: e,
          z: i,
          pointsAtX: s,
          pointsAtY: a,
          pointsAtZ: n
        });
      },
      mergeNode: function mergeNode(t) {
        this.attr("in", t);
      }
    };

    function a(t) {
      return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ");
    }

    function n() {
      var t = function t() {};

      for (var e in "function" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) {
        for (var i in arguments[e]) {
          t(arguments[e][i], i, arguments[e]);
        }
      }
    }

    ["r", "g", "b", "a"].forEach(function (t) {
      s["Func" + t.toUpperCase()] = function (t) {
        switch (this.attr("type", t), t) {
          case "table":
            this.attr("tableValues", arguments[1]);
            break;

          case "linear":
            this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
            break;

          case "gamma":
            this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2]);
        }
      };
    }), n(e, function (t, e) {
      var i = e.charAt(0).toUpperCase() + e.slice(1);
      SVG[i + "Effect"] = SVG.invent({
        create: function create() {
          this.constructor.call(this, SVG.create("fe" + i)), t.apply(this, arguments), this.result(this.attr("id") + "Out");
        },
        inherit: SVG.Effect,
        extend: {}
      });
    }), n(i, function (t, e) {
      var i = e.charAt(0).toUpperCase() + e.slice(1);
      SVG[i + "Effect"] = SVG.invent({
        create: function create() {
          this.constructor.call(this, SVG.create("fe" + i)), t.apply(this, arguments), this.result(this.attr("id") + "Out");
        },
        inherit: SVG.ParentEffect,
        extend: {}
      });
    }), n(s, function (t, e) {
      var i = e.charAt(0).toUpperCase() + e.slice(1);
      SVG[i] = SVG.invent({
        create: function create() {
          this.constructor.call(this, SVG.create("fe" + i)), t.apply(this, arguments);
        },
        inherit: SVG.ChildEffect,
        extend: {}
      });
    }), SVG.extend(SVG.MergeEffect, {
      "in": function _in(t) {
        return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this;
      }
    }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
      in2: function in2(t) {
        return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t);
      }
    }), SVG.filter = {
      sepiatone: [.343, .669, .119, 0, 0, .249, .626, .13, 0, 0, .172, .334, .111, 0, 0, 0, 0, 0, 1, 0]
    };
  }.call(void 0), function () {
    function t(t, a, n, r, o, l, h) {
      for (var c = t.slice(a, n || h), d = r.slice(o, l || h), u = 0, g = {
        pos: [0, 0],
        start: [0, 0]
      }, f = {
        pos: [0, 0],
        start: [0, 0]
      };;) {
        if (c[u] = e.call(g, c[u]), d[u] = e.call(f, d[u]), c[u][0] != d[u][0] || "M" == c[u][0] || "A" == c[u][0] && (c[u][4] != d[u][4] || c[u][5] != d[u][5]) ? (Array.prototype.splice.apply(c, [u, 1].concat(s.call(g, c[u]))), Array.prototype.splice.apply(d, [u, 1].concat(s.call(f, d[u])))) : (c[u] = i.call(g, c[u]), d[u] = i.call(f, d[u])), ++u == c.length && u == d.length) break;
        u == c.length && c.push(["C", g.pos[0], g.pos[1], g.pos[0], g.pos[1], g.pos[0], g.pos[1]]), u == d.length && d.push(["C", f.pos[0], f.pos[1], f.pos[0], f.pos[1], f.pos[0], f.pos[1]]);
      }

      return {
        start: c,
        dest: d
      };
    }

    function e(t) {
      switch (t[0]) {
        case "z":
        case "Z":
          t[0] = "L", t[1] = this.start[0], t[2] = this.start[1];
          break;

        case "H":
          t[0] = "L", t[2] = this.pos[1];
          break;

        case "V":
          t[0] = "L", t[2] = t[1], t[1] = this.pos[0];
          break;

        case "T":
          t[0] = "Q", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];
          break;

        case "S":
          t[0] = "C", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];
      }

      return t;
    }

    function i(t) {
      var e = t.length;
      return this.pos = [t[e - 2], t[e - 1]], -1 != "SCQT".indexOf(t[0]) && (this.reflection = [2 * this.pos[0] - t[e - 4], 2 * this.pos[1] - t[e - 3]]), t;
    }

    function s(t) {
      var e = [t];

      switch (t[0]) {
        case "M":
          return this.pos = this.start = [t[1], t[2]], e;

        case "L":
          t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];
          break;

        case "Q":
          t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;
          break;

        case "A":
          t = (e = function (t, e) {
            var i,
                s,
                a,
                n,
                r,
                o,
                l,
                h,
                c,
                d,
                u,
                g,
                f,
                p,
                x,
                b,
                m,
                v,
                y,
                w,
                k,
                A,
                S,
                C,
                L,
                z,
                P = Math.abs(e[1]),
                M = Math.abs(e[2]),
                E = e[3] % 360,
                T = e[4],
                X = e[5],
                I = e[6],
                Y = e[7],
                F = new SVG.Point(t),
                R = new SVG.Point(I, Y),
                D = [];
            if (0 === P || 0 === M || F.x === R.x && F.y === R.y) return [["C", F.x, F.y, R.x, R.y, R.x, R.y]];
            i = new SVG.Point((F.x - R.x) / 2, (F.y - R.y) / 2).transform(new SVG.Matrix().rotate(E)), (s = i.x * i.x / (P * P) + i.y * i.y / (M * M)) > 1 && (s = Math.sqrt(s), P *= s, M *= s);
            a = new SVG.Matrix().rotate(E).scale(1 / P, 1 / M).rotate(-E), F = F.transform(a), R = R.transform(a), n = [R.x - F.x, R.y - F.y], o = n[0] * n[0] + n[1] * n[1], r = Math.sqrt(o), n[0] /= r, n[1] /= r, l = o < 4 ? Math.sqrt(1 - o / 4) : 0, T === X && (l *= -1);
            h = new SVG.Point((R.x + F.x) / 2 + l * -n[1], (R.y + F.y) / 2 + l * n[0]), c = new SVG.Point(F.x - h.x, F.y - h.y), d = new SVG.Point(R.x - h.x, R.y - h.y), u = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (u *= -1);
            g = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (g *= -1);
            X && u > g && (g += 2 * Math.PI);
            !X && u < g && (g -= 2 * Math.PI);

            for (p = Math.ceil(2 * Math.abs(u - g) / Math.PI), b = [], m = u, f = (g - u) / p, x = 4 * Math.tan(f / 4) / 3, k = 0; k <= p; k++) {
              y = Math.cos(m), v = Math.sin(m), w = new SVG.Point(h.x + y, h.y + v), b[k] = [new SVG.Point(w.x + x * v, w.y - x * y), w, new SVG.Point(w.x - x * v, w.y + x * y)], m += f;
            }

            for (b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), a = new SVG.Matrix().rotate(E).scale(P, M).rotate(-E), k = 0, A = b.length; k < A; k++) {
              b[k][0] = b[k][0].transform(a), b[k][1] = b[k][1].transform(a), b[k][2] = b[k][2].transform(a);
            }

            for (k = 1, A = b.length; k < A; k++) {
              w = b[k - 1][2], S = w.x, C = w.y, w = b[k][0], L = w.x, z = w.y, w = b[k][1], I = w.x, Y = w.y, D.push(["C", S, C, L, z, I, Y]);
            }

            return D;
          }(this.pos, t))[0];

      }

      return t[0] = "C", this.pos = [t[5], t[6]], this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]], e;
    }

    function a(t, e) {
      if (!1 === e) return !1;

      for (var i = e, s = t.length; i < s; ++i) {
        if ("M" == t[i][0]) return i;
      }

      return !1;
    }

    SVG.extend(SVG.PathArray, {
      morph: function morph(e) {
        for (var i = this.value, s = this.parse(e), n = 0, r = 0, o = !1, l = !1; !1 !== n || !1 !== r;) {
          var h;
          o = a(i, !1 !== n && n + 1), l = a(s, !1 !== r && r + 1), !1 === n && (n = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push(["M", h.x + h.width / 2, h.y + h.height / 2]) - 1), !1 === r && (r = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? s.push(s[0]) - 1 : s.push(["M", h.x + h.width / 2, h.y + h.height / 2]) - 1);
          var c = t(i, n, o, s, r, l);
          i = i.slice(0, n).concat(c.start, !1 === o ? [] : i.slice(o)), s = s.slice(0, r).concat(c.dest, !1 === l ? [] : s.slice(l)), n = !1 !== o && n + c.start.length, r = !1 !== l && r + c.dest.length;
        }

        return this.value = i, this.destination = new SVG.PathArray(), this.destination.value = s, this;
      }
    });
  }(), function () {
    function t(t) {
      t.remember("_draggable", this), this.el = t;
    }

    t.prototype.init = function (t, e) {
      var i = this;
      this.constraint = t, this.value = e, this.el.on("mousedown.drag", function (t) {
        i.start(t);
      }), this.el.on("touchstart.drag", function (t) {
        i.start(t);
      });
    }, t.prototype.transformPoint = function (t, e) {
      var i = (t = t || window.event).changedTouches && t.changedTouches[0] || t;
      return this.p.x = i.pageX - (e || 0), this.p.y = i.pageY, this.p.matrixTransform(this.m);
    }, t.prototype.getBBox = function () {
      var t = this.el.bbox();
      return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t;
    }, t.prototype.start = function (t) {
      if ("click" != t.type && "mousedown" != t.type && "mousemove" != t.type || 1 == (t.which || t.buttons)) {
        var e = this;
        this.el.fire("beforedrag", {
          event: t,
          handler: this
        }), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
        var i,
            s = this.getBBox();
        if (this.el instanceof SVG.Text) switch (i = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
          case "middle":
            i /= 2;
            break;

          case "start":
            i = 0;
        }
        this.startPoints = {
          point: this.transformPoint(t, i),
          box: s,
          transform: this.el.transform()
        }, SVG.on(window, "mousemove.drag", function (t) {
          e.drag(t);
        }), SVG.on(window, "touchmove.drag", function (t) {
          e.drag(t);
        }), SVG.on(window, "mouseup.drag", function (t) {
          e.end(t);
        }), SVG.on(window, "touchend.drag", function (t) {
          e.end(t);
        }), this.el.fire("dragstart", {
          event: t,
          p: this.startPoints.point,
          m: this.m,
          handler: this
        }), t.preventDefault(), t.stopPropagation();
      }
    }, t.prototype.drag = function (t) {
      var e = this.getBBox(),
          i = this.transformPoint(t),
          s = this.startPoints.box.x + i.x - this.startPoints.point.x,
          a = this.startPoints.box.y + i.y - this.startPoints.point.y,
          n = this.constraint,
          r = i.x - this.startPoints.point.x,
          o = i.y - this.startPoints.point.y,
          l = new CustomEvent("dragmove", {
        detail: {
          event: t,
          p: i,
          m: this.m,
          handler: this
        },
        cancelable: !0
      });
      if (this.el.fire(l), l.defaultPrevented) return i;

      if ("function" == typeof n) {
        var h = n.call(this.el, s, a, this.m);
        "boolean" == typeof h && (h = {
          x: h,
          y: h
        }), !0 === h.x ? this.el.x(s) : !1 !== h.x && this.el.x(h.x), !0 === h.y ? this.el.y(a) : !1 !== h.y && this.el.y(h.y);
      } else "object" == _typeof(n) && (null != n.minX && s < n.minX ? s = n.minX : null != n.maxX && s > n.maxX - e.width && (s = n.maxX - e.width), null != n.minY && a < n.minY ? a = n.minY : null != n.maxY && a > n.maxY - e.height && (a = n.maxY - e.height), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({
        x: r,
        y: o
      }, !0) : this.el.move(s, a));

      return i;
    }, t.prototype.end = function (t) {
      var e = this.drag(t);
      this.el.fire("dragend", {
        event: t,
        p: e,
        m: this.m,
        handler: this
      }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag");
    }, SVG.extend(SVG.Element, {
      draggable: function draggable(e, i) {
        "function" != typeof e && "object" != _typeof(e) || (i = e, e = !0);
        var s = this.remember("_draggable") || new t(this);
        return (e = void 0 === e || e) ? s.init(i || {}, e) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this;
      }
    });
  }.call(void 0), function () {
    function t(t) {
      this.el = t, t.remember("_selectHandler", this), this.pointSelection = {
        isSelected: !1
      }, this.rectSelection = {
        isSelected: !1
      };
    }

    t.prototype.init = function (t, e) {
      var i = this.el.bbox();

      for (var s in this.options = {}, this.el.selectize.defaults) {
        this.options[s] = this.el.selectize.defaults[s], void 0 !== e[s] && (this.options[s] = e[s]);
      }

      this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup();
    }, t.prototype.selectPoints = function (t) {
      return this.pointSelection.isSelected = t, this.pointSelection.set ? this : (this.pointSelection.set = this.parent.set(), this.drawCircles(), this);
    }, t.prototype.getPointArray = function () {
      var t = this.el.bbox();
      return this.el.array().valueOf().map(function (e) {
        return [e[0] - t.x, e[1] - t.y];
      });
    }, t.prototype.drawCircles = function () {
      for (var t = this, e = this.getPointArray(), i = 0, s = e.length; i < s; ++i) {
        var a = function (e) {
          return function (i) {
            (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();
            var s = i.pageX || i.touches[0].pageX,
                a = i.pageY || i.touches[0].pageY;
            t.el.fire("point", {
              x: s,
              y: a,
              i: e,
              event: i
            });
          };
        }(i);

        this.pointSelection.set.add(this.nested.circle(this.options.radius).center(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", a).on("mousedown", a));
      }
    }, t.prototype.updatePointSelection = function () {
      var t = this.getPointArray();
      this.pointSelection.set.each(function (e) {
        this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]);
      });
    }, t.prototype.updateRectSelection = function () {
      var t = this.el.bbox();
      this.rectSelection.set.get(0).attr({
        width: t.width,
        height: t.height
      }), this.options.points && (this.rectSelection.set.get(2).center(t.width, 0), this.rectSelection.set.get(3).center(t.width, t.height), this.rectSelection.set.get(4).center(0, t.height), this.rectSelection.set.get(5).center(t.width / 2, 0), this.rectSelection.set.get(6).center(t.width, t.height / 2), this.rectSelection.set.get(7).center(t.width / 2, t.height), this.rectSelection.set.get(8).center(0, t.height / 2)), this.options.rotationPoint && (this.options.points ? this.rectSelection.set.get(9).center(t.width / 2, 20) : this.rectSelection.set.get(1).center(t.width / 2, 20));
    }, t.prototype.selectRect = function (t) {
      var e = this,
          i = this.el.bbox();

      function s(t) {
        return function (i) {
          (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();
          var s = i.pageX || i.touches[0].pageX,
              a = i.pageY || i.touches[0].pageY;
          e.el.fire(t, {
            x: s,
            y: a,
            event: i
          });
        };
      }

      if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)), this.options.points && !this.rectSelection.set.get(1)) {
        var a = "touchstart",
            n = "mousedown";
        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, 0).attr("class", this.options.classPoints + "_lt").on(n, s("lt")).on(a, s("lt"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, 0).attr("class", this.options.classPoints + "_rt").on(n, s("rt")).on(a, s("rt"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, i.height).attr("class", this.options.classPoints + "_rb").on(n, s("rb")).on(a, s("rb"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, i.height).attr("class", this.options.classPoints + "_lb").on(n, s("lb")).on(a, s("lb"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, 0).attr("class", this.options.classPoints + "_t").on(n, s("t")).on(a, s("t"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width, i.height / 2).attr("class", this.options.classPoints + "_r").on(n, s("r")).on(a, s("r"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, i.height).attr("class", this.options.classPoints + "_b").on(n, s("b")).on(a, s("b"))), this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, i.height / 2).attr("class", this.options.classPoints + "_l").on(n, s("l")).on(a, s("l"))), this.rectSelection.set.each(function () {
          this.addClass(e.options.classPoints);
        });
      }

      if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
        var r = function r(t) {
          (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();
          var i = t.pageX || t.touches[0].pageX,
              s = t.pageY || t.touches[0].pageY;
          e.el.fire("rot", {
            x: i,
            y: s,
            event: t
          });
        };

        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(i.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", r).on("mousedown", r));
      }
    }, t.prototype.handler = function () {
      var t = this.el.bbox();
      this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();
    }, t.prototype.observe = function () {
      var t = this;
      if (MutationObserver) {
        if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () {
          t.handler();
        }), this.observerInst.observe(this.el.node, {
          attributes: !0
        });else try {
          this.observerInst.disconnect(), delete this.observerInst;
        } catch (t) {}
      } else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", function () {
        t.handler();
      });
    }, t.prototype.cleanup = function () {
      !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () {
        this.remove();
      }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () {
        this.remove();
      }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);
    }, SVG.extend(SVG.Element, {
      selectize: function selectize(e, i) {
        return "object" == _typeof(e) && (i = e, e = !0), (this.remember("_selectHandler") || new t(this)).init(void 0 === e || e, i || {}), this;
      }
    }), SVG.Element.prototype.selectize.defaults = {
      points: !0,
      classRect: "svg_select_boundingRect",
      classPoints: "svg_select_points",
      radius: 7,
      rotationPoint: !0,
      deepSelect: !1
    };
  }(), function () {
    (function () {
      function t(t) {
        t.remember("_resizeHandler", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint();
      }

      t.prototype.transformPoint = function (t, e, i) {
        return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i || this.m);
      }, t.prototype._extractPosition = function (t) {
        return {
          x: null != t.clientX ? t.clientX : t.touches[0].clientX,
          y: null != t.clientY ? t.clientY : t.touches[0].clientY
        };
      }, t.prototype.init = function (t) {
        var e = this;

        if (this.stop(), "stop" !== t) {
          for (var i in this.options = {}, this.el.resize.defaults) {
            this.options[i] = this.el.resize.defaults[i], void 0 !== t[i] && (this.options[i] = t[i]);
          }

          this.el.on("lt.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("rt.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("rb.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("lb.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("t.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("r.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("b.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("l.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("rot.resize", function (t) {
            e.resize(t || window.event);
          }), this.el.on("point.resize", function (t) {
            e.resize(t || window.event);
          }), this.update();
        }
      }, t.prototype.stop = function () {
        return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this;
      }, t.prototype.resize = function (t) {
        var e = this;
        this.m = this.el.node.getScreenCTM().inverse(), this.offset = {
          x: window.pageXOffset,
          y: window.pageYOffset
        };

        var i = this._extractPosition(t.detail.event);

        if (this.parameters = {
          type: this.el.type,
          p: this.transformPoint(i.x, i.y),
          x: t.detail.x,
          y: t.detail.y,
          box: this.el.bbox(),
          rotation: this.el.transform().rotation
        }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t.detail.i) {
          var s = this.el.array().valueOf();
          this.parameters.i = t.detail.i, this.parameters.pointCoords = [s[t.detail.i][0], s[t.detail.i][1]];
        }

        switch (t.type) {
          case "lt":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e);

              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height - i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i[0]);
                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y + i[1]).size(this.parameters.box.width - i[0], this.parameters.box.height - i[1]);
              }
            };

            break;

          case "rt":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 2);

              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height - i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i[0]);
                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).size(this.parameters.box.width + i[0], this.parameters.box.height - i[1]);
              }
            };

            break;

          case "rb":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 0);

              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height + i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + i[0]);
                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i[0], this.parameters.box.height + i[1]);
              }
            };

            break;

          case "lb":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 1);

              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height + i[1] > 0) {
                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - i[0]);
                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).size(this.parameters.box.width - i[0], this.parameters.box.height + i[1]);
              }
            };

            break;

          case "t":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 2);

              if (this.parameters.box.height - i[1] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).height(this.parameters.box.height - i[1]);
              }
            };

            break;

          case "r":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 0);

              if (this.parameters.box.width + i[0] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i[0]);
              }
            };

            break;

          case "b":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 0);

              if (this.parameters.box.height + i[1] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i[1]);
              }
            };

            break;

          case "l":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, 1);

              if (this.parameters.box.width - i[0] > 0) {
                if ("text" === this.parameters.type) return;
                this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).width(this.parameters.box.width - i[0]);
              }
            };

            break;

          case "rot":
            this.calc = function (t, e) {
              var i = t + this.parameters.p.x,
                  s = e + this.parameters.p.y,
                  a = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),
                  n = 180 * (Math.atan2(s - this.parameters.box.y - this.parameters.box.height / 2, i - this.parameters.box.x - this.parameters.box.width / 2) - a) / Math.PI;
              this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(this.parameters.rotation + n - n % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);
            };

            break;

          case "point":
            this.calc = function (t, e) {
              var i = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),
                  s = this.el.array().valueOf();
              s[this.parameters.i][0] = this.parameters.pointCoords[0] + i[0], s[this.parameters.i][1] = this.parameters.pointCoords[1] + i[1], this.el.plot(s);
            };

        }

        this.el.fire("resizestart", {
          dx: this.parameters.x,
          dy: this.parameters.y,
          event: t
        }), SVG.on(window, "touchmove.resize", function (t) {
          e.update(t || window.event);
        }), SVG.on(window, "touchend.resize", function () {
          e.done();
        }), SVG.on(window, "mousemove.resize", function (t) {
          e.update(t || window.event);
        }), SVG.on(window, "mouseup.resize", function () {
          e.done();
        });
      }, t.prototype.update = function (t) {
        if (t) {
          var e = this._extractPosition(t),
              i = this.transformPoint(e.x, e.y),
              s = i.x - this.parameters.p.x,
              a = i.y - this.parameters.p.y;

          this.lastUpdateCall = [s, a], this.calc(s, a), this.el.fire("resizing", {
            dx: s,
            dy: a,
            event: t
          });
        } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
      }, t.prototype.done = function () {
        this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone");
      }, t.prototype.snapToGrid = function (t, e, i, s) {
        var a;
        return void 0 !== s ? a = [(i + t) % this.options.snapToGrid, (s + e) % this.options.snapToGrid] : (i = null == i ? 3 : i, a = [(this.parameters.box.x + t + (1 & i ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t -= Math.abs(a[0]) < this.options.snapToGrid / 2 ? a[0] : a[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(a[1]) < this.options.snapToGrid / 2 ? a[1] : a[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, i, s);
      }, t.prototype.constraintToBox = function (t, e, i, s) {
        var a,
            n,
            r = this.options.constraint || {};
        return void 0 !== s ? (a = i, n = s) : (a = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width), n = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height)), void 0 !== r.minX && a + t < r.minX && (t = r.minX - a), void 0 !== r.maxX && a + t > r.maxX && (t = r.maxX - a), void 0 !== r.minY && n + e < r.minY && (e = r.minY - n), void 0 !== r.maxY && n + e > r.maxY && (e = r.maxY - n), [t, e];
      }, t.prototype.checkAspectRatio = function (t) {
        if (!this.options.saveAspectRatio) return t;
        var e = t.slice(),
            i = this.parameters.box.width / this.parameters.box.height,
            s = this.parameters.box.width + t[0],
            a = this.parameters.box.height - t[1],
            n = s / a;
        return n < i ? e[1] = s / i - this.parameters.box.height : n > i && (e[0] = this.parameters.box.width - a * i), e;
      }, SVG.extend(SVG.Element, {
        resize: function resize(e) {
          return (this.remember("_resizeHandler") || new t(this)).init(e || {}), this;
        }
      }), SVG.Element.prototype.resize.defaults = {
        snapToAngle: .1,
        snapToGrid: 1,
        constraint: {},
        saveAspectRatio: !1
      };
    }).call(this);
  }();
  return function (t, e) {
    void 0 === e && (e = {});
    var i = e.insertAt;

    if (t && "undefined" != typeof document) {
      var s = document.head || document.getElementsByTagName("head")[0],
          a = document.createElement("style");
      a.type = "text/css", "top" === i && s.firstChild ? s.insertBefore(a, s.firstChild) : s.appendChild(a), a.styleSheet ? a.styleSheet.cssText = t : a.appendChild(document.createTextNode(t));
    }
  }('.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5);\n}\n.apexcharts-canvas.dark {\n  background: #343F57;\n}\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-gridline, .apexcharts-text {\n  pointer-events: none;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n.apexcharts-tooltip.light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n.apexcharts-tooltip.dark {\n  color: #fff;\n  background: rgba(30,30,30, 0.8);\n}\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line {\n  pointer-events: none;\n}\n\n.apexcharts-tooltip.active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n.apexcharts-tooltip.light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n.apexcharts-tooltip.dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #0e1726;\n}\n\n.apexcharts-tooltip-text-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-text-z-label:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-value, \n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n.apexcharts-tooltip-series-group.active, .apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n.apexcharts-tooltip-candlestick {\n  padding: 4px 8px;\n}\n.apexcharts-tooltip-candlestick > div {\n  margin: 4px 0;\n}\n.apexcharts-tooltip-candlestick span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n\tbackground: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after, .apexcharts-xaxistooltip:before {\n\tleft: 50%;\n\tborder: solid transparent;\n\tcontent: " ";\n\theight: 0;\n\twidth: 0;\n\tposition: absolute;\n\tpointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n\tborder-color: rgba(236, 239, 241, 0);\n\tborder-width: 6px;\n\tmargin-left: -6px;\n}\n.apexcharts-xaxistooltip:before {\n\tborder-color: rgba(144, 164, 174, 0);\n\tborder-width: 7px;\n\tmargin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after, .apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after, .apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n.apexcharts-xaxistooltip-bottom.dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color:#ECEFF1\n}\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n.apexcharts-xaxistooltip-top.dark:after {\n  border-top-color:rgba(0, 0, 0, 0.5);\n}\n.apexcharts-xaxistooltip-top.dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n\n.apexcharts-xaxistooltip.active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n\tbackground: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after, .apexcharts-yaxistooltip:before {\n\ttop: 50%;\n\tborder: solid transparent;\n\tcontent: " ";\n\theight: 0;\n\twidth: 0;\n\tposition: absolute;\n\tpointer-events: none;\n}\n.apexcharts-yaxistooltip:after {\n\tborder-color: rgba(236, 239, 241, 0);\n\tborder-width: 6px;\n\tmargin-top: -6px;\n}\n.apexcharts-yaxistooltip:before {\n\tborder-color: rgba(144, 164, 174, 0);\n\tborder-width: 7px;\n\tmargin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after, .apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after, .apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n.apexcharts-yaxistooltip-left.dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n.apexcharts-yaxistooltip-left.dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n.apexcharts-yaxistooltip-right.dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n.apexcharts-yaxistooltip-right.dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.active {\n  opacity: 1;\n}\n\n.apexcharts-xcrosshairs, .apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.active, .apexcharts-ycrosshairs.active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-zoom-rect {\n  pointer-events: none;\n}\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_points, .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n.svg_select_points_l, .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n  fill: #888;\n}\n.apexcharts-canvas.zoomable .hovering-zoom {\n  cursor: crosshair\n}\n.apexcharts-canvas.zoomable .hovering-pan {\n  cursor: move\n}\n\n.apexcharts-xaxis,\n.apexcharts-yaxis {\n  pointer-events: none;\n}\n\n.apexcharts-zoom-icon, \n.apexcharts-zoom-in-icon,\n.apexcharts-zoom-out-icon,\n.apexcharts-reset-zoom-icon, \n.apexcharts-pan-icon, \n.apexcharts-selection-icon,\n.apexcharts-menu-icon, \n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n\n.apexcharts-zoom-icon svg, \n.apexcharts-zoom-in-icon svg,\n.apexcharts-zoom-out-icon svg,\n.apexcharts-reset-zoom-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.dark .apexcharts-zoom-icon svg, \n.dark .apexcharts-zoom-in-icon svg,\n.dark .apexcharts-zoom-out-icon svg,\n.dark .apexcharts-reset-zoom-icon svg, \n.dark .apexcharts-pan-icon svg, \n.dark .apexcharts-selection-icon svg,\n.dark .apexcharts-menu-icon svg, \n.dark .apexcharts-toolbar-custom-icon svg{\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.selected svg, \n.apexcharts-canvas .apexcharts-selection-icon.selected svg, \n.apexcharts-canvas .apexcharts-reset-zoom-icon.selected svg {\n  fill: #008FFB;\n}\n.light .apexcharts-selection-icon:not(.selected):hover svg,\n.light .apexcharts-zoom-icon:not(.selected):hover svg, \n.light .apexcharts-zoom-in-icon:hover svg, \n.light .apexcharts-zoom-out-icon:hover svg, \n.light .apexcharts-reset-zoom-icon:hover svg, \n.light .apexcharts-menu-icon:hover svg {\n  fill: #0e1726;\n}\n\n.apexcharts-selection-icon, .apexcharts-menu-icon {\n  position: relative;\n}\n.apexcharts-reset-zoom-icon {\n  margin-left: 5px;\n}\n.apexcharts-zoom-icon, .apexcharts-reset-zoom-icon, .apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoom-in-icon, .apexcharts-zoom-out-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoom-out-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n.apexcharts-pan-icon.selected svg {\n  stroke: #008FFB;\n}\n.apexcharts-pan-icon:not(.selected):hover svg {\n  stroke: #0e1726;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  top: 0px;\n  right: 3px;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center; \n}\n\n.apexcharts-toolbar svg {\n  pointer-events: none;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n.light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n.dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-toolbar {\n    /*opacity: 0;*/\n  }\n\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  } \n}\n\n.apexcharts-datalabel.hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabel, .apexcharts-datalabel-label, .apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events, .apexcharts-radar-series path, .apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}'), "document" in self && ("classList" in document.createElement("_") && (!document.createElementNS || "classList" in document.createElementNS("http://www.w3.org/2000/svg", "g")) || function (t) {
    if ("Element" in t) {
      var e = t.Element.prototype,
          i = Object,
          s = String.prototype.trim || function () {
        return this.replace(/^\s+|\s+$/g, "");
      },
          a = Array.prototype.indexOf || function (t) {
        for (var e = 0, i = this.length; e < i; e++) {
          if (e in this && this[e] === t) return e;
        }

        return -1;
      },
          n = function n(t, e) {
        this.name = t, this.code = DOMException[t], this.message = e;
      },
          r = function r(t, e) {
        if ("" === e) throw new n("SYNTAX_ERR", "The token must not be empty.");
        if (/\s/.test(e)) throw new n("INVALID_CHARACTER_ERR", "The token must not contain space characters.");
        return a.call(t, e);
      },
          o = function o(t) {
        for (var e = s.call(t.getAttribute("class") || ""), i = e ? e.split(/\s+/) : [], a = 0, n = i.length; a < n; a++) {
          this.push(i[a]);
        }

        this._updateClassName = function () {
          t.setAttribute("class", this.toString());
        };
      },
          l = o.prototype = [],
          h = function h() {
        return new o(this);
      };

      if (n.prototype = Error.prototype, l.item = function (t) {
        return this[t] || null;
      }, l.contains = function (t) {
        return ~r(this, t + "");
      }, l.add = function () {
        var t,
            e = arguments,
            i = 0,
            s = e.length,
            a = !1;

        do {
          t = e[i] + "", ~r(this, t) || (this.push(t), a = !0);
        } while (++i < s);

        a && this._updateClassName();
      }, l.remove = function () {
        var t,
            e,
            i = arguments,
            s = 0,
            a = i.length,
            n = !1;

        do {
          for (t = i[s] + "", e = r(this, t); ~e;) {
            this.splice(e, 1), n = !0, e = r(this, t);
          }
        } while (++s < a);

        n && this._updateClassName();
      }, l.toggle = function (t, e) {
        var i = this.contains(t),
            s = i ? !0 !== e && "remove" : !1 !== e && "add";
        return s && this[s](t), !0 === e || !1 === e ? e : !i;
      }, l.replace = function (t, e) {
        var i = r(t + "");
        ~i && (this.splice(i, 1, e), this._updateClassName());
      }, l.toString = function () {
        return this.join(" ");
      }, i.defineProperty) {
        var c = {
          get: h,
          enumerable: !0,
          configurable: !0
        };

        try {
          i.defineProperty(e, "classList", c);
        } catch (t) {
          void 0 !== t.number && -2146823252 !== t.number || (c.enumerable = !1, i.defineProperty(e, "classList", c));
        }
      } else i.prototype.__defineGetter__ && e.__defineGetter__("classList", h);
    }
  }(self), function () {
    var t = document.createElement("_");

    if (t.classList.add("c1", "c2"), !t.classList.contains("c2")) {
      var e = function e(t) {
        var e = DOMTokenList.prototype[t];

        DOMTokenList.prototype[t] = function (t) {
          var i,
              s = arguments.length;

          for (i = 0; i < s; i++) {
            t = arguments[i], e.call(this, t);
          }
        };
      };

      e("add"), e("remove");
    }

    if (t.classList.toggle("c3", !1), t.classList.contains("c3")) {
      var i = DOMTokenList.prototype.toggle;

      DOMTokenList.prototype.toggle = function (t, e) {
        return 1 in arguments && !this.contains(t) == !e ? e : i.call(this, t);
      };
    }

    "replace" in document.createElement("_").classList || (DOMTokenList.prototype.replace = function (t, e) {
      var i = this.toString().split(" "),
          s = i.indexOf(t + "");
      ~s && (i = i.slice(s), this.remove.apply(this, i), this.add(e), this.add.apply(this, i.slice(1)));
    }), t = null;
  }()), function () {
    var t = !1;

    function e(t) {
      var e = t.__resizeTriggers__,
          i = e.firstElementChild,
          s = e.lastElementChild,
          a = i.firstElementChild;
      s.scrollLeft = s.scrollWidth, s.scrollTop = s.scrollHeight, a.style.width = i.offsetWidth + 1 + "px", a.style.height = i.offsetHeight + 1 + "px", i.scrollLeft = i.scrollWidth, i.scrollTop = i.scrollHeight;
    }

    function i(t) {
      var i = this;
      e(this), this.__resizeRAF__ && r(this.__resizeRAF__), this.__resizeRAF__ = n(function () {
        (function (t) {
          return t.offsetWidth != t.__resizeLast__.width || t.offsetHeight != t.__resizeLast__.height;
        })(i) && (i.__resizeLast__.width = i.offsetWidth, i.__resizeLast__.height = i.offsetHeight, i.__resizeListeners__.forEach(function (e) {
          e.call(t);
        }));
      });
    }

    var s,
        a,
        n = (s = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (t) {
      return window.setTimeout(t, 20);
    }, function (t) {
      return s(t);
    }),
        r = (a = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout, function (t) {
      return a(t);
    }),
        o = !1,
        l = "",
        h = "animationstart",
        c = "Webkit Moz O ms".split(" "),
        d = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),
        u = document.createElement("fakeelement");
    if (void 0 !== u.style.animationName && (o = !0), !1 === o) for (var g = 0; g < c.length; g++) {
      if (void 0 !== u.style[c[g] + "AnimationName"]) {
        l = "-" + c[g].toLowerCase() + "-", h = d[g];
        break;
      }
    }
    var f = "@" + l + "keyframes resizeanim { from { opacity: 0; } to { opacity: 0; } } ",
        p = l + "animation: 1ms resizeanim; ";
    window.addResizeListener = function (s, a) {
      s.__resizeTriggers__ || ("static" == getComputedStyle(s).position && (s.style.position = "relative"), function () {
        if (!t) {
          var e = (f || "") + ".resize-triggers { " + (p || "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
              i = document.head || document.getElementsByTagName("head")[0],
              s = document.createElement("style");
          s.type = "text/css", s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(document.createTextNode(e)), i.appendChild(s), t = !0;
        }
      }(), s.__resizeLast__ = {}, s.__resizeListeners__ = [], (s.__resizeTriggers__ = document.createElement("div")).className = "resize-triggers", s.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>', s.appendChild(s.__resizeTriggers__), e(s), s.addEventListener("scroll", i, !0), h && s.__resizeTriggers__.addEventListener(h, function (t) {
        "resizeanim" == t.animationName && e(s);
      })), s.__resizeListeners__.push(a);
    }, window.removeResizeListener = function (t, e) {
      t && (t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(e), 1), t.__resizeListeners__.length || (t.removeEventListener("scroll", i), t.__resizeTriggers__ = !t.removeChild(t.__resizeTriggers__)));
    };
  }(), window.Apex = {}, function () {
    function i(t, s) {
      e(this, i), this.opts = s, this.ctx = this, this.w = new A(s).init(), this.el = t, this.w.globals.cuid = (Math.random() + 1).toString(36).substring(4), this.w.globals.chartID = this.w.config.chart.id ? this.w.config.chart.id : this.w.globals.cuid, this.initModules(), this.create = d.bind(this.create, this), this.windowResizeHandler = this.windowResize.bind(this);
    }

    return s(i, [{
      key: "render",
      value: function value() {
        var t = this;
        return new $(function (e, i) {
          if (null !== t.el) {
            void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({
              id: t.w.globals.chartID,
              group: t.w.config.chart.group,
              chart: t
            }), t.setLocale(t.w.config.chart.defaultLocale);
            var s = t.w.config.chart.events.beforeMount;
            "function" == typeof s && s(t, t.w), t.fireEvent("beforeMount", [t, t.w]), window.addEventListener("resize", t.windowResizeHandler), window.addResizeListener(t.el.parentNode, t.parentResizeCallback.bind(t));
            var a = t.create(t.w.config.series, {});
            if (!a) return e(t);
            t.mount(a).then(function () {
              e(a), "function" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.fireEvent("mounted", [t, t.w]);
            })["catch"](function (t) {
              i(t);
            });
          } else i(new Error("Element not found"));
        });
      }
    }, {
      key: "initModules",
      value: function value() {
        this.animations = new g(this), this.core = new U(this.el, this), this.grid = new rt(this), this.coreUtils = new y(this), this.config = new w({}), this.crosshairs = new T(this), this.options = new x(), this.responsive = new lt(this), this.series = new G(this), this.theme = new ht(this), this.formatters = new N(this), this.titleSubtitle = new vt(this), this.legend = new ot(this), this.toolbar = new bt(this), this.dimensions = new _(this), this.zoomPanSelection = new mt(this), this.w.globals.tooltip = new xt(this);
      }
    }, {
      key: "addEventListener",
      value: function value(t, e) {
        var i = this.w;
        i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [e];
      }
    }, {
      key: "removeEventListener",
      value: function value(t, e) {
        var i = this.w;

        if (i.globals.events.hasOwnProperty(t)) {
          var s = i.globals.events[t].indexOf(e);
          -1 !== s && i.globals.events[t].splice(s, 1);
        }
      }
    }, {
      key: "fireEvent",
      value: function value(t, e) {
        var i = this.w;

        if (i.globals.events.hasOwnProperty(t)) {
          e && e.length || (e = []);

          for (var s = i.globals.events[t], a = s.length, n = 0; n < a; n++) {
            s[n].apply(null, e);
          }
        }
      }
    }, {
      key: "create",
      value: function value(t, e) {
        var i = this.w;
        this.initModules();
        var s = this.w.globals;
        if (s.noData = !1, s.animationEnded = !1, this.responsive.checkResponsiveConfig(e), null === this.el) return s.animationEnded = !0, null;
        if (this.core.setupElements(), 0 === s.svgWidth) return s.animationEnded = !0, null;
        var a = y.checkComboSeries(t);
        s.comboCharts = a.comboCharts, s.comboChartsHasBars = a.comboChartsHasBars, (0 === t.length || 1 === t.length && t[0].data && 0 === t[0].data.length) && this.series.handleNoData(), this.setupEventHandlers(), this.core.parseData(t), this.theme.init(), new C(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), this.legend.init(), this.series.hasAllSeriesEqualX(), s.axisCharts && (this.core.coreCalculations(), "category" !== i.config.xaxis.type && this.formatters.setLabelFormatters()), this.formatters.heatmapLabelFormatters(), this.dimensions.plotCoords();
        var n = this.core.xySettings();
        this.grid.createGridMask();
        var r = this.core.plotChartType(t, n);
        this.core.shiftGraphPosition();
        var o = {
          plot: {
            left: i.globals.translateX,
            top: i.globals.translateY,
            width: i.globals.gridWidth,
            height: i.globals.gridHeight
          }
        };
        return {
          elGraph: r,
          xyRatios: n,
          elInner: i.globals.dom.elGraphical,
          dimensions: o
        };
      }
    }, {
      key: "mount",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            e = this,
            i = e.w;
        return new $(function (s, a) {
          if (null === e.el) return a(new Error("Not enough data to display or target element not found"));
          if ((null === t || i.globals.allSeriesCollapsed) && e.series.handleNoData(), e.annotations = new b(e), e.core.drawAxis(i.config.chart.type, t.xyRatios), e.grid = new rt(e), "back" === i.config.grid.position && e.grid.drawGrid(), "back" === i.config.annotations.position && e.annotations.drawAnnotations(), t.elGraph instanceof Array) for (var n = 0; n < t.elGraph.length; n++) {
            i.globals.dom.elGraphical.add(t.elGraph[n]);
          } else i.globals.dom.elGraphical.add(t.elGraph);

          if ("front" === i.config.grid.position && e.grid.drawGrid(), "front" === i.config.xaxis.crosshairs.position && e.crosshairs.drawXCrosshairs(), "front" === i.config.yaxis[0].crosshairs.position && e.crosshairs.drawYCrosshairs(), "front" === i.config.annotations.position && e.annotations.drawAnnotations(), !i.globals.noData) {
            if (i.config.tooltip.enabled && !i.globals.noData && e.w.globals.tooltip.drawTooltip(t.xyRatios), i.globals.axisCharts && i.globals.isXNumeric) (i.config.chart.zoom.enabled || i.config.chart.selection && i.config.chart.selection.enabled || i.config.chart.pan && i.config.chart.pan.enabled) && e.zoomPanSelection.init({
              xyRatios: t.xyRatios
            });else {
              var r = i.config.chart.toolbar.tools;
              r.zoom = !1, r.zoomin = !1, r.zoomout = !1, r.selection = !1, r.pan = !1, r.reset = !1;
            }
            i.config.chart.toolbar.show && !i.globals.allSeriesCollapsed && e.toolbar.createToolbar();
          }

          i.globals.memory.methodsToExec.length > 0 && i.globals.memory.methodsToExec.forEach(function (t) {
            t.method(t.params, !1, t.context);
          }), s(e);
        });
      }
    }, {
      key: "clearPreviousPaths",
      value: function value() {
        var t = this.w;
        t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1, t.globals.collapsedSeries = [], t.globals.collapsedSeriesIndices = [];
      }
    }, {
      key: "updateOptions",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
            a = this.w;
        return t.series && (t.series[0].data && (t.series = t.series.map(function (t, e) {
          return n({}, a.config.series[e], {
            name: t.name ? t.name : a.config.series[e] && a.config.series[e].name,
            type: t.type ? t.type : a.config.series[e] && a.config.series[e].type,
            data: t.data ? t.data : a.config.series[e] && a.config.series[e].data
          });
        })), this.revertDefaultAxisMinMax()), t.xaxis && ((t.xaxis.min || t.xaxis.max) && this.forceXAxisUpdate(t), t.xaxis.categories && t.xaxis.categories.length && a.config.xaxis.convertedCatToNumeric && (t = v.convertCatToNumeric(t))), a.globals.collapsedSeriesIndices.length > 0 && this.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this._updateOptions(t, e, i, s);
      }
    }, {
      key: "_updateOptions",
      value: function value(e) {
        var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            s = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        this.getSyncedCharts().forEach(function (n) {
          var r = n.w;
          return r.globals.shouldAnimate = s, i || (r.globals.resized = !0, r.globals.dataChanged = !0, s && n.series.getPreviousPaths()), e && "object" === t(e) && (n.config = new w(e), e = y.extendArrayProps(n.config, e), r.config = d.extend(r.config, e), a && (r.globals.lastXAxis = [], r.globals.lastYAxis = [], r.globals.initialConfig = d.extend({}, r.config), r.globals.initialSeries = JSON.parse(JSON.stringify(r.config.series)))), n.update(e);
        });
      }
    }, {
      key: "updateSeries",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
        return this.revertDefaultAxisMinMax(), this._updateSeries(t, e, i);
      }
    }, {
      key: "appendSeries",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            s = this.w.config.series.slice();
        return s.push(t), this.revertDefaultAxisMinMax(), this._updateSeries(s, e, i);
      }
    }, {
      key: "_updateSeries",
      value: function value(t, e) {
        var i,
            s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            a = this.w;
        return this.w.globals.shouldAnimate = e, a.globals.dataChanged = !0, a.globals.allSeriesCollapsed && (a.globals.allSeriesCollapsed = !1), e && this.series.getPreviousPaths(), a.globals.axisCharts ? (0 === (i = t.map(function (t, e) {
          return n({}, a.config.series[e], {
            name: t.name ? t.name : a.config.series[e] && a.config.series[e].name,
            type: t.type ? t.type : a.config.series[e] && a.config.series[e].type,
            data: t.data ? t.data : a.config.series[e] && a.config.series[e].data
          });
        })).length && (i = [{
          data: []
        }]), a.config.series = i) : a.config.series = t.slice(), s && (a.globals.initialConfig.series = JSON.parse(JSON.stringify(a.config.series)), a.globals.initialSeries = JSON.parse(JSON.stringify(a.config.series))), this.update();
      }
    }, {
      key: "getSyncedCharts",
      value: function value() {
        var t = this.getGroupedCharts(),
            e = [this];
        return t.length && (e = [], t.forEach(function (t) {
          e.push(t);
        })), e;
      }
    }, {
      key: "getGroupedCharts",
      value: function value() {
        var t = this;
        return Apex._chartInstances.filter(function (t) {
          if (t.group) return !0;
        }).map(function (e) {
          return t.w.config.chart.group === e.group ? e.chart : t;
        });
      }
    }, {
      key: "appendData",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = this;
        i.w.globals.dataChanged = !0, i.series.getPreviousPaths();

        for (var s = i.w.config.series.slice(), a = 0; a < s.length; a++) {
          if (void 0 !== t[a]) for (var n = 0; n < t[a].data.length; n++) {
            s[a].data.push(t[a].data[n]);
          }
        }

        return i.w.config.series = s, e && (i.w.globals.initialSeries = JSON.parse(JSON.stringify(i.w.config.series))), this.update();
      }
    }, {
      key: "update",
      value: function value(t) {
        var e = this;
        return new $(function (i, s) {
          e.clear();
          var a = e.create(e.w.config.series, t);
          if (!a) return i(e);
          e.mount(a).then(function () {
            "function" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.fireEvent("updated", [e, e.w]), e.w.globals.isDirty = !0, i(e);
          })["catch"](function (t) {
            s(t);
          });
        });
      }
    }, {
      key: "forceXAxisUpdate",
      value: function value(t) {
        var e = this.w;
        void 0 !== t.xaxis.min && (e.config.xaxis.min = t.xaxis.min, e.globals.lastXAxis.min = t.xaxis.min), void 0 !== t.xaxis.max && (e.config.xaxis.max = t.xaxis.max, e.globals.lastXAxis.max = t.xaxis.max);
      }
    }, {
      key: "revertDefaultAxisMinMax",
      value: function value() {
        var t = this.w;
        t.config.xaxis.min = t.globals.lastXAxis.min, t.config.xaxis.max = t.globals.lastXAxis.max, t.config.yaxis.map(function (e, i) {
          t.globals.zoomed && void 0 !== t.globals.lastYAxis[i] && (e.min = t.globals.lastYAxis[i].min, e.max = t.globals.lastYAxis[i].max);
        });
      }
    }, {
      key: "clear",
      value: function value() {
        this.zoomPanSelection && this.zoomPanSelection.destroy(), this.toolbar && this.toolbar.destroy(), this.animations = null, this.annotations = null, this.core = null, this.grid = null, this.series = null, this.responsive = null, this.theme = null, this.formatters = null, this.titleSubtitle = null, this.legend = null, this.dimensions = null, this.options = null, this.crosshairs = null, this.zoomPanSelection = null, this.toolbar = null, this.w.globals.tooltip = null, this.clearDomElements();
      }
    }, {
      key: "killSVG",
      value: function value(t) {
        return new $(function (e, i) {
          t.each(function (t, e) {
            this.removeClass("*"), this.off(), this.stop();
          }, !0), t.ungroup(), t.clear(), e("done");
        });
      }
    }, {
      key: "clearDomElements",
      value: function value() {
        var t = this.w.globals.dom;
        if (null !== this.el) for (; this.el.firstChild;) {
          this.el.removeChild(this.el.firstChild);
        }
        this.killSVG(t.Paper), t.Paper.remove(), t.elWrap = null, t.elGraphical = null, t.elLegendWrap = null, t.baseEl = null, t.elGridRect = null, t.elGridRectMask = null, t.elGridRectMarkerMask = null, t.elDefs = null;
      }
    }, {
      key: "destroy",
      value: function value() {
        this.clear();
        var t = this.w.config.chart.id;
        t && Apex._chartInstances.forEach(function (e, i) {
          e.id === t && Apex._chartInstances.splice(i, 1);
        }), window.removeEventListener("resize", this.windowResizeHandler), window.removeResizeListener(this.el.parentNode, this.parentResizeCallback.bind(this));
      }
    }, {
      key: "toggleSeries",
      value: function value(t) {
        var e = this.series.getSeriesByName(t),
            i = parseInt(e.getAttribute("data:realIndex")),
            s = e.classList.contains("apexcharts-series-collapsed");
        this.legend.toggleDataSeries(i, s);
      }
    }, {
      key: "resetToggleSeries",
      value: function value() {
        this.legend.resetToggleDataSeries();
      }
    }, {
      key: "setupEventHandlers",
      value: function value() {
        var t = this.w,
            e = this,
            i = t.globals.dom.baseEl.querySelector(t.globals.chartClass),
            s = ["mousedown", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"];
        s.forEach(function (s) {
          i.addEventListener(s, function (i) {
            "mousedown" === i.type && 1 === i.which || ("mouseup" === i.type && 1 === i.which || "touchend" === i.type) && ("function" == typeof t.config.chart.events.click && t.config.chart.events.click(i, e, t), e.fireEvent("click", [i, e, t]));
          }, {
            capture: !1,
            passive: !0
          });
        }), s.forEach(function (e) {
          document.addEventListener(e, function (e) {
            t.globals.clientX = "touchmove" === e.type ? e.touches[0].clientX : e.clientX, t.globals.clientY = "touchmove" === e.type ? e.touches[0].clientY : e.clientY;
          });
        }), this.core.setupBrushHandler();
      }
    }, {
      key: "addXaxisAnnotation",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            s = this;
        i && (s = i), s.annotations.addXaxisAnnotationExternal(t, e, s);
      }
    }, {
      key: "addYaxisAnnotation",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            s = this;
        i && (s = i), s.annotations.addYaxisAnnotationExternal(t, e, s);
      }
    }, {
      key: "addPointAnnotation",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            s = this;
        i && (s = i), s.annotations.addPointAnnotationExternal(t, e, s);
      }
    }, {
      key: "clearAnnotations",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,
            e = this;
        t && (e = t), e.annotations.clearAnnotations(e);
      }
    }, {
      key: "addText",
      value: function value(t) {
        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
            s = this;
        i && (s = i), s.annotations.addText(t, e, s);
      }
    }, {
      key: "getChartArea",
      value: function value() {
        return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner");
      }
    }, {
      key: "getSeriesTotalXRange",
      value: function value(t, e) {
        return this.coreUtils.getSeriesTotalsXRange(t, e);
      }
    }, {
      key: "getHighestValueInSeries",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        return new V(this.ctx).getMinYMaxY(t).highestY;
      }
    }, {
      key: "getLowestValueInSeries",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        return new V(this.ctx).getMinYMaxY(t).lowestY;
      }
    }, {
      key: "getSeriesTotal",
      value: function value() {
        return this.w.globals.seriesTotals;
      }
    }, {
      key: "setLocale",
      value: function value(t) {
        this.setCurrentLocaleValues(t);
      }
    }, {
      key: "setCurrentLocaleValues",
      value: function value(t) {
        var e = this.w.config.chart.locales;
        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));
        var i = e.filter(function (e) {
          return e.name === t;
        })[0];
        if (!i) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
        var s = d.extend(p, i);
        this.w.globals.locale = s.options;
      }
    }, {
      key: "dataURI",
      value: function value() {
        return new nt(this.ctx).dataURI();
      }
    }, {
      key: "paper",
      value: function value() {
        return this.w.globals.dom.Paper;
      }
    }, {
      key: "parentResizeCallback",
      value: function value() {
        this.w.globals.animationEnded && this.windowResize();
      }
    }, {
      key: "windowResize",
      value: function value() {
        var t = this;
        clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function () {
          t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.update();
        }, 150);
      }
    }], [{
      key: "initOnLoad",
      value: function value() {
        for (var t = document.querySelectorAll("[data-apexcharts]"), e = 0; e < t.length; e++) {
          new i(t[e], JSON.parse(t[e].getAttribute("data-options"))).render();
        }
      }
    }, {
      key: "exec",
      value: function value(t, e) {
        var i = this.getChartByID(t);

        if (i) {
          for (var s = arguments.length, a = new Array(s > 2 ? s - 2 : 0), n = 2; n < s; n++) {
            a[n - 2] = arguments[n];
          }

          switch (e) {
            case "updateOptions":
              return i.updateOptions.apply(i, a);

            case "updateSeries":
              return i.updateSeries.apply(i, a);

            case "appendData":
              return i.appendData.apply(i, a);

            case "appendSeries":
              return i.appendSeries.apply(i, a);

            case "toggleSeries":
              return i.toggleSeries.apply(i, a);

            case "dataURI":
              return i.dataURI.apply(i, a);

            case "addXaxisAnnotation":
              return i.addXaxisAnnotation.apply(i, a);

            case "addYaxisAnnotation":
              return i.addYaxisAnnotation.apply(i, a);

            case "addPointAnnotation":
              return i.addPointAnnotation.apply(i, a);

            case "addText":
              return i.addText.apply(i, a);

            case "clearAnnotations":
              return i.clearAnnotations.apply(i, a);

            case "paper":
              return i.paper.apply(i, a);

            case "destroy":
              return i.destroy();
          }
        }
      }
    }, {
      key: "merge",
      value: function value(t, e) {
        return d.extend(t, e);
      }
    }, {
      key: "getChartByID",
      value: function value(t) {
        return Apex._chartInstances.filter(function (e) {
          return e.id === t;
        })[0].chart;
      }
    }]), i;
  }();
});

/***/ }),

/***/ "./public/template/cork/plugins/counter/jquery.countTo.js":
/*!****************************************************************!*\
  !*** ./public/template/cork/plugins/counter/jquery.countTo.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (factory) {
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function ($) {
  var CountTo = function CountTo(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, CountTo.DEFAULTS, this.dataOptions(), options);
    this.init();
  };

  CountTo.DEFAULTS = {
    from: 0,
    // the number the element should start at
    to: 0,
    // the number the element should end at
    speed: 1000,
    // how long it should take to count between the target numbers
    refreshInterval: 100,
    // how often the element should be updated
    decimals: 0,
    // the number of decimal places to show
    formatter: formatter,
    // handler for formatting the value before rendering
    onUpdate: null,
    // callback method for every time the element is updated
    onComplete: null // callback method for when the element finishes updating

  };

  CountTo.prototype.init = function () {
    this.value = this.options.from;
    this.loops = Math.ceil(this.options.speed / this.options.refreshInterval);
    this.loopCount = 0;
    this.increment = (this.options.to - this.options.from) / this.loops;
  };

  CountTo.prototype.dataOptions = function () {
    var options = {
      from: this.$element.data('from'),
      to: this.$element.data('to'),
      speed: this.$element.data('speed'),
      refreshInterval: this.$element.data('refresh-interval'),
      decimals: this.$element.data('decimals')
    };
    var keys = Object.keys(options);

    for (var i in keys) {
      var key = keys[i];

      if (typeof options[key] === 'undefined') {
        delete options[key];
      }
    }

    return options;
  };

  CountTo.prototype.update = function () {
    this.value += this.increment;
    this.loopCount++;
    this.render();

    if (typeof this.options.onUpdate == 'function') {
      this.options.onUpdate.call(this.$element, this.value);
    }

    if (this.loopCount >= this.loops) {
      clearInterval(this.interval);
      this.value = this.options.to;

      if (typeof this.options.onComplete == 'function') {
        this.options.onComplete.call(this.$element, this.value);
      }
    }
  };

  CountTo.prototype.render = function () {
    var formattedValue = this.options.formatter.call(this.$element, this.value, this.options);
    this.$element.text(formattedValue);
  };

  CountTo.prototype.restart = function () {
    this.stop();
    this.init();
    this.start();
  };

  CountTo.prototype.start = function () {
    this.stop();
    this.render();
    this.interval = setInterval(this.update.bind(this), this.options.refreshInterval);
  };

  CountTo.prototype.stop = function () {
    if (this.interval) {
      clearInterval(this.interval);
    }
  };

  CountTo.prototype.toggle = function () {
    if (this.interval) {
      this.stop();
    } else {
      this.start();
    }
  };

  function formatter(value, options) {
    return value.toFixed(options.decimals);
  }

  $.fn.countTo = function (option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('countTo');
      var init = !data || _typeof(option) === 'object';
      var options = _typeof(option) === 'object' ? option : {};
      var method = typeof option === 'string' ? option : 'start';

      if (init) {
        if (data) data.stop();
        $this.data('countTo', data = new CountTo(this, options));
      }

      data[method].call(data);
    });
  };
});

/***/ }),

/***/ "./public/template/cork/plugins/table/datatable/datatables.js":
/*!********************************************************************!*\
  !*** ./public/template/cork/plugins/table/datatable/datatables.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 * This combined file was created by the DataTables downloader builder:
 *   https://datatables.net/download
 *
 * To rebuild or modify this file with the latest versions of the included
 * software please visit:
 *   https://datatables.net/download/#bs4/dt-1.10.16
 *
 * Included libraries:
 *   DataTables 1.10.16
 */

/*! DataTables 1.10.16
 * ©2008-2017 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.16
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd
 * @contact     www.datatables.net
 * @copyright   Copyright 2008-2017 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */

/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/
(function (factory) {
  "use strict";

  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {
      return factory($, window, document);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function ($, window, document, undefined) {
  "use strict";
  /**
   * DataTables is a plug-in for the jQuery Javascript library. It is a highly
   * flexible tool, based upon the foundations of progressive enhancement,
   * which will add advanced interaction controls to any HTML table. For a
   * full list of features please refer to
   * [DataTables.net](href="http://datatables.net).
   *
   * Note that the `DataTable` object is not a global variable but is aliased
   * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
   * be  accessed.
   *
   *  @class
   *  @param {object} [init={}] Configuration object for DataTables. Options
   *    are defined by {@link DataTable.defaults}
   *  @requires jQuery 1.7+
   *
   *  @example
   *    // Basic initialisation
   *    $(document).ready( function {
   *      $('#example').dataTable();
   *    } );
   *
   *  @example
   *    // Initialisation with configuration options - in this case, disable
   *    // pagination and sorting.
   *    $(document).ready( function {
   *      $('#example').dataTable( {
   *        "paginate": false,
   *        "sort": false
   *      } );
   *    } );
   */

  var DataTable = function DataTable(options) {
    /**
     * Perform a jQuery selector action on the table's TR elements (from the tbody) and
     * return the resulting jQuery object.
     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
     *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
     *    criterion ("applied") or all TR elements (i.e. no filter).
     *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
     *    Can be either 'current', whereby the current sorting of the table is used, or
     *    'original' whereby the original order the data was read into the table is used.
     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
     *    'current' and filter is 'applied', regardless of what they might be given as.
     *  @returns {object} jQuery object, filtered by the given selector.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Highlight every second row
     *      oTable.$('tr:odd').css('backgroundColor', 'blue');
     *    } );
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Filter to rows with 'Webkit' in them, add a background colour and then
     *      // remove the filter, thus highlighting the 'Webkit' rows only.
     *      oTable.fnFilter('Webkit');
     *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
     *      oTable.fnFilter('');
     *    } );
     */
    this.$ = function (sSelector, oOpts) {
      return this.api(true).$(sSelector, oOpts);
    };
    /**
     * Almost identical to $ in operation, but in this case returns the data for the matched
     * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
     * rather than any descendants, so the data can be obtained for the row/cell. If matching
     * rows are found, the data returned is the original data array/object that was used to
     * create the row (or a generated array if from a DOM source).
     *
     * This method is often useful in-combination with $ where both functions are given the
     * same parameters and the array indexes will match identically.
     *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
     *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
     *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
     *    criterion ("applied") or all elements (i.e. no filter).
     *  @param {string} [oOpts.order=current] Order of the data in the processed array.
     *    Can be either 'current', whereby the current sorting of the table is used, or
     *    'original' whereby the original order the data was read into the table is used.
     *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
     *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
     *    'current' and filter is 'applied', regardless of what they might be given as.
     *  @returns {array} Data for the matched elements. If any elements, as a result of the
     *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
     *    entry in the array.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Get the data from the first row in the table
     *      var data = oTable._('tr:first');
     *
     *      // Do something useful with the data
     *      alert( "First cell is: "+data[0] );
     *    } );
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Filter to 'Webkit' and get all data for
     *      oTable.fnFilter('Webkit');
     *      var data = oTable._('tr', {"search": "applied"});
     *
     *      // Do something with the data
     *      alert( data.length+" rows matched the search" );
     *    } );
     */


    this._ = function (sSelector, oOpts) {
      return this.api(true).rows(sSelector, oOpts).data();
    };
    /**
     * Create a DataTables Api instance, with the currently selected tables for
     * the Api's context.
     * @param {boolean} [traditional=false] Set the API instance's context to be
     *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
     *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
     *   or if all tables captured in the jQuery object should be used.
     * @return {DataTables.Api}
     */


    this.api = function (traditional) {
      return traditional ? new _Api2(_fnSettingsFromNode(this[_ext.iApiIndex])) : new _Api2(this);
    };
    /**
     * Add a single new row or multiple rows of data to the table. Please note
     * that this is suitable for client-side processing only - if you are using
     * server-side processing (i.e. "bServerSide": true), then to add data, you
     * must add it to the data source, i.e. the server-side, through an Ajax call.
     *  @param {array|object} data The data to be added to the table. This can be:
     *    <ul>
     *      <li>1D array of data - add a single row with the data provided</li>
     *      <li>2D array of arrays - add multiple rows in a single call</li>
     *      <li>object - data object when using <i>mData</i></li>
     *      <li>array of objects - multiple data objects when using <i>mData</i></li>
     *    </ul>
     *  @param {bool} [redraw=true] redraw the table or not
     *  @returns {array} An array of integers, representing the list of indexes in
     *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
     *    the table.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    // Global var for counter
     *    var giCount = 2;
     *
     *    $(document).ready(function() {
     *      $('#example').dataTable();
     *    } );
     *
     *    function fnClickAddRow() {
     *      $('#example').dataTable().fnAddData( [
     *        giCount+".1",
     *        giCount+".2",
     *        giCount+".3",
     *        giCount+".4" ]
     *      );
     *
     *      giCount++;
     *    }
     */


    this.fnAddData = function (data, redraw) {
      var api = this.api(true);
      /* Check if we want to add multiple rows or not */

      var rows = $.isArray(data) && ($.isArray(data[0]) || $.isPlainObject(data[0])) ? api.rows.add(data) : api.row.add(data);

      if (redraw === undefined || redraw) {
        api.draw();
      }

      return rows.flatten().toArray();
    };
    /**
     * This function will make DataTables recalculate the column sizes, based on the data
     * contained in the table and the sizes applied to the columns (in the DOM, CSS or
     * through the sWidth parameter). This can be useful when the width of the table's
     * parent element changes (for example a window resize).
     *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable( {
     *        "sScrollY": "200px",
     *        "bPaginate": false
     *      } );
     *
     *      $(window).on('resize', function () {
     *        oTable.fnAdjustColumnSizing();
     *      } );
     *    } );
     */


    this.fnAdjustColumnSizing = function (bRedraw) {
      var api = this.api(true).columns.adjust();
      var settings = api.settings()[0];
      var scroll = settings.oScroll;

      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      } else if (scroll.sX !== "" || scroll.sY !== "") {
        /* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
        _fnScrollDraw(settings);
      }
    };
    /**
     * Quickly and simply clear a table
     *  @param {bool} [bRedraw=true] redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
     *      oTable.fnClearTable();
     *    } );
     */


    this.fnClearTable = function (bRedraw) {
      var api = this.api(true).clear();

      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }
    };
    /**
     * The exact opposite of 'opening' a row, this function will close any rows which
     * are currently 'open'.
     *  @param {node} nTr the table row to 'close'
     *  @returns {int} 0 on success, or 1 if failed (can't find the row)
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */


    this.fnClose = function (nTr) {
      this.api(true).row(nTr).child.hide();
    };
    /**
     * Remove a row for the table
     *  @param {mixed} target The index of the row from aoData to be deleted, or
     *    the TR element you want to delete
     *  @param {function|null} [callBack] Callback function
     *  @param {bool} [redraw=true] Redraw the table or not
     *  @returns {array} The row that was deleted
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Immediately remove the first row
     *      oTable.fnDeleteRow( 0 );
     *    } );
     */


    this.fnDeleteRow = function (target, callback, redraw) {
      var api = this.api(true);
      var rows = api.rows(target);
      var settings = rows.settings()[0];
      var data = settings.aoData[rows[0][0]];
      rows.remove();

      if (callback) {
        callback.call(this, settings, data);
      }

      if (redraw === undefined || redraw) {
        api.draw();
      }

      return data;
    };
    /**
     * Restore the table to it's original state in the DOM by removing all of DataTables
     * enhancements, alterations to the DOM structure of the table and event listeners.
     *  @param {boolean} [remove=false] Completely remove the table from the DOM
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
     *      var oTable = $('#example').dataTable();
     *      oTable.fnDestroy();
     *    } );
     */


    this.fnDestroy = function (remove) {
      this.api(true).destroy(remove);
    };
    /**
     * Redraw the table
     *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
     *      oTable.fnDraw();
     *    } );
     */


    this.fnDraw = function (complete) {
      // Note that this isn't an exact match to the old call to _fnDraw - it takes
      // into account the new data, but can hold position.
      this.api(true).draw(complete);
    };
    /**
     * Filter the input based on data
     *  @param {string} sInput String to filter the table on
     *  @param {int|null} [iColumn] Column to limit filtering to
     *  @param {bool} [bRegex=false] Treat as regular expression or not
     *  @param {bool} [bSmart=true] Perform smart filtering or not
     *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
     *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sometime later - filter...
     *      oTable.fnFilter( 'test string' );
     *    } );
     */


    this.fnFilter = function (sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive) {
      var api = this.api(true);

      if (iColumn === null || iColumn === undefined) {
        api.search(sInput, bRegex, bSmart, bCaseInsensitive);
      } else {
        api.column(iColumn).search(sInput, bRegex, bSmart, bCaseInsensitive);
      }

      api.draw();
    };
    /**
     * Get the data for the whole table, an individual row or an individual cell based on the
     * provided parameters.
     *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
     *    a TR node then the data source for the whole row will be returned. If given as a
     *    TD/TH cell node then iCol will be automatically calculated and the data for the
     *    cell returned. If given as an integer, then this is treated as the aoData internal
     *    data index for the row (see fnGetPosition) and the data for that row used.
     *  @param {int} [col] Optional column index that you want the data of.
     *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
     *    returned. If mRow is defined, just data for that row, and is iCol is
     *    defined, only data for the designated cell is returned.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    // Row data
     *    $(document).ready(function() {
     *      oTable = $('#example').dataTable();
     *
     *      oTable.$('tr').click( function () {
     *        var data = oTable.fnGetData( this );
     *        // ... do something with the array / object of data for the row
     *      } );
     *    } );
     *
     *  @example
     *    // Individual cell data
     *    $(document).ready(function() {
     *      oTable = $('#example').dataTable();
     *
     *      oTable.$('td').click( function () {
     *        var sData = oTable.fnGetData( this );
     *        alert( 'The cell clicked on had the value of '+sData );
     *      } );
     *    } );
     */


    this.fnGetData = function (src, col) {
      var api = this.api(true);

      if (src !== undefined) {
        var type = src.nodeName ? src.nodeName.toLowerCase() : '';
        return col !== undefined || type == 'td' || type == 'th' ? api.cell(src, col).data() : api.row(src).data() || null;
      }

      return api.data().toArray();
    };
    /**
     * Get an array of the TR nodes that are used in the table's body. Note that you will
     * typically want to use the '$' API method in preference to this as it is more
     * flexible.
     *  @param {int} [iRow] Optional row index for the TR element you want
     *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
     *    in the table's body, or iRow is defined, just the TR element requested.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Get the nodes from the table
     *      var nNodes = oTable.fnGetNodes( );
     *    } );
     */


    this.fnGetNodes = function (iRow) {
      var api = this.api(true);
      return iRow !== undefined ? api.row(iRow).node() : api.rows().nodes().flatten().toArray();
    };
    /**
     * Get the array indexes of a particular cell from it's DOM element
     * and column index including hidden columns
     *  @param {node} node this can either be a TR, TD or TH in the table's body
     *  @returns {int} If nNode is given as a TR, then a single index is returned, or
     *    if given as a cell, an array of [row index, column index (visible),
     *    column index (all)] is given.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      $('#example tbody td').click( function () {
     *        // Get the position of the current data from the node
     *        var aPos = oTable.fnGetPosition( this );
     *
     *        // Get the data array for this row
     *        var aData = oTable.fnGetData( aPos[0] );
     *
     *        // Update the data array and return the value
     *        aData[ aPos[1] ] = 'clicked';
     *        this.innerHTML = 'clicked';
     *      } );
     *
     *      // Init DataTables
     *      oTable = $('#example').dataTable();
     *    } );
     */


    this.fnGetPosition = function (node) {
      var api = this.api(true);
      var nodeName = node.nodeName.toUpperCase();

      if (nodeName == 'TR') {
        return api.row(node).index();
      } else if (nodeName == 'TD' || nodeName == 'TH') {
        var cell = api.cell(node).index();
        return [cell.row, cell.columnVisible, cell.column];
      }

      return null;
    };
    /**
     * Check to see if a row is 'open' or not.
     *  @param {node} nTr the table row to check
     *  @returns {boolean} true if the row is currently open, false otherwise
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */


    this.fnIsOpen = function (nTr) {
      return this.api(true).row(nTr).child.isShown();
    };
    /**
     * This function will place a new row directly after a row which is currently
     * on display on the page, with the HTML contents that is passed into the
     * function. This can be used, for example, to ask for confirmation that a
     * particular record should be deleted.
     *  @param {node} nTr The table row to 'open'
     *  @param {string|node|jQuery} mHtml The HTML to put into the row
     *  @param {string} sClass Class to give the new TD cell
     *  @returns {node} The row opened. Note that if the table row passed in as the
     *    first parameter, is not found in the table, this method will silently
     *    return.
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable;
     *
     *      // 'open' an information row when a row is clicked on
     *      $('#example tbody tr').click( function () {
     *        if ( oTable.fnIsOpen(this) ) {
     *          oTable.fnClose( this );
     *        } else {
     *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
     *        }
     *      } );
     *
     *      oTable = $('#example').dataTable();
     *    } );
     */


    this.fnOpen = function (nTr, mHtml, sClass) {
      return this.api(true).row(nTr).child(mHtml, sClass).show().child()[0];
    };
    /**
     * Change the pagination - provides the internal logic for pagination in a simple API
     * function. With this function you can have a DataTables table go to the next,
     * previous, first or last pages.
     *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
     *    or page number to jump to (integer), note that page 0 is the first page.
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      oTable.fnPageChange( 'next' );
     *    } );
     */


    this.fnPageChange = function (mAction, bRedraw) {
      var api = this.api(true).page(mAction);

      if (bRedraw === undefined || bRedraw) {
        api.draw(false);
      }
    };
    /**
     * Show a particular column
     *  @param {int} iCol The column whose display should be changed
     *  @param {bool} bShow Show (true) or hide (false) the column
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Hide the second column after initialisation
     *      oTable.fnSetColumnVis( 1, false );
     *    } );
     */


    this.fnSetColumnVis = function (iCol, bShow, bRedraw) {
      var api = this.api(true).column(iCol).visible(bShow);

      if (bRedraw === undefined || bRedraw) {
        api.columns.adjust().draw();
      }
    };
    /**
     * Get the settings for a particular table for external manipulation
     *  @returns {object} DataTables settings object. See
     *    {@link DataTable.models.oSettings}
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      var oSettings = oTable.fnSettings();
     *
     *      // Show an example parameter from the settings
     *      alert( oSettings._iDisplayStart );
     *    } );
     */


    this.fnSettings = function () {
      return _fnSettingsFromNode(this[_ext.iApiIndex]);
    };
    /**
     * Sort the table by a particular column
     *  @param {int} iCol the data index to sort on. Note that this will not match the
     *    'display index' if you have hidden data entries
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sort immediately with columns 0 and 1
     *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
     *    } );
     */


    this.fnSort = function (aaSort) {
      this.api(true).order(aaSort).draw();
    };
    /**
     * Attach a sort listener to an element for a given column
     *  @param {node} nNode the element to attach the sort listener to
     *  @param {int} iColumn the column that a click on this node will sort on
     *  @param {function} [fnCallback] callback function when sort is run
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *
     *      // Sort on column 1, when 'sorter' is clicked on
     *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
     *    } );
     */


    this.fnSortListener = function (nNode, iColumn, fnCallback) {
      this.api(true).order.listener(nNode, iColumn, fnCallback);
    };
    /**
     * Update a table cell or row - this method will accept either a single value to
     * update the cell with, an array of values with one element for each column or
     * an object in the same format as the original data source. The function is
     * self-referencing in order to make the multi column updates easier.
     *  @param {object|array|string} mData Data to update the cell/row with
     *  @param {node|int} mRow TR element you want to update or the aoData index
     *  @param {int} [iColumn] The column to update, give as null or undefined to
     *    update a whole row.
     *  @param {bool} [bRedraw=true] Redraw the table or not
     *  @param {bool} [bAction=true] Perform pre-draw actions or not
     *  @returns {int} 0 on success, 1 on error
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
     *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
     *    } );
     */


    this.fnUpdate = function (mData, mRow, iColumn, bRedraw, bAction) {
      var api = this.api(true);

      if (iColumn === undefined || iColumn === null) {
        api.row(mRow).data(mData);
      } else {
        api.cell(mRow, iColumn).data(mData);
      }

      if (bAction === undefined || bAction) {
        api.columns.adjust();
      }

      if (bRedraw === undefined || bRedraw) {
        api.draw();
      }

      return 0;
    };
    /**
     * Provide a common method for plug-ins to check the version of DataTables being used, in order
     * to ensure compatibility.
     *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
     *    formats "X" and "X.Y" are also acceptable.
     *  @returns {boolean} true if this version of DataTables is greater or equal to the required
     *    version, or false if this version of DataTales is not suitable
     *  @method
     *  @dtopt API
     *  @deprecated Since v1.10
     *
     *  @example
     *    $(document).ready(function() {
     *      var oTable = $('#example').dataTable();
     *      alert( oTable.fnVersionCheck( '1.9.0' ) );
     *    } );
     */


    this.fnVersionCheck = _ext.fnVersionCheck;

    var _that = this;

    var emptyInit = options === undefined;
    var len = this.length;

    if (emptyInit) {
      options = {};
    }

    this.oApi = this.internal = _ext.internal; // Extend with old style plug-in API methods

    for (var fn in DataTable.ext.internal) {
      if (fn) {
        this[fn] = _fnExternApiFunc(fn);
      }
    }

    this.each(function () {
      // For each initialisation we want to give it a clean initialisation
      // object that can be bashed around
      var o = {};
      var oInit = len > 1 ? // optimisation for single table case
      _fnExtend(o, options, true) : options;
      /*global oInit,_that,emptyInit*/

      var i = 0,
          iLen,
          j,
          jLen,
          k,
          kLen;
      var sId = this.getAttribute('id');
      var bInitHandedOff = false;
      var defaults = DataTable.defaults;
      var $this = $(this);
      /* Sanity check */

      if (this.nodeName.toLowerCase() != 'table') {
        _fnLog(null, 0, 'Non-table node initialisation (' + this.nodeName + ')', 2);

        return;
      }
      /* Backwards compatibility for the defaults */


      _fnCompatOpts(defaults);

      _fnCompatCols(defaults.column);
      /* Convert the camel-case defaults to Hungarian */


      _fnCamelToHungarian(defaults, defaults, true);

      _fnCamelToHungarian(defaults.column, defaults.column, true);
      /* Setting up the initialisation object */


      _fnCamelToHungarian(defaults, $.extend(oInit, $this.data()));
      /* Check to see if we are re-initialising a table */


      var allSettings = DataTable.settings;

      for (i = 0, iLen = allSettings.length; i < iLen; i++) {
        var s = allSettings[i];
        /* Base check on table node */

        if (s.nTable == this || s.nTHead.parentNode == this || s.nTFoot && s.nTFoot.parentNode == this) {
          var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
          var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;

          if (emptyInit || bRetrieve) {
            return s.oInstance;
          } else if (bDestroy) {
            s.oInstance.fnDestroy();
            break;
          } else {
            _fnLog(s, 0, 'Cannot reinitialise DataTable', 3);

            return;
          }
        }
        /* If the element we are initialising has the same ID as a table which was previously
         * initialised, but the table nodes don't match (from before) then we destroy the old
         * instance by simply deleting it. This is under the assumption that the table has been
         * destroyed by other methods. Anyone using non-id selectors will need to do this manually
         */


        if (s.sTableId == this.id) {
          allSettings.splice(i, 1);
          break;
        }
      }
      /* Ensure the table has an ID - required for accessibility */


      if (sId === null || sId === "") {
        sId = "DataTables_Table_" + DataTable.ext._unique++;
        this.id = sId;
      }
      /* Create the settings object for this table and set some of the default parameters */


      var oSettings = $.extend(true, {}, DataTable.models.oSettings, {
        "sDestroyWidth": $this[0].style.width,
        "sInstance": sId,
        "sTableId": sId
      });
      oSettings.nTable = this;
      oSettings.oApi = _that.internal;
      oSettings.oInit = oInit;
      allSettings.push(oSettings); // Need to add the instance after the instance after the settings object has been added
      // to the settings array, so we can self reference the table instance if more than one

      oSettings.oInstance = _that.length === 1 ? _that : $this.dataTable(); // Backwards compatibility, before we apply all the defaults

      _fnCompatOpts(oInit);

      if (oInit.oLanguage) {
        _fnLanguageCompat(oInit.oLanguage);
      } // If the length menu is given, but the init display length is not, use the length menu


      if (oInit.aLengthMenu && !oInit.iDisplayLength) {
        oInit.iDisplayLength = $.isArray(oInit.aLengthMenu[0]) ? oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
      } // Apply the defaults and init options to make a single init object will all
      // options defined from defaults and instance options.


      oInit = _fnExtend($.extend(true, {}, defaults), oInit); // Map the initialisation options onto the settings object

      _fnMap(oSettings.oFeatures, oInit, ["bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender"]);

      _fnMap(oSettings, oInit, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"], // backwards compat
      ["oSearch", "oPreviousSearch"], ["aoSearchCols", "aoPreSearchCols"], ["iDisplayLength", "_iDisplayLength"]]);

      _fnMap(oSettings.oScroll, oInit, [["sScrollX", "sX"], ["sScrollXInner", "sXInner"], ["sScrollY", "sY"], ["bScrollCollapse", "bCollapse"]]);

      _fnMap(oSettings.oLanguage, oInit, "fnInfoCallback");
      /* Callback functions which are array driven */


      _fnCallbackReg(oSettings, 'aoDrawCallback', oInit.fnDrawCallback, 'user');

      _fnCallbackReg(oSettings, 'aoServerParams', oInit.fnServerParams, 'user');

      _fnCallbackReg(oSettings, 'aoStateSaveParams', oInit.fnStateSaveParams, 'user');

      _fnCallbackReg(oSettings, 'aoStateLoadParams', oInit.fnStateLoadParams, 'user');

      _fnCallbackReg(oSettings, 'aoStateLoaded', oInit.fnStateLoaded, 'user');

      _fnCallbackReg(oSettings, 'aoRowCallback', oInit.fnRowCallback, 'user');

      _fnCallbackReg(oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow, 'user');

      _fnCallbackReg(oSettings, 'aoHeaderCallback', oInit.fnHeaderCallback, 'user');

      _fnCallbackReg(oSettings, 'aoFooterCallback', oInit.fnFooterCallback, 'user');

      _fnCallbackReg(oSettings, 'aoInitComplete', oInit.fnInitComplete, 'user');

      _fnCallbackReg(oSettings, 'aoPreDrawCallback', oInit.fnPreDrawCallback, 'user');

      oSettings.rowIdFn = _fnGetObjectDataFn(oInit.rowId);
      /* Browser support detection */

      _fnBrowserDetect(oSettings);

      var oClasses = oSettings.oClasses;
      $.extend(oClasses, DataTable.ext.classes, oInit.oClasses);
      $this.addClass(oClasses.sTable);

      if (oSettings.iInitDisplayStart === undefined) {
        /* Display start point, taking into account the save saving */
        oSettings.iInitDisplayStart = oInit.iDisplayStart;
        oSettings._iDisplayStart = oInit.iDisplayStart;
      }

      if (oInit.iDeferLoading !== null) {
        oSettings.bDeferLoading = true;
        var tmp = $.isArray(oInit.iDeferLoading);
        oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
        oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
      }
      /* Language definitions */


      var oLanguage = oSettings.oLanguage;
      $.extend(true, oLanguage, oInit.oLanguage);

      if (oLanguage.sUrl) {
        /* Get the language definitions from a file - because this Ajax call makes the language
         * get async to the remainder of this function we use bInitHandedOff to indicate that
         * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
         */
        $.ajax({
          dataType: 'json',
          url: oLanguage.sUrl,
          success: function success(json) {
            _fnLanguageCompat(json);

            _fnCamelToHungarian(defaults.oLanguage, json);

            $.extend(true, oLanguage, json);

            _fnInitialise(oSettings);
          },
          error: function error() {
            // Error occurred loading language file, continue on as best we can
            _fnInitialise(oSettings);
          }
        });
        bInitHandedOff = true;
      }
      /*
       * Stripes
       */


      if (oInit.asStripeClasses === null) {
        oSettings.asStripeClasses = [oClasses.sStripeOdd, oClasses.sStripeEven];
      }
      /* Remove row stripe classes if they are already on the table row */


      var stripeClasses = oSettings.asStripeClasses;
      var rowOne = $this.children('tbody').find('tr').eq(0);

      if ($.inArray(true, $.map(stripeClasses, function (el, i) {
        return rowOne.hasClass(el);
      })) !== -1) {
        $('tbody tr', this).removeClass(stripeClasses.join(' '));
        oSettings.asDestroyStripes = stripeClasses.slice();
      }
      /*
       * Columns
       * See if we should load columns automatically or use defined ones
       */


      var anThs = [];
      var aoColumnsInit;
      var nThead = this.getElementsByTagName('thead');

      if (nThead.length !== 0) {
        _fnDetectHeader(oSettings.aoHeader, nThead[0]);

        anThs = _fnGetUniqueThs(oSettings);
      }
      /* If not given a column array, generate one with nulls */


      if (oInit.aoColumns === null) {
        aoColumnsInit = [];

        for (i = 0, iLen = anThs.length; i < iLen; i++) {
          aoColumnsInit.push(null);
        }
      } else {
        aoColumnsInit = oInit.aoColumns;
      }
      /* Add the columns */


      for (i = 0, iLen = aoColumnsInit.length; i < iLen; i++) {
        _fnAddColumn(oSettings, anThs ? anThs[i] : null);
      }
      /* Apply the column definitions */


      _fnApplyColumnDefs(oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
        _fnColumnOptions(oSettings, iCol, oDef);
      });
      /* HTML5 attribute detection - build an mData object automatically if the
       * attributes are found
       */


      if (rowOne.length) {
        var a = function a(cell, name) {
          return cell.getAttribute('data-' + name) !== null ? name : null;
        };

        $(rowOne[0]).children('th, td').each(function (i, cell) {
          var col = oSettings.aoColumns[i];

          if (col.mData === i) {
            var sort = a(cell, 'sort') || a(cell, 'order');
            var filter = a(cell, 'filter') || a(cell, 'search');

            if (sort !== null || filter !== null) {
              col.mData = {
                _: i + '.display',
                sort: sort !== null ? i + '.@data-' + sort : undefined,
                type: sort !== null ? i + '.@data-' + sort : undefined,
                filter: filter !== null ? i + '.@data-' + filter : undefined
              };

              _fnColumnOptions(oSettings, i);
            }
          }
        });
      }

      var features = oSettings.oFeatures;

      var loadedInit = function loadedInit() {
        /*
         * Sorting
         * @todo For modularisation (1.11) this needs to do into a sort start up handler
         */
        // If aaSorting is not defined, then we use the first indicator in asSorting
        // in case that has been altered, so the default sort reflects that option
        if (oInit.aaSorting === undefined) {
          var sorting = oSettings.aaSorting;

          for (i = 0, iLen = sorting.length; i < iLen; i++) {
            sorting[i][1] = oSettings.aoColumns[i].asSorting[0];
          }
        }
        /* Do a first pass on the sorting classes (allows any size changes to be taken into
         * account, and also will apply sorting disabled classes if disabled
         */


        _fnSortingClasses(oSettings);

        if (features.bSort) {
          _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
            if (oSettings.bSorted) {
              var aSort = _fnSortFlatten(oSettings);

              var sortedColumns = {};
              $.each(aSort, function (i, val) {
                sortedColumns[val.src] = val.dir;
              });

              _fnCallbackFire(oSettings, null, 'order', [oSettings, aSort, sortedColumns]);

              _fnSortAria(oSettings);
            }
          });
        }

        _fnCallbackReg(oSettings, 'aoDrawCallback', function () {
          if (oSettings.bSorted || _fnDataSource(oSettings) === 'ssp' || features.bDeferRender) {
            _fnSortingClasses(oSettings);
          }
        }, 'sc');
        /*
         * Final init
         * Cache the header, body and footer as required, creating them if needed
         */
        // Work around for Webkit bug 83867 - store the caption-side before removing from doc


        var captions = $this.children('caption').each(function () {
          this._captionSide = $(this).css('caption-side');
        });
        var thead = $this.children('thead');

        if (thead.length === 0) {
          thead = $('<thead/>').appendTo($this);
        }

        oSettings.nTHead = thead[0];
        var tbody = $this.children('tbody');

        if (tbody.length === 0) {
          tbody = $('<tbody/>').appendTo($this);
        }

        oSettings.nTBody = tbody[0];
        var tfoot = $this.children('tfoot');

        if (tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "")) {
          // If we are a scrolling table, and no footer has been given, then we need to create
          // a tfoot element for the caption element to be appended to
          tfoot = $('<tfoot/>').appendTo($this);
        }

        if (tfoot.length === 0 || tfoot.children().length === 0) {
          $this.addClass(oClasses.sNoFooter);
        } else if (tfoot.length > 0) {
          oSettings.nTFoot = tfoot[0];

          _fnDetectHeader(oSettings.aoFooter, oSettings.nTFoot);
        }
        /* Check if there is data passing into the constructor */


        if (oInit.aaData) {
          for (i = 0; i < oInit.aaData.length; i++) {
            _fnAddData(oSettings, oInit.aaData[i]);
          }
        } else if (oSettings.bDeferLoading || _fnDataSource(oSettings) == 'dom') {
          /* Grab the data from the page - only do this when deferred loading or no Ajax
           * source since there is no point in reading the DOM data if we are then going
           * to replace it with Ajax data
           */
          _fnAddTr(oSettings, $(oSettings.nTBody).children('tr'));
        }
        /* Copy the data index array */


        oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
        /* Initialisation complete - table can be drawn */

        oSettings.bInitialised = true;
        /* Check if we need to initialise the table (it might not have been handed off to the
         * language processor)
         */

        if (bInitHandedOff === false) {
          _fnInitialise(oSettings);
        }
      };
      /* Must be done after everything which can be overridden by the state saving! */


      if (oInit.bStateSave) {
        features.bStateSave = true;

        _fnCallbackReg(oSettings, 'aoDrawCallback', _fnSaveState, 'state_save');

        _fnLoadState(oSettings, oInit, loadedInit);
      } else {
        loadedInit();
      }
    });
    _that = null;
    return this;
  };
  /*
   * It is useful to have variables which are scoped locally so only the
   * DataTables functions can access them and they don't leak into global space.
   * At the same time these functions are often useful over multiple files in the
   * core and API, so we list, or at least document, all variables which are used
   * by DataTables as private variables here. This also ensures that there is no
   * clashing of variable names and that they can easily referenced for reuse.
   */
  // Defined else where
  //  _selector_run
  //  _selector_opts
  //  _selector_first
  //  _selector_row_indexes


  var _ext; // DataTable.ext


  var _Api2; // DataTable.Api


  var _api_register; // DataTable.Api.register


  var _api_registerPlural; // DataTable.Api.registerPlural


  var _re_dic = {};
  var _re_new_lines = /[\r\n]/g;
  var _re_html = /<.*?>/g; // This is not strict ISO8601 - Date.parse() is quite lax, although
  // implementations differ between browsers.

  var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/; // Escape regular expression special characters

  var _re_escape_regex = new RegExp('(\\' + ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-'].join('|\\') + ')', 'g'); // http://en.wikipedia.org/wiki/Foreign_exchange_market
  // - \u20BD - Russian ruble.
  // - \u20a9 - South Korean Won
  // - \u20BA - Turkish Lira
  // - \u20B9 - Indian Rupee
  // - R - Brazil (R$) and South Africa
  // - fr - Swiss Franc
  // - kr - Swedish krona, Norwegian krone and Danish krone
  // - \u2009 is thin space and \u202F is narrow no-break space, both used in many
  //   standards as thousands separators.


  var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;

  var _empty = function _empty(d) {
    return !d || d === true || d === '-' ? true : false;
  };

  var _intVal = function _intVal(s) {
    var integer = parseInt(s, 10);
    return !isNaN(integer) && isFinite(s) ? integer : null;
  }; // Convert from a formatted number with characters other than `.` as the
  // decimal place, to a Javascript number


  var _numToDecimal = function _numToDecimal(num, decimalPoint) {
    // Cache created regular expressions for speed as this function is called often
    if (!_re_dic[decimalPoint]) {
      _re_dic[decimalPoint] = new RegExp(_fnEscapeRegex(decimalPoint), 'g');
    }

    return typeof num === 'string' && decimalPoint !== '.' ? num.replace(/\./g, '').replace(_re_dic[decimalPoint], '.') : num;
  };

  var _isNumber = function _isNumber(d, decimalPoint, formatted) {
    var strType = typeof d === 'string'; // If empty return immediately so there must be a number if it is a
    // formatted string (this stops the string "k", or "kr", etc being detected
    // as a formatted number for currency

    if (_empty(d)) {
      return true;
    }

    if (decimalPoint && strType) {
      d = _numToDecimal(d, decimalPoint);
    }

    if (formatted && strType) {
      d = d.replace(_re_formatted_numeric, '');
    }

    return !isNaN(parseFloat(d)) && isFinite(d);
  }; // A string without HTML in it can be considered to be HTML still


  var _isHtml = function _isHtml(d) {
    return _empty(d) || typeof d === 'string';
  };

  var _htmlNumeric = function _htmlNumeric(d, decimalPoint, formatted) {
    if (_empty(d)) {
      return true;
    }

    var html = _isHtml(d);

    return !html ? null : _isNumber(_stripHtml(d), decimalPoint, formatted) ? true : null;
  };

  var _pluck = function _pluck(a, prop, prop2) {
    var out = [];
    var i = 0,
        ien = a.length; // Could have the test in the loop for slightly smaller code, but speed
    // is essential here

    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[i] && a[i][prop]) {
          out.push(a[i][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        if (a[i]) {
          out.push(a[i][prop]);
        }
      }
    }

    return out;
  }; // Basically the same as _pluck, but rather than looping over `a` we use `order`
  // as the indexes to pick from `a`


  var _pluck_order = function _pluck_order(a, order, prop, prop2) {
    var out = [];
    var i = 0,
        ien = order.length; // Could have the test in the loop for slightly smaller code, but speed
    // is essential here

    if (prop2 !== undefined) {
      for (; i < ien; i++) {
        if (a[order[i]][prop]) {
          out.push(a[order[i]][prop][prop2]);
        }
      }
    } else {
      for (; i < ien; i++) {
        out.push(a[order[i]][prop]);
      }
    }

    return out;
  };

  var _range = function _range(len, start) {
    var out = [];
    var end;

    if (start === undefined) {
      start = 0;
      end = len;
    } else {
      end = start;
      start = len;
    }

    for (var i = start; i < end; i++) {
      out.push(i);
    }

    return out;
  };

  var _removeEmpty = function _removeEmpty(a) {
    var out = [];

    for (var i = 0, ien = a.length; i < ien; i++) {
      if (a[i]) {
        // careful - will remove all falsy values!
        out.push(a[i]);
      }
    }

    return out;
  };

  var _stripHtml = function _stripHtml(d) {
    return d.replace(_re_html, '');
  };
  /**
   * Determine if all values in the array are unique. This means we can short
   * cut the _unique method at the cost of a single loop. A sorted array is used
   * to easily check the values.
   *
   * @param  {array} src Source array
   * @return {boolean} true if all unique, false otherwise
   * @ignore
   */


  var _areAllUnique = function _areAllUnique(src) {
    if (src.length < 2) {
      return true;
    }

    var sorted = src.slice().sort();
    var last = sorted[0];

    for (var i = 1, ien = sorted.length; i < ien; i++) {
      if (sorted[i] === last) {
        return false;
      }

      last = sorted[i];
    }

    return true;
  };
  /**
   * Find the unique elements in a source array.
   *
   * @param  {array} src Source array
   * @return {array} Array of unique items
   * @ignore
   */


  var _unique = function _unique(src) {
    if (_areAllUnique(src)) {
      return src.slice();
    } // A faster unique method is to use object keys to identify used values,
    // but this doesn't work with arrays or objects, which we must also
    // consider. See jsperf.com/compare-array-unique-versions/4 for more
    // information.


    var out = [],
        val,
        i,
        ien = src.length,
        j,
        k = 0;

    again: for (i = 0; i < ien; i++) {
      val = src[i];

      for (j = 0; j < k; j++) {
        if (out[j] === val) {
          continue again;
        }
      }

      out.push(val);
      k++;
    }

    return out;
  };
  /**
   * DataTables utility methods
   * 
   * This namespace provides helper methods that DataTables uses internally to
   * create a DataTable, but which are not exclusively used only for DataTables.
   * These methods can be used by extension authors to save the duplication of
   * code.
   *
   *  @namespace
   */


  DataTable.util = {
    /**
     * Throttle the calls to a function. Arguments and context are maintained
     * for the throttled function.
     *
     * @param {function} fn Function to be called
     * @param {integer} freq Call frequency in mS
     * @return {function} Wrapped function
     */
    throttle: function throttle(fn, freq) {
      var frequency = freq !== undefined ? freq : 200,
          last,
          timer;
      return function () {
        var that = this,
            now = +new Date(),
            args = arguments;

        if (last && now < last + frequency) {
          clearTimeout(timer);
          timer = setTimeout(function () {
            last = undefined;
            fn.apply(that, args);
          }, frequency);
        } else {
          last = now;
          fn.apply(that, args);
        }
      };
    },

    /**
     * Escape a string such that it can be used in a regular expression
     *
     *  @param {string} val string to escape
     *  @returns {string} escaped string
     */
    escapeRegex: function escapeRegex(val) {
      return val.replace(_re_escape_regex, '\\$1');
    }
  };
  /**
   * Create a mapping object that allows camel case parameters to be looked up
   * for their Hungarian counterparts. The mapping is stored in a private
   * parameter called `_hungarianMap` which can be accessed on the source object.
   *  @param {object} o
   *  @memberof DataTable#oApi
   */

  function _fnHungarianMap(o) {
    var hungarian = 'a aa ai ao as b fn i m o s ',
        match,
        newKey,
        map = {};
    $.each(o, function (key, val) {
      match = key.match(/^([^A-Z]+?)([A-Z])/);

      if (match && hungarian.indexOf(match[1] + ' ') !== -1) {
        newKey = key.replace(match[0], match[2].toLowerCase());
        map[newKey] = key;

        if (match[1] === 'o') {
          _fnHungarianMap(o[key]);
        }
      }
    });
    o._hungarianMap = map;
  }
  /**
   * Convert from camel case parameters to Hungarian, based on a Hungarian map
   * created by _fnHungarianMap.
   *  @param {object} src The model object which holds all parameters that can be
   *    mapped.
   *  @param {object} user The object to convert from camel case to Hungarian.
   *  @param {boolean} force When set to `true`, properties which already have a
   *    Hungarian value in the `user` object will be overwritten. Otherwise they
   *    won't be.
   *  @memberof DataTable#oApi
   */


  function _fnCamelToHungarian(src, user, force) {
    if (!src._hungarianMap) {
      _fnHungarianMap(src);
    }

    var hungarianKey;
    $.each(user, function (key, val) {
      hungarianKey = src._hungarianMap[key];

      if (hungarianKey !== undefined && (force || user[hungarianKey] === undefined)) {
        // For objects, we need to buzz down into the object to copy parameters
        if (hungarianKey.charAt(0) === 'o') {
          // Copy the camelCase options over to the hungarian
          if (!user[hungarianKey]) {
            user[hungarianKey] = {};
          }

          $.extend(true, user[hungarianKey], user[key]);

          _fnCamelToHungarian(src[hungarianKey], user[hungarianKey], force);
        } else {
          user[hungarianKey] = user[key];
        }
      }
    });
  }
  /**
   * Language compatibility - when certain options are given, and others aren't, we
   * need to duplicate the values over, in order to provide backwards compatibility
   * with older language files.
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnLanguageCompat(lang) {
    var defaults = DataTable.defaults.oLanguage;
    var zeroRecords = lang.sZeroRecords;
    /* Backwards compatibility - if there is no sEmptyTable given, then use the same as
     * sZeroRecords - assuming that is given.
     */

    if (!lang.sEmptyTable && zeroRecords && defaults.sEmptyTable === "No data available in table") {
      _fnMap(lang, lang, 'sZeroRecords', 'sEmptyTable');
    }
    /* Likewise with loading records */


    if (!lang.sLoadingRecords && zeroRecords && defaults.sLoadingRecords === "Loading...") {
      _fnMap(lang, lang, 'sZeroRecords', 'sLoadingRecords');
    } // Old parameter name of the thousands separator mapped onto the new


    if (lang.sInfoThousands) {
      lang.sThousands = lang.sInfoThousands;
    }

    var decimal = lang.sDecimal;

    if (decimal) {
      _addNumericSort(decimal);
    }
  }
  /**
   * Map one parameter onto another
   *  @param {object} o Object to map
   *  @param {*} knew The new parameter name
   *  @param {*} old The old parameter name
   */


  var _fnCompatMap = function _fnCompatMap(o, knew, old) {
    if (o[knew] !== undefined) {
      o[old] = o[knew];
    }
  };
  /**
   * Provide backwards compatibility for the main DT options. Note that the new
   * options are mapped onto the old parameters, so this is an external interface
   * change only.
   *  @param {object} init Object to map
   */


  function _fnCompatOpts(init) {
    _fnCompatMap(init, 'ordering', 'bSort');

    _fnCompatMap(init, 'orderMulti', 'bSortMulti');

    _fnCompatMap(init, 'orderClasses', 'bSortClasses');

    _fnCompatMap(init, 'orderCellsTop', 'bSortCellsTop');

    _fnCompatMap(init, 'order', 'aaSorting');

    _fnCompatMap(init, 'orderFixed', 'aaSortingFixed');

    _fnCompatMap(init, 'paging', 'bPaginate');

    _fnCompatMap(init, 'pagingType', 'sPaginationType');

    _fnCompatMap(init, 'pageLength', 'iDisplayLength');

    _fnCompatMap(init, 'searching', 'bFilter'); // Boolean initialisation of x-scrolling


    if (typeof init.sScrollX === 'boolean') {
      init.sScrollX = init.sScrollX ? '100%' : '';
    }

    if (typeof init.scrollX === 'boolean') {
      init.scrollX = init.scrollX ? '100%' : '';
    } // Column search objects are in an array, so it needs to be converted
    // element by element


    var searchCols = init.aoSearchCols;

    if (searchCols) {
      for (var i = 0, ien = searchCols.length; i < ien; i++) {
        if (searchCols[i]) {
          _fnCamelToHungarian(DataTable.models.oSearch, searchCols[i]);
        }
      }
    }
  }
  /**
   * Provide backwards compatibility for column options. Note that the new options
   * are mapped onto the old parameters, so this is an external interface change
   * only.
   *  @param {object} init Object to map
   */


  function _fnCompatCols(init) {
    _fnCompatMap(init, 'orderable', 'bSortable');

    _fnCompatMap(init, 'orderData', 'aDataSort');

    _fnCompatMap(init, 'orderSequence', 'asSorting');

    _fnCompatMap(init, 'orderDataType', 'sortDataType'); // orderData can be given as an integer


    var dataSort = init.aDataSort;

    if (typeof dataSort === 'number' && !$.isArray(dataSort)) {
      init.aDataSort = [dataSort];
    }
  }
  /**
   * Browser feature detection for capabilities, quirks
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnBrowserDetect(settings) {
    // We don't need to do this every time DataTables is constructed, the values
    // calculated are specific to the browser and OS configuration which we
    // don't expect to change between initialisations
    if (!DataTable.__browser) {
      var browser = {};
      DataTable.__browser = browser; // Scrolling feature / quirks detection

      var n = $('<div/>').css({
        position: 'fixed',
        top: 0,
        left: $(window).scrollLeft() * -1,
        // allow for scrolling
        height: 1,
        width: 1,
        overflow: 'hidden'
      }).append($('<div/>').css({
        position: 'absolute',
        top: 1,
        left: 1,
        width: 100,
        overflow: 'scroll'
      }).append($('<div/>').css({
        width: '100%',
        height: 10
      }))).appendTo('body');
      var outer = n.children();
      var inner = outer.children(); // Numbers below, in order, are:
      // inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
      //
      // IE6 XP:                           100 100 100  83
      // IE7 Vista:                        100 100 100  83
      // IE 8+ Windows:                     83  83 100  83
      // Evergreen Windows:                 83  83 100  83
      // Evergreen Mac with scrollbars:     85  85 100  85
      // Evergreen Mac without scrollbars: 100 100 100 100
      // Get scrollbar width

      browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth; // IE6/7 will oversize a width 100% element inside a scrolling element, to
      // include the width of the scrollbar, while other browsers ensure the inner
      // element is contained without forcing scrolling

      browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100; // In rtl text layout, some browsers (most, but not all) will place the
      // scrollbar on the left, rather than the right.

      browser.bScrollbarLeft = Math.round(inner.offset().left) !== 1; // IE8- don't provide height and width for getBoundingClientRect

      browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
      n.remove();
    }

    $.extend(settings.oBrowser, DataTable.__browser);
    settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
  }
  /**
   * Array.prototype reduce[Right] method, used for browsers which don't support
   * JS 1.6. Done this way to reduce code size, since we iterate either way
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnReduce(that, fn, init, start, end, inc) {
    var i = start,
        value,
        isSet = false;

    if (init !== undefined) {
      value = init;
      isSet = true;
    }

    while (i !== end) {
      if (!that.hasOwnProperty(i)) {
        continue;
      }

      value = isSet ? fn(value, that[i], i, that) : that[i];
      isSet = true;
      i += inc;
    }

    return value;
  }
  /**
   * Add a column to the list used for the table with default values
   *  @param {object} oSettings dataTables settings object
   *  @param {node} nTh The th element for this column
   *  @memberof DataTable#oApi
   */


  function _fnAddColumn(oSettings, nTh) {
    // Add column to aoColumns array
    var oDefaults = DataTable.defaults.column;
    var iCol = oSettings.aoColumns.length;
    var oCol = $.extend({}, DataTable.models.oColumn, oDefaults, {
      "nTh": nTh ? nTh : document.createElement('th'),
      "sTitle": oDefaults.sTitle ? oDefaults.sTitle : nTh ? nTh.innerHTML : '',
      "aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
      "mData": oDefaults.mData ? oDefaults.mData : iCol,
      idx: iCol
    });
    oSettings.aoColumns.push(oCol); // Add search object for column specific search. Note that the `searchCols[ iCol ]`
    // passed into extend can be undefined. This allows the user to give a default
    // with only some of the parameters defined, and also not give a default

    var searchCols = oSettings.aoPreSearchCols;
    searchCols[iCol] = $.extend({}, DataTable.models.oSearch, searchCols[iCol]); // Use the default column options function to initialise classes etc

    _fnColumnOptions(oSettings, iCol, $(nTh).data());
  }
  /**
   * Apply options for a column
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iCol column index to consider
   *  @param {object} oOptions object with sType, bVisible and bSearchable etc
   *  @memberof DataTable#oApi
   */


  function _fnColumnOptions(oSettings, iCol, oOptions) {
    var oCol = oSettings.aoColumns[iCol];
    var oClasses = oSettings.oClasses;
    var th = $(oCol.nTh); // Try to get width information from the DOM. We can't get it from CSS
    // as we'd need to parse the CSS stylesheet. `width` option can override

    if (!oCol.sWidthOrig) {
      // Width attribute
      oCol.sWidthOrig = th.attr('width') || null; // Style attribute

      var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);

      if (t) {
        oCol.sWidthOrig = t[1];
      }
    }
    /* User specified column options */


    if (oOptions !== undefined && oOptions !== null) {
      // Backwards compatibility
      _fnCompatCols(oOptions); // Map camel case parameters to their Hungarian counterparts


      _fnCamelToHungarian(DataTable.defaults.column, oOptions);
      /* Backwards compatibility for mDataProp */


      if (oOptions.mDataProp !== undefined && !oOptions.mData) {
        oOptions.mData = oOptions.mDataProp;
      }

      if (oOptions.sType) {
        oCol._sManualType = oOptions.sType;
      } // `class` is a reserved word in Javascript, so we need to provide
      // the ability to use a valid name for the camel case input


      if (oOptions.className && !oOptions.sClass) {
        oOptions.sClass = oOptions.className;
      }

      if (oOptions.sClass) {
        th.addClass(oOptions.sClass);
      }

      $.extend(oCol, oOptions);

      _fnMap(oCol, oOptions, "sWidth", "sWidthOrig");
      /* iDataSort to be applied (backwards compatibility), but aDataSort will take
       * priority if defined
       */


      if (oOptions.iDataSort !== undefined) {
        oCol.aDataSort = [oOptions.iDataSort];
      }

      _fnMap(oCol, oOptions, "aDataSort");
    }
    /* Cache the data get and set functions for speed */


    var mDataSrc = oCol.mData;

    var mData = _fnGetObjectDataFn(mDataSrc);

    var mRender = oCol.mRender ? _fnGetObjectDataFn(oCol.mRender) : null;

    var attrTest = function attrTest(src) {
      return typeof src === 'string' && src.indexOf('@') !== -1;
    };

    oCol._bAttrSrc = $.isPlainObject(mDataSrc) && (attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter));
    oCol._setter = null;

    oCol.fnGetData = function (rowData, type, meta) {
      var innerData = mData(rowData, type, undefined, meta);
      return mRender && type ? mRender(innerData, type, rowData, meta) : innerData;
    };

    oCol.fnSetData = function (rowData, val, meta) {
      return _fnSetObjectDataFn(mDataSrc)(rowData, val, meta);
    }; // Indicate if DataTables should read DOM data as an object or array
    // Used in _fnGetRowElements


    if (typeof mDataSrc !== 'number') {
      oSettings._rowReadObject = true;
    }
    /* Feature sorting overrides column specific when off */


    if (!oSettings.oFeatures.bSort) {
      oCol.bSortable = false;
      th.addClass(oClasses.sSortableNone); // Have to add class here as order event isn't called
    }
    /* Check that the class assignment is correct for sorting */


    var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
    var bDesc = $.inArray('desc', oCol.asSorting) !== -1;

    if (!oCol.bSortable || !bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableNone;
      oCol.sSortingClassJUI = "";
    } else if (bAsc && !bDesc) {
      oCol.sSortingClass = oClasses.sSortableAsc;
      oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
    } else if (!bAsc && bDesc) {
      oCol.sSortingClass = oClasses.sSortableDesc;
      oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
    } else {
      oCol.sSortingClass = oClasses.sSortable;
      oCol.sSortingClassJUI = oClasses.sSortJUI;
    }
  }
  /**
   * Adjust the table column widths for new data. Note: you would probably want to
   * do a redraw after calling this function!
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnAdjustColumnSizing(settings) {
    /* Not interested in doing column width calculation if auto-width is disabled */
    if (settings.oFeatures.bAutoWidth !== false) {
      var columns = settings.aoColumns;

      _fnCalculateColumnWidths(settings);

      for (var i = 0, iLen = columns.length; i < iLen; i++) {
        columns[i].nTh.style.width = columns[i].sWidth;
      }
    }

    var scroll = settings.oScroll;

    if (scroll.sY !== '' || scroll.sX !== '') {
      _fnScrollDraw(settings);
    }

    _fnCallbackFire(settings, null, 'column-sizing', [settings]);
  }
  /**
   * Covert the index of a visible column to the index in the data array (take account
   * of hidden columns)
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iMatch Visible column index to lookup
   *  @returns {int} i the data index
   *  @memberof DataTable#oApi
   */


  function _fnVisibleToColumnIndex(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, 'bVisible');

    return typeof aiVis[iMatch] === 'number' ? aiVis[iMatch] : null;
  }
  /**
   * Covert the index of an index in the data array and convert it to the visible
   *   column index (take account of hidden columns)
   *  @param {int} iMatch Column index to lookup
   *  @param {object} oSettings dataTables settings object
   *  @returns {int} i the data index
   *  @memberof DataTable#oApi
   */


  function _fnColumnIndexToVisible(oSettings, iMatch) {
    var aiVis = _fnGetColumns(oSettings, 'bVisible');

    var iPos = $.inArray(iMatch, aiVis);
    return iPos !== -1 ? iPos : null;
  }
  /**
   * Get the number of visible columns
   *  @param {object} oSettings dataTables settings object
   *  @returns {int} i the number of visible columns
   *  @memberof DataTable#oApi
   */


  function _fnVisbleColumns(oSettings) {
    var vis = 0; // No reduce in IE8, use a loop for now

    $.each(oSettings.aoColumns, function (i, col) {
      if (col.bVisible && $(col.nTh).css('display') !== 'none') {
        vis++;
      }
    });
    return vis;
  }
  /**
   * Get an array of column indexes that match a given property
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sParam Parameter in aoColumns to look for - typically
   *    bVisible or bSearchable
   *  @returns {array} Array of indexes with matched properties
   *  @memberof DataTable#oApi
   */


  function _fnGetColumns(oSettings, sParam) {
    var a = [];
    $.map(oSettings.aoColumns, function (val, i) {
      if (val[sParam]) {
        a.push(i);
      }
    });
    return a;
  }
  /**
   * Calculate the 'type' of a column
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnColumnTypes(settings) {
    var columns = settings.aoColumns;
    var data = settings.aoData;
    var types = DataTable.ext.type.detect;
    var i, ien, j, jen, k, ken;
    var col, cell, detectedType, cache; // For each column, spin over the 

    for (i = 0, ien = columns.length; i < ien; i++) {
      col = columns[i];
      cache = [];

      if (!col.sType && col._sManualType) {
        col.sType = col._sManualType;
      } else if (!col.sType) {
        for (j = 0, jen = types.length; j < jen; j++) {
          for (k = 0, ken = data.length; k < ken; k++) {
            // Use a cache array so we only need to get the type data
            // from the formatter once (when using multiple detectors)
            if (cache[k] === undefined) {
              cache[k] = _fnGetCellData(settings, k, i, 'type');
            }

            detectedType = types[j](cache[k], settings); // If null, then this type can't apply to this column, so
            // rather than testing all cells, break out. There is an
            // exception for the last type which is `html`. We need to
            // scan all rows since it is possible to mix string and HTML
            // types

            if (!detectedType && j !== types.length - 1) {
              break;
            } // Only a single match is needed for html type since it is
            // bottom of the pile and very similar to string


            if (detectedType === 'html') {
              break;
            }
          } // Type is valid for all data points in the column - use this
          // type


          if (detectedType) {
            col.sType = detectedType;
            break;
          }
        } // Fall back - if no type was detected, always use string


        if (!col.sType) {
          col.sType = 'string';
        }
      }
    }
  }
  /**
   * Take the column definitions and static columns arrays and calculate how
   * they relate to column indexes. The callback function will then apply the
   * definition found for a column to a suitable configuration object.
   *  @param {object} oSettings dataTables settings object
   *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
   *  @param {array} aoCols The aoColumns array that defines columns individually
   *  @param {function} fn Callback function - takes two parameters, the calculated
   *    column index and the definition for that column.
   *  @memberof DataTable#oApi
   */


  function _fnApplyColumnDefs(oSettings, aoColDefs, aoCols, fn) {
    var i, iLen, j, jLen, k, kLen, def;
    var columns = oSettings.aoColumns; // Column definitions with aTargets

    if (aoColDefs) {
      /* Loop over the definitions array - loop in reverse so first instance has priority */
      for (i = aoColDefs.length - 1; i >= 0; i--) {
        def = aoColDefs[i];
        /* Each definition can target multiple columns, as it is an array */

        var aTargets = def.targets !== undefined ? def.targets : def.aTargets;

        if (!$.isArray(aTargets)) {
          aTargets = [aTargets];
        }

        for (j = 0, jLen = aTargets.length; j < jLen; j++) {
          if (typeof aTargets[j] === 'number' && aTargets[j] >= 0) {
            /* Add columns that we don't yet know about */
            while (columns.length <= aTargets[j]) {
              _fnAddColumn(oSettings);
            }
            /* Integer, basic index */


            fn(aTargets[j], def);
          } else if (typeof aTargets[j] === 'number' && aTargets[j] < 0) {
            /* Negative integer, right to left column counting */
            fn(columns.length + aTargets[j], def);
          } else if (typeof aTargets[j] === 'string') {
            /* Class name matching on TH element */
            for (k = 0, kLen = columns.length; k < kLen; k++) {
              if (aTargets[j] == "_all" || $(columns[k].nTh).hasClass(aTargets[j])) {
                fn(k, def);
              }
            }
          }
        }
      }
    } // Statically defined columns array


    if (aoCols) {
      for (i = 0, iLen = aoCols.length; i < iLen; i++) {
        fn(i, aoCols[i]);
      }
    }
  }
  /**
   * Add a data array to the table, creating DOM node etc. This is the parallel to
   * _fnGatherData, but for adding rows from a Javascript source, rather than a
   * DOM source.
   *  @param {object} oSettings dataTables settings object
   *  @param {array} aData data array to be added
   *  @param {node} [nTr] TR element to add to the table - optional. If not given,
   *    DataTables will create a row automatically
   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
   *    if nTr is.
   *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
   *  @memberof DataTable#oApi
   */


  function _fnAddData(oSettings, aDataIn, nTr, anTds) {
    /* Create the object for storing information about this new row */
    var iRow = oSettings.aoData.length;
    var oData = $.extend(true, {}, DataTable.models.oRow, {
      src: nTr ? 'dom' : 'data',
      idx: iRow
    });
    oData._aData = aDataIn;
    oSettings.aoData.push(oData);
    /* Create the cells */

    var nTd, sThisType;
    var columns = oSettings.aoColumns; // Invalidate the column types as the new data needs to be revalidated

    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      columns[i].sType = null;
    }
    /* Add to the display array */


    oSettings.aiDisplayMaster.push(iRow);
    var id = oSettings.rowIdFn(aDataIn);

    if (id !== undefined) {
      oSettings.aIds[id] = oData;
    }
    /* Create the DOM information, or register it if already present */


    if (nTr || !oSettings.oFeatures.bDeferRender) {
      _fnCreateTr(oSettings, iRow, nTr, anTds);
    }

    return iRow;
  }
  /**
   * Add one or more TR elements to the table. Generally we'd expect to
   * use this for reading data from a DOM sourced table, but it could be
   * used for an TR element. Note that if a TR is given, it is used (i.e.
   * it is not cloned).
   *  @param {object} settings dataTables settings object
   *  @param {array|node|jQuery} trs The TR element(s) to add to the table
   *  @returns {array} Array of indexes for the added rows
   *  @memberof DataTable#oApi
   */


  function _fnAddTr(settings, trs) {
    var row; // Allow an individual node to be passed in

    if (!(trs instanceof $)) {
      trs = $(trs);
    }

    return trs.map(function (i, el) {
      row = _fnGetRowElements(settings, el);
      return _fnAddData(settings, row.data, el, row.cells);
    });
  }
  /**
   * Take a TR element and convert it to an index in aoData
   *  @param {object} oSettings dataTables settings object
   *  @param {node} n the TR element to find
   *  @returns {int} index if the node is found, null if not
   *  @memberof DataTable#oApi
   */


  function _fnNodeToDataIndex(oSettings, n) {
    return n._DT_RowIndex !== undefined ? n._DT_RowIndex : null;
  }
  /**
   * Take a TD element and convert it into a column data index (not the visible index)
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iRow The row number the TD/TH can be found in
   *  @param {node} n The TD/TH element to find
   *  @returns {int} index if the node is found, -1 if not
   *  @memberof DataTable#oApi
   */


  function _fnNodeToColumnIndex(oSettings, iRow, n) {
    return $.inArray(n, oSettings.aoData[iRow].anCells);
  }
  /**
   * Get the data for a given cell from the internal cache, taking into account data mapping
   *  @param {object} settings dataTables settings object
   *  @param {int} rowIdx aoData row id
   *  @param {int} colIdx Column index
   *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
   *  @returns {*} Cell data
   *  @memberof DataTable#oApi
   */


  function _fnGetCellData(settings, rowIdx, colIdx, type) {
    var draw = settings.iDraw;
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    var defaultContent = col.sDefaultContent;
    var cellData = col.fnGetData(rowData, type, {
      settings: settings,
      row: rowIdx,
      col: colIdx
    });

    if (cellData === undefined) {
      if (settings.iDrawError != draw && defaultContent === null) {
        _fnLog(settings, 0, "Requested unknown parameter " + (typeof col.mData == 'function' ? '{function}' : "'" + col.mData + "'") + " for row " + rowIdx + ", column " + colIdx, 4);

        settings.iDrawError = draw;
      }

      return defaultContent;
    } // When the data source is null and a specific data type is requested (i.e.
    // not the original data), we can use default column data


    if ((cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined) {
      cellData = defaultContent;
    } else if (typeof cellData === 'function') {
      // If the data source is a function, then we run it and use the return,
      // executing in the scope of the data object (for instances)
      return cellData.call(rowData);
    }

    if (cellData === null && type == 'display') {
      return '';
    }

    return cellData;
  }
  /**
   * Set the value for a specific cell, into the internal data cache
   *  @param {object} settings dataTables settings object
   *  @param {int} rowIdx aoData row id
   *  @param {int} colIdx Column index
   *  @param {*} val Value to set
   *  @memberof DataTable#oApi
   */


  function _fnSetCellData(settings, rowIdx, colIdx, val) {
    var col = settings.aoColumns[colIdx];
    var rowData = settings.aoData[rowIdx]._aData;
    col.fnSetData(rowData, val, {
      settings: settings,
      row: rowIdx,
      col: colIdx
    });
  } // Private variable that is used to match action syntax in the data property object


  var __reArray = /\[.*?\]$/;
  var __reFn = /\(\)$/;
  /**
   * Split string on periods, taking into account escaped periods
   * @param  {string} str String to split
   * @return {array} Split string
   */

  function _fnSplitObjNotation(str) {
    return $.map(str.match(/(\\.|[^\.])+/g) || [''], function (s) {
      return s.replace(/\\\./g, '.');
    });
  }
  /**
   * Return a function that can be used to get data from a source object, taking
   * into account the ability to use nested objects as a source
   *  @param {string|int|function} mSource The data source for the object
   *  @returns {function} Data get function
   *  @memberof DataTable#oApi
   */


  function _fnGetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      /* Build an object of get functions, and wrap them in a single call */
      var o = {};
      $.each(mSource, function (key, val) {
        if (val) {
          o[key] = _fnGetObjectDataFn(val);
        }
      });
      return function (data, type, row, meta) {
        var t = o[type] || o._;
        return t !== undefined ? t(data, type, row, meta) : data;
      };
    } else if (mSource === null) {
      /* Give an empty string for rendering / sorting etc */
      return function (data) {
        // type, row and meta also passed, but not used
        return data;
      };
    } else if (typeof mSource === 'function') {
      return function (data, type, row, meta) {
        return mSource(data, type, row, meta);
      };
    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
      /* If there is a . in the source string then the data source is in a
       * nested object so we loop over the data for each level to get the next
       * level down. On each loop we test for undefined, and if found immediately
       * return. This allows entire objects to be missing and sDefaultContent to
       * be used if defined, rather than throwing an error
       */
      var fetchData = function fetchData(data, type, src) {
        var arrayNotation, funcNotation, out, innerSrc;

        if (src !== "") {
          var a = _fnSplitObjNotation(src);

          for (var i = 0, iLen = a.length; i < iLen; i++) {
            // Check if we are dealing with special notation
            arrayNotation = a[i].match(__reArray);
            funcNotation = a[i].match(__reFn);

            if (arrayNotation) {
              // Array notation
              a[i] = a[i].replace(__reArray, ''); // Condition allows simply [] to be passed in

              if (a[i] !== "") {
                data = data[a[i]];
              }

              out = []; // Get the remainder of the nested object to get

              a.splice(0, i + 1);
              innerSrc = a.join('.'); // Traverse each entry in the array getting the properties requested

              if ($.isArray(data)) {
                for (var j = 0, jLen = data.length; j < jLen; j++) {
                  out.push(fetchData(data[j], type, innerSrc));
                }
              } // If a string is given in between the array notation indicators, that
              // is used to join the strings together, otherwise an array is returned


              var join = arrayNotation[0].substring(1, arrayNotation[0].length - 1);
              data = join === "" ? out : out.join(join); // The inner call to fetchData has already traversed through the remainder
              // of the source requested, so we exit from the loop

              break;
            } else if (funcNotation) {
              // Function call
              a[i] = a[i].replace(__reFn, '');
              data = data[a[i]]();
              continue;
            }

            if (data === null || data[a[i]] === undefined) {
              return undefined;
            }

            data = data[a[i]];
          }
        }

        return data;
      };

      return function (data, type) {
        // row and meta also passed, but not used
        return fetchData(data, type, mSource);
      };
    } else {
      /* Array or flat object mapping */
      return function (data, type) {
        // row and meta also passed, but not used
        return data[mSource];
      };
    }
  }
  /**
   * Return a function that can be used to set data from a source object, taking
   * into account the ability to use nested objects as a source
   *  @param {string|int|function} mSource The data source for the object
   *  @returns {function} Data set function
   *  @memberof DataTable#oApi
   */


  function _fnSetObjectDataFn(mSource) {
    if ($.isPlainObject(mSource)) {
      /* Unlike get, only the underscore (global) option is used for for
       * setting data since we don't know the type here. This is why an object
       * option is not documented for `mData` (which is read/write), but it is
       * for `mRender` which is read only.
       */
      return _fnSetObjectDataFn(mSource._);
    } else if (mSource === null) {
      /* Nothing to do when the data source is null */
      return function () {};
    } else if (typeof mSource === 'function') {
      return function (data, val, meta) {
        mSource(data, 'set', val, meta);
      };
    } else if (typeof mSource === 'string' && (mSource.indexOf('.') !== -1 || mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1)) {
      /* Like the get, we need to get data from a nested object */
      var setData = function setData(data, val, src) {
        var a = _fnSplitObjNotation(src),
            b;

        var aLast = a[a.length - 1];
        var arrayNotation, funcNotation, o, innerSrc;

        for (var i = 0, iLen = a.length - 1; i < iLen; i++) {
          // Check if we are dealing with an array notation request
          arrayNotation = a[i].match(__reArray);
          funcNotation = a[i].match(__reFn);

          if (arrayNotation) {
            a[i] = a[i].replace(__reArray, '');
            data[a[i]] = []; // Get the remainder of the nested object to set so we can recurse

            b = a.slice();
            b.splice(0, i + 1);
            innerSrc = b.join('.'); // Traverse each entry in the array setting the properties requested

            if ($.isArray(val)) {
              for (var j = 0, jLen = val.length; j < jLen; j++) {
                o = {};
                setData(o, val[j], innerSrc);
                data[a[i]].push(o);
              }
            } else {
              // We've been asked to save data to an array, but it
              // isn't array data to be saved. Best that can be done
              // is to just save the value.
              data[a[i]] = val;
            } // The inner call to setData has already traversed through the remainder
            // of the source and has set the data, thus we can exit here


            return;
          } else if (funcNotation) {
            // Function call
            a[i] = a[i].replace(__reFn, '');
            data = data[a[i]](val);
          } // If the nested object doesn't currently exist - since we are
          // trying to set the value - create it


          if (data[a[i]] === null || data[a[i]] === undefined) {
            data[a[i]] = {};
          }

          data = data[a[i]];
        } // Last item in the input - i.e, the actual set


        if (aLast.match(__reFn)) {
          // Function call
          data = data[aLast.replace(__reFn, '')](val);
        } else {
          // If array notation is used, we just want to strip it and use the property name
          // and assign the value. If it isn't used, then we get the result we want anyway
          data[aLast.replace(__reArray, '')] = val;
        }
      };

      return function (data, val) {
        // meta is also passed in, but not used
        return setData(data, val, mSource);
      };
    } else {
      /* Array or flat object mapping */
      return function (data, val) {
        // meta is also passed in, but not used
        data[mSource] = val;
      };
    }
  }
  /**
   * Return an array with the full table data
   *  @param {object} oSettings dataTables settings object
   *  @returns array {array} aData Master data array
   *  @memberof DataTable#oApi
   */


  function _fnGetDataMaster(settings) {
    return _pluck(settings.aoData, '_aData');
  }
  /**
   * Nuke the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnClearTable(settings) {
    settings.aoData.length = 0;
    settings.aiDisplayMaster.length = 0;
    settings.aiDisplay.length = 0;
    settings.aIds = {};
  }
  /**
  * Take an array of integers (index array) and remove a target integer (value - not
  * the key!)
  *  @param {array} a Index array to target
  *  @param {int} iTarget value to find
  *  @memberof DataTable#oApi
  */


  function _fnDeleteIndex(a, iTarget, splice) {
    var iTargetIndex = -1;

    for (var i = 0, iLen = a.length; i < iLen; i++) {
      if (a[i] == iTarget) {
        iTargetIndex = i;
      } else if (a[i] > iTarget) {
        a[i]--;
      }
    }

    if (iTargetIndex != -1 && splice === undefined) {
      a.splice(iTargetIndex, 1);
    }
  }
  /**
   * Mark cached data as invalid such that a re-read of the data will occur when
   * the cached data is next requested. Also update from the data source object.
   *
   * @param {object} settings DataTables settings object
   * @param {int}    rowIdx   Row index to invalidate
   * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
   *     or 'data'
   * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
   *     row will be invalidated
   * @memberof DataTable#oApi
   *
   * @todo For the modularisation of v1.11 this will need to become a callback, so
   *   the sort and filter methods can subscribe to it. That will required
   *   initialisation options for sorting, which is why it is not already baked in
   */


  function _fnInvalidate(settings, rowIdx, src, colIdx) {
    var row = settings.aoData[rowIdx];
    var i, ien;

    var cellWrite = function cellWrite(cell, col) {
      // This is very frustrating, but in IE if you just write directly
      // to innerHTML, and elements that are overwritten are GC'ed,
      // even if there is a reference to them elsewhere
      while (cell.childNodes.length) {
        cell.removeChild(cell.firstChild);
      }

      cell.innerHTML = _fnGetCellData(settings, rowIdx, col, 'display');
    }; // Are we reading last data from DOM or the data object?


    if (src === 'dom' || (!src || src === 'auto') && row.src === 'dom') {
      // Read the data from the DOM
      row._aData = _fnGetRowElements(settings, row, colIdx, colIdx === undefined ? undefined : row._aData).data;
    } else {
      // Reading from data object, update the DOM
      var cells = row.anCells;

      if (cells) {
        if (colIdx !== undefined) {
          cellWrite(cells[colIdx], colIdx);
        } else {
          for (i = 0, ien = cells.length; i < ien; i++) {
            cellWrite(cells[i], i);
          }
        }
      }
    } // For both row and cell invalidation, the cached data for sorting and
    // filtering is nulled out


    row._aSortData = null;
    row._aFilterData = null; // Invalidate the type for a specific column (if given) or all columns since
    // the data might have changed

    var cols = settings.aoColumns;

    if (colIdx !== undefined) {
      cols[colIdx].sType = null;
    } else {
      for (i = 0, ien = cols.length; i < ien; i++) {
        cols[i].sType = null;
      } // Update DataTables special `DT_*` attributes for the row


      _fnRowAttributes(settings, row);
    }
  }
  /**
   * Build a data source object from an HTML row, reading the contents of the
   * cells that are in the row.
   *
   * @param {object} settings DataTables settings object
   * @param {node|object} TR element from which to read data or existing row
   *   object from which to re-read the data from the cells
   * @param {int} [colIdx] Optional column index
   * @param {array|object} [d] Data source object. If `colIdx` is given then this
   *   parameter should also be given and will be used to write the data into.
   *   Only the column in question will be written
   * @returns {object} Object with two parameters: `data` the data read, in
   *   document order, and `cells` and array of nodes (they can be useful to the
   *   caller, so rather than needing a second traversal to get them, just return
   *   them from here).
   * @memberof DataTable#oApi
   */


  function _fnGetRowElements(settings, row, colIdx, d) {
    var tds = [],
        td = row.firstChild,
        name,
        col,
        o,
        i = 0,
        contents,
        columns = settings.aoColumns,
        objectRead = settings._rowReadObject; // Allow the data object to be passed in, or construct

    d = d !== undefined ? d : objectRead ? {} : [];

    var attr = function attr(str, td) {
      if (typeof str === 'string') {
        var idx = str.indexOf('@');

        if (idx !== -1) {
          var attr = str.substring(idx + 1);

          var setter = _fnSetObjectDataFn(str);

          setter(d, td.getAttribute(attr));
        }
      }
    }; // Read data from a cell and store into the data object


    var cellProcess = function cellProcess(cell) {
      if (colIdx === undefined || colIdx === i) {
        col = columns[i];
        contents = $.trim(cell.innerHTML);

        if (col && col._bAttrSrc) {
          var setter = _fnSetObjectDataFn(col.mData._);

          setter(d, contents);
          attr(col.mData.sort, cell);
          attr(col.mData.type, cell);
          attr(col.mData.filter, cell);
        } else {
          // Depending on the `data` option for the columns the data can
          // be read to either an object or an array.
          if (objectRead) {
            if (!col._setter) {
              // Cache the setter function
              col._setter = _fnSetObjectDataFn(col.mData);
            }

            col._setter(d, contents);
          } else {
            d[i] = contents;
          }
        }
      }

      i++;
    };

    if (td) {
      // `tr` element was passed in
      while (td) {
        name = td.nodeName.toUpperCase();

        if (name == "TD" || name == "TH") {
          cellProcess(td);
          tds.push(td);
        }

        td = td.nextSibling;
      }
    } else {
      // Existing row object passed in
      tds = row.anCells;

      for (var j = 0, jen = tds.length; j < jen; j++) {
        cellProcess(tds[j]);
      }
    } // Read the ID from the DOM if present


    var rowNode = row.firstChild ? row : row.nTr;

    if (rowNode) {
      var id = rowNode.getAttribute('id');

      if (id) {
        _fnSetObjectDataFn(settings.rowId)(d, id);
      }
    }

    return {
      data: d,
      cells: tds
    };
  }
  /**
   * Create a new TR element (and it's TD children) for a row
   *  @param {object} oSettings dataTables settings object
   *  @param {int} iRow Row to consider
   *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
   *    DataTables will create a row automatically
   *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
   *    if nTr is.
   *  @memberof DataTable#oApi
   */


  function _fnCreateTr(oSettings, iRow, nTrIn, anTds) {
    var row = oSettings.aoData[iRow],
        rowData = row._aData,
        cells = [],
        nTr,
        nTd,
        oCol,
        i,
        iLen;

    if (row.nTr === null) {
      nTr = nTrIn || document.createElement('tr');
      row.nTr = nTr;
      row.anCells = cells;
      /* Use a private property on the node to allow reserve mapping from the node
       * to the aoData array for fast look up
       */

      nTr._DT_RowIndex = iRow;
      /* Special parameters can be given by the data source to be used on the row */

      _fnRowAttributes(oSettings, row);
      /* Process each column */


      for (i = 0, iLen = oSettings.aoColumns.length; i < iLen; i++) {
        oCol = oSettings.aoColumns[i];
        nTd = nTrIn ? anTds[i] : document.createElement(oCol.sCellType);
        nTd._DT_CellIndex = {
          row: iRow,
          column: i
        };
        cells.push(nTd); // Need to create the HTML if new, or if a rendering function is defined

        if ((!nTrIn || oCol.mRender || oCol.mData !== i) && (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i + '.display')) {
          nTd.innerHTML = _fnGetCellData(oSettings, iRow, i, 'display');
        }
        /* Add user defined class */


        if (oCol.sClass) {
          nTd.className += ' ' + oCol.sClass;
        } // Visibility - add or remove as required


        if (oCol.bVisible && !nTrIn) {
          nTr.appendChild(nTd);
        } else if (!oCol.bVisible && nTrIn) {
          nTd.parentNode.removeChild(nTd);
        }

        if (oCol.fnCreatedCell) {
          oCol.fnCreatedCell.call(oSettings.oInstance, nTd, _fnGetCellData(oSettings, iRow, i), rowData, iRow, i);
        }
      }

      _fnCallbackFire(oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow]);
    } // Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
    // and deployed


    row.nTr.setAttribute('role', 'row');
  }
  /**
   * Add attributes to a row based on the special `DT_*` parameters in a data
   * source object.
   *  @param {object} settings DataTables settings object
   *  @param {object} DataTables row object for the row to be modified
   *  @memberof DataTable#oApi
   */


  function _fnRowAttributes(settings, row) {
    var tr = row.nTr;
    var data = row._aData;

    if (tr) {
      var id = settings.rowIdFn(data);

      if (id) {
        tr.id = id;
      }

      if (data.DT_RowClass) {
        // Remove any classes added by DT_RowClass before
        var a = data.DT_RowClass.split(' ');
        row.__rowc = row.__rowc ? _unique(row.__rowc.concat(a)) : a;
        $(tr).removeClass(row.__rowc.join(' ')).addClass(data.DT_RowClass);
      }

      if (data.DT_RowAttr) {
        $(tr).attr(data.DT_RowAttr);
      }

      if (data.DT_RowData) {
        $(tr).data(data.DT_RowData);
      }
    }
  }
  /**
   * Create the HTML header for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnBuildHead(oSettings) {
    var i, ien, cell, row, column;
    var thead = oSettings.nTHead;
    var tfoot = oSettings.nTFoot;
    var createHeader = $('th, td', thead).length === 0;
    var classes = oSettings.oClasses;
    var columns = oSettings.aoColumns;

    if (createHeader) {
      row = $('<tr/>').appendTo(thead);
    }

    for (i = 0, ien = columns.length; i < ien; i++) {
      column = columns[i];
      cell = $(column.nTh).addClass(column.sClass);

      if (createHeader) {
        cell.appendTo(row);
      } // 1.11 move into sorting


      if (oSettings.oFeatures.bSort) {
        cell.addClass(column.sSortingClass);

        if (column.bSortable !== false) {
          cell.attr('tabindex', oSettings.iTabIndex).attr('aria-controls', oSettings.sTableId);

          _fnSortAttachListener(oSettings, column.nTh, i);
        }
      }

      if (column.sTitle != cell[0].innerHTML) {
        cell.html(column.sTitle);
      }

      _fnRenderer(oSettings, 'header')(oSettings, cell, column, classes);
    }

    if (createHeader) {
      _fnDetectHeader(oSettings.aoHeader, thead);
    }
    /* ARIA role for the rows */


    $(thead).find('>tr').attr('role', 'row');
    /* Deal with the footer - add classes if required */

    $(thead).find('>tr>th, >tr>td').addClass(classes.sHeaderTH);
    $(tfoot).find('>tr>th, >tr>td').addClass(classes.sFooterTH); // Cache the footer cells. Note that we only take the cells from the first
    // row in the footer. If there is more than one row the user wants to
    // interact with, they need to use the table().foot() method. Note also this
    // allows cells to be used for multiple columns using colspan

    if (tfoot !== null) {
      var cells = oSettings.aoFooter[0];

      for (i = 0, ien = cells.length; i < ien; i++) {
        column = columns[i];
        column.nTf = cells[i].cell;

        if (column.sClass) {
          $(column.nTf).addClass(column.sClass);
        }
      }
    }
  }
  /**
   * Draw the header (or footer) element based on the column visibility states. The
   * methodology here is to use the layout array from _fnDetectHeader, modified for
   * the instantaneous column visibility, to construct the new layout. The grid is
   * traversed over cell at a time in a rows x columns grid fashion, although each
   * cell insert can cover multiple elements in the grid - which is tracks using the
   * aApplied array. Cell inserts in the grid will only occur where there isn't
   * already a cell in that position.
   *  @param {object} oSettings dataTables settings object
   *  @param array {objects} aoSource Layout array from _fnDetectHeader
   *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
   *  @memberof DataTable#oApi
   */


  function _fnDrawHead(oSettings, aoSource, bIncludeHidden) {
    var i, iLen, j, jLen, k, kLen, n, nLocalTr;
    var aoLocal = [];
    var aApplied = [];
    var iColumns = oSettings.aoColumns.length;
    var iRowspan, iColspan;

    if (!aoSource) {
      return;
    }

    if (bIncludeHidden === undefined) {
      bIncludeHidden = false;
    }
    /* Make a copy of the master layout array, but without the visible columns in it */


    for (i = 0, iLen = aoSource.length; i < iLen; i++) {
      aoLocal[i] = aoSource[i].slice();
      aoLocal[i].nTr = aoSource[i].nTr;
      /* Remove any columns which are currently hidden */

      for (j = iColumns - 1; j >= 0; j--) {
        if (!oSettings.aoColumns[j].bVisible && !bIncludeHidden) {
          aoLocal[i].splice(j, 1);
        }
      }
      /* Prep the applied array - it needs an element for each row */


      aApplied.push([]);
    }

    for (i = 0, iLen = aoLocal.length; i < iLen; i++) {
      nLocalTr = aoLocal[i].nTr;
      /* All cells are going to be replaced, so empty out the row */

      if (nLocalTr) {
        while (n = nLocalTr.firstChild) {
          nLocalTr.removeChild(n);
        }
      }

      for (j = 0, jLen = aoLocal[i].length; j < jLen; j++) {
        iRowspan = 1;
        iColspan = 1;
        /* Check to see if there is already a cell (row/colspan) covering our target
         * insert point. If there is, then there is nothing to do.
         */

        if (aApplied[i][j] === undefined) {
          nLocalTr.appendChild(aoLocal[i][j].cell);
          aApplied[i][j] = 1;
          /* Expand the cell to cover as many rows as needed */

          while (aoLocal[i + iRowspan] !== undefined && aoLocal[i][j].cell == aoLocal[i + iRowspan][j].cell) {
            aApplied[i + iRowspan][j] = 1;
            iRowspan++;
          }
          /* Expand the cell to cover as many columns as needed */


          while (aoLocal[i][j + iColspan] !== undefined && aoLocal[i][j].cell == aoLocal[i][j + iColspan].cell) {
            /* Must update the applied array over the rows for the columns */
            for (k = 0; k < iRowspan; k++) {
              aApplied[i + k][j + iColspan] = 1;
            }

            iColspan++;
          }
          /* Do the actual expansion in the DOM */


          $(aoLocal[i][j].cell).attr('rowspan', iRowspan).attr('colspan', iColspan);
        }
      }
    }
  }
  /**
   * Insert the required TR nodes into the table for display
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnDraw(oSettings) {
    /* Provide a pre-callback function which can be used to cancel the draw is false is returned */
    var aPreDraw = _fnCallbackFire(oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings]);

    if ($.inArray(false, aPreDraw) !== -1) {
      _fnProcessingDisplay(oSettings, false);

      return;
    }

    var i, iLen, n;
    var anRows = [];
    var iRowCount = 0;
    var asStripeClasses = oSettings.asStripeClasses;
    var iStripes = asStripeClasses.length;
    var iOpenRows = oSettings.aoOpenRows.length;
    var oLang = oSettings.oLanguage;
    var iInitDisplayStart = oSettings.iInitDisplayStart;
    var bServerSide = _fnDataSource(oSettings) == 'ssp';
    var aiDisplay = oSettings.aiDisplay;
    oSettings.bDrawing = true;
    /* Check and see if we have an initial draw position from state saving */

    if (iInitDisplayStart !== undefined && iInitDisplayStart !== -1) {
      oSettings._iDisplayStart = bServerSide ? iInitDisplayStart : iInitDisplayStart >= oSettings.fnRecordsDisplay() ? 0 : iInitDisplayStart;
      oSettings.iInitDisplayStart = -1;
    }

    var iDisplayStart = oSettings._iDisplayStart;
    var iDisplayEnd = oSettings.fnDisplayEnd();
    /* Server-side processing draw intercept */

    if (oSettings.bDeferLoading) {
      oSettings.bDeferLoading = false;
      oSettings.iDraw++;

      _fnProcessingDisplay(oSettings, false);
    } else if (!bServerSide) {
      oSettings.iDraw++;
    } else if (!oSettings.bDestroying && !_fnAjaxUpdate(oSettings)) {
      return;
    }

    if (aiDisplay.length !== 0) {
      var iStart = bServerSide ? 0 : iDisplayStart;
      var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;

      for (var j = iStart; j < iEnd; j++) {
        var iDataIndex = aiDisplay[j];
        var aoData = oSettings.aoData[iDataIndex];

        if (aoData.nTr === null) {
          _fnCreateTr(oSettings, iDataIndex);
        }

        var nRow = aoData.nTr;
        /* Remove the old striping classes and then add the new one */

        if (iStripes !== 0) {
          var sStripe = asStripeClasses[iRowCount % iStripes];

          if (aoData._sRowStripe != sStripe) {
            $(nRow).removeClass(aoData._sRowStripe).addClass(sStripe);
            aoData._sRowStripe = sStripe;
          }
        } // Row callback functions - might want to manipulate the row
        // iRowCount and j are not currently documented. Are they at all
        // useful?


        _fnCallbackFire(oSettings, 'aoRowCallback', null, [nRow, aoData._aData, iRowCount, j]);

        anRows.push(nRow);
        iRowCount++;
      }
    } else {
      /* Table is empty - create a row with an empty message in it */
      var sZero = oLang.sZeroRecords;

      if (oSettings.iDraw == 1 && _fnDataSource(oSettings) == 'ajax') {
        sZero = oLang.sLoadingRecords;
      } else if (oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0) {
        sZero = oLang.sEmptyTable;
      }

      anRows[0] = $('<tr/>', {
        'class': iStripes ? asStripeClasses[0] : ''
      }).append($('<td />', {
        'valign': 'top',
        'colSpan': _fnVisbleColumns(oSettings),
        'class': oSettings.oClasses.sRowEmpty
      }).html(sZero))[0];
    }
    /* Header and footer callbacks */


    _fnCallbackFire(oSettings, 'aoHeaderCallback', 'header', [$(oSettings.nTHead).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

    _fnCallbackFire(oSettings, 'aoFooterCallback', 'footer', [$(oSettings.nTFoot).children('tr')[0], _fnGetDataMaster(oSettings), iDisplayStart, iDisplayEnd, aiDisplay]);

    var body = $(oSettings.nTBody);
    body.children().detach();
    body.append($(anRows));
    /* Call all required callback functions for the end of a draw */

    _fnCallbackFire(oSettings, 'aoDrawCallback', 'draw', [oSettings]);
    /* Draw is complete, sorting and filtering must be as well */


    oSettings.bSorted = false;
    oSettings.bFiltered = false;
    oSettings.bDrawing = false;
  }
  /**
   * Redraw the table - taking account of the various features which are enabled
   *  @param {object} oSettings dataTables settings object
   *  @param {boolean} [holdPosition] Keep the current paging position. By default
   *    the paging is reset to the first page
   *  @memberof DataTable#oApi
   */


  function _fnReDraw(settings, holdPosition) {
    var features = settings.oFeatures,
        sort = features.bSort,
        filter = features.bFilter;

    if (sort) {
      _fnSort(settings);
    }

    if (filter) {
      _fnFilterComplete(settings, settings.oPreviousSearch);
    } else {
      // No filtering, so we want to just use the display master
      settings.aiDisplay = settings.aiDisplayMaster.slice();
    }

    if (holdPosition !== true) {
      settings._iDisplayStart = 0;
    } // Let any modules know about the draw hold position state (used by
    // scrolling internally)


    settings._drawHold = holdPosition;

    _fnDraw(settings);

    settings._drawHold = false;
  }
  /**
   * Add the options to the page HTML for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnAddOptionsHtml(oSettings) {
    var classes = oSettings.oClasses;
    var table = $(oSettings.nTable);
    var holding = $('<div/>').insertBefore(table); // Holding element for speed

    var features = oSettings.oFeatures; // All DataTables are wrapped in a div

    var insert = $('<div/>', {
      id: oSettings.sTableId + '_wrapper',
      'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' ' + classes.sNoFooter)
    });
    oSettings.nHolding = holding[0];
    oSettings.nTableWrapper = insert[0];
    oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
    /* Loop over the user set positioning and place the elements as needed */

    var aDom = oSettings.sDom.split('');
    var featureNode, cOption, nNewNode, cNext, sAttr, j;

    for (var i = 0; i < aDom.length; i++) {
      featureNode = null;
      cOption = aDom[i];

      if (cOption == '<') {
        /* New container div */
        nNewNode = $('<div/>')[0];
        /* Check to see if we should append an id and/or a class name to the container */

        cNext = aDom[i + 1];

        if (cNext == "'" || cNext == '"') {
          sAttr = "";
          j = 2;

          while (aDom[i + j] != cNext) {
            sAttr += aDom[i + j];
            j++;
          }
          /* Replace jQuery UI constants @todo depreciated */


          if (sAttr == "H") {
            sAttr = classes.sJUIHeader;
          } else if (sAttr == "F") {
            sAttr = classes.sJUIFooter;
          }
          /* The attribute can be in the format of "#id.class", "#id" or "class" This logic
           * breaks the string into parts and applies them as needed
           */


          if (sAttr.indexOf('.') != -1) {
            var aSplit = sAttr.split('.');
            nNewNode.id = aSplit[0].substr(1, aSplit[0].length - 1);
            nNewNode.className = aSplit[1];
          } else if (sAttr.charAt(0) == "#") {
            nNewNode.id = sAttr.substr(1, sAttr.length - 1);
          } else {
            nNewNode.className = sAttr;
          }

          i += j;
          /* Move along the position array */
        }

        insert.append(nNewNode);
        insert = $(nNewNode);
      } else if (cOption == '>') {
        /* End container div */
        insert = insert.parent();
      } // @todo Move options into their own plugins?
      else if (cOption == 'l' && features.bPaginate && features.bLengthChange) {
          /* Length */
          featureNode = _fnFeatureHtmlLength(oSettings);
        } else if (cOption == 'f' && features.bFilter) {
          /* Filter */
          featureNode = _fnFeatureHtmlFilter(oSettings);
        } else if (cOption == 'r' && features.bProcessing) {
          /* pRocessing */
          featureNode = _fnFeatureHtmlProcessing(oSettings);
        } else if (cOption == 't') {
          /* Table */
          featureNode = _fnFeatureHtmlTable(oSettings);
        } else if (cOption == 'i' && features.bInfo) {
          /* Info */
          featureNode = _fnFeatureHtmlInfo(oSettings);
        } else if (cOption == 'p' && features.bPaginate) {
          /* Pagination */
          featureNode = _fnFeatureHtmlPaginate(oSettings);
        } else if (DataTable.ext.feature.length !== 0) {
          /* Plug-in features */
          var aoFeatures = DataTable.ext.feature;

          for (var k = 0, kLen = aoFeatures.length; k < kLen; k++) {
            if (cOption == aoFeatures[k].cFeature) {
              featureNode = aoFeatures[k].fnInit(oSettings);
              break;
            }
          }
        }
      /* Add to the 2D features array */


      if (featureNode) {
        var aanFeatures = oSettings.aanFeatures;

        if (!aanFeatures[cOption]) {
          aanFeatures[cOption] = [];
        }

        aanFeatures[cOption].push(featureNode);
        insert.append(featureNode);
      }
    }
    /* Built our DOM structure - replace the holding div with what we want */


    holding.replaceWith(insert);
    oSettings.nHolding = null;
  }
  /**
   * Use the DOM source to create up an array of header cells. The idea here is to
   * create a layout grid (array) of rows x columns, which contains a reference
   * to the cell that that point in the grid (regardless of col/rowspan), such that
   * any column / row could be removed and the new grid constructed
   *  @param array {object} aLayout Array to store the calculated layout in
   *  @param {node} nThead The header/footer element for the table
   *  @memberof DataTable#oApi
   */


  function _fnDetectHeader(aLayout, nThead) {
    var nTrs = $(nThead).children('tr');
    var nTr, nCell;
    var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
    var bUnique;

    var fnShiftCol = function fnShiftCol(a, i, j) {
      var k = a[i];

      while (k[j]) {
        j++;
      }

      return j;
    };

    aLayout.splice(0, aLayout.length);
    /* We know how many rows there are in the layout - so prep it */

    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      aLayout.push([]);
    }
    /* Calculate a layout array */


    for (i = 0, iLen = nTrs.length; i < iLen; i++) {
      nTr = nTrs[i];
      iColumn = 0;
      /* For every cell in the row... */

      nCell = nTr.firstChild;

      while (nCell) {
        if (nCell.nodeName.toUpperCase() == "TD" || nCell.nodeName.toUpperCase() == "TH") {
          /* Get the col and rowspan attributes from the DOM and sanitise them */
          iColspan = nCell.getAttribute('colspan') * 1;
          iRowspan = nCell.getAttribute('rowspan') * 1;
          iColspan = !iColspan || iColspan === 0 || iColspan === 1 ? 1 : iColspan;
          iRowspan = !iRowspan || iRowspan === 0 || iRowspan === 1 ? 1 : iRowspan;
          /* There might be colspan cells already in this row, so shift our target
           * accordingly
           */

          iColShifted = fnShiftCol(aLayout, i, iColumn);
          /* Cache calculation for unique columns */

          bUnique = iColspan === 1 ? true : false;
          /* If there is col / rowspan, copy the information into the layout grid */

          for (l = 0; l < iColspan; l++) {
            for (k = 0; k < iRowspan; k++) {
              aLayout[i + k][iColShifted + l] = {
                "cell": nCell,
                "unique": bUnique
              };
              aLayout[i + k].nTr = nTr;
            }
          }
        }

        nCell = nCell.nextSibling;
      }
    }
  }
  /**
   * Get an array of unique th elements, one for each column
   *  @param {object} oSettings dataTables settings object
   *  @param {node} nHeader automatically detect the layout from this node - optional
   *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
   *  @returns array {node} aReturn list of unique th's
   *  @memberof DataTable#oApi
   */


  function _fnGetUniqueThs(oSettings, nHeader, aLayout) {
    var aReturn = [];

    if (!aLayout) {
      aLayout = oSettings.aoHeader;

      if (nHeader) {
        aLayout = [];

        _fnDetectHeader(aLayout, nHeader);
      }
    }

    for (var i = 0, iLen = aLayout.length; i < iLen; i++) {
      for (var j = 0, jLen = aLayout[i].length; j < jLen; j++) {
        if (aLayout[i][j].unique && (!aReturn[j] || !oSettings.bSortCellsTop)) {
          aReturn[j] = aLayout[i][j].cell;
        }
      }
    }

    return aReturn;
  }
  /**
   * Create an Ajax call based on the table's settings, taking into account that
   * parameters can have multiple forms, and backwards compatibility.
   *
   * @param {object} oSettings dataTables settings object
   * @param {array} data Data to send to the server, required by
   *     DataTables - may be augmented by developer callbacks
   * @param {function} fn Callback function to run when data is obtained
   */


  function _fnBuildAjax(oSettings, data, fn) {
    // Compatibility with 1.9-, allow fnServerData and event to manipulate
    _fnCallbackFire(oSettings, 'aoServerParams', 'serverParams', [data]); // Convert to object based for 1.10+ if using the old array scheme which can
    // come from server-side processing or serverParams


    if (data && $.isArray(data)) {
      var tmp = {};
      var rbracket = /(.*?)\[\]$/;
      $.each(data, function (key, val) {
        var match = val.name.match(rbracket);

        if (match) {
          // Support for arrays
          var name = match[0];

          if (!tmp[name]) {
            tmp[name] = [];
          }

          tmp[name].push(val.value);
        } else {
          tmp[val.name] = val.value;
        }
      });
      data = tmp;
    }

    var ajaxData;
    var ajax = oSettings.ajax;
    var instance = oSettings.oInstance;

    var callback = function callback(json) {
      _fnCallbackFire(oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR]);

      fn(json);
    };

    if ($.isPlainObject(ajax) && ajax.data) {
      ajaxData = ajax.data;
      var newData = $.isFunction(ajaxData) ? ajaxData(data, oSettings) : // fn can manipulate data or return
      ajaxData; // an object object or array to merge
      // If the function returned something, use that alone

      data = $.isFunction(ajaxData) && newData ? newData : $.extend(true, data, newData); // Remove the data property as we've resolved it already and don't want
      // jQuery to do it again (it is restored at the end of the function)

      delete ajax.data;
    }

    var baseAjax = {
      "data": data,
      "success": function success(json) {
        var error = json.error || json.sError;

        if (error) {
          _fnLog(oSettings, 0, error);
        }

        oSettings.json = json;
        callback(json);
      },
      "dataType": "json",
      "cache": false,
      "type": oSettings.sServerMethod,
      "error": function error(xhr, _error, thrown) {
        var ret = _fnCallbackFire(oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR]);

        if ($.inArray(true, ret) === -1) {
          if (_error == "parsererror") {
            _fnLog(oSettings, 0, 'Invalid JSON response', 1);
          } else if (xhr.readyState === 4) {
            _fnLog(oSettings, 0, 'Ajax error', 7);
          }
        }

        _fnProcessingDisplay(oSettings, false);
      }
    }; // Store the data submitted for the API

    oSettings.oAjaxData = data; // Allow plug-ins and external processes to modify the data

    _fnCallbackFire(oSettings, null, 'preXhr', [oSettings, data]);

    if (oSettings.fnServerData) {
      // DataTables 1.9- compatibility
      oSettings.fnServerData.call(instance, oSettings.sAjaxSource, $.map(data, function (val, key) {
        // Need to convert back to 1.9 trad format
        return {
          name: key,
          value: val
        };
      }), callback, oSettings);
    } else if (oSettings.sAjaxSource || typeof ajax === 'string') {
      // DataTables 1.9- compatibility
      oSettings.jqXHR = $.ajax($.extend(baseAjax, {
        url: ajax || oSettings.sAjaxSource
      }));
    } else if ($.isFunction(ajax)) {
      // Is a function - let the caller define what needs to be done
      oSettings.jqXHR = ajax.call(instance, data, callback, oSettings);
    } else {
      // Object to extend the base settings
      oSettings.jqXHR = $.ajax($.extend(baseAjax, ajax)); // Restore for next time around

      ajax.data = ajaxData;
    }
  }
  /**
   * Update the table using an Ajax call
   *  @param {object} settings dataTables settings object
   *  @returns {boolean} Block the table drawing or not
   *  @memberof DataTable#oApi
   */


  function _fnAjaxUpdate(settings) {
    if (settings.bAjaxDataGet) {
      settings.iDraw++;

      _fnProcessingDisplay(settings, true);

      _fnBuildAjax(settings, _fnAjaxParameters(settings), function (json) {
        _fnAjaxUpdateDraw(settings, json);
      });

      return false;
    }

    return true;
  }
  /**
   * Build up the parameters in an object needed for a server-side processing
   * request. Note that this is basically done twice, is different ways - a modern
   * method which is used by default in DataTables 1.10 which uses objects and
   * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
   * the sAjaxSource option is used in the initialisation, or the legacyAjax
   * option is set.
   *  @param {object} oSettings dataTables settings object
   *  @returns {bool} block the table drawing or not
   *  @memberof DataTable#oApi
   */


  function _fnAjaxParameters(settings) {
    var columns = settings.aoColumns,
        columnCount = columns.length,
        features = settings.oFeatures,
        preSearch = settings.oPreviousSearch,
        preColSearch = settings.aoPreSearchCols,
        i,
        data = [],
        dataProp,
        column,
        columnSearch,
        sort = _fnSortFlatten(settings),
        displayStart = settings._iDisplayStart,
        displayLength = features.bPaginate !== false ? settings._iDisplayLength : -1;

    var param = function param(name, value) {
      data.push({
        'name': name,
        'value': value
      });
    }; // DataTables 1.9- compatible method


    param('sEcho', settings.iDraw);
    param('iColumns', columnCount);
    param('sColumns', _pluck(columns, 'sName').join(','));
    param('iDisplayStart', displayStart);
    param('iDisplayLength', displayLength); // DataTables 1.10+ method

    var d = {
      draw: settings.iDraw,
      columns: [],
      order: [],
      start: displayStart,
      length: displayLength,
      search: {
        value: preSearch.sSearch,
        regex: preSearch.bRegex
      }
    };

    for (i = 0; i < columnCount; i++) {
      column = columns[i];
      columnSearch = preColSearch[i];
      dataProp = typeof column.mData == "function" ? 'function' : column.mData;
      d.columns.push({
        data: dataProp,
        name: column.sName,
        searchable: column.bSearchable,
        orderable: column.bSortable,
        search: {
          value: columnSearch.sSearch,
          regex: columnSearch.bRegex
        }
      });
      param("mDataProp_" + i, dataProp);

      if (features.bFilter) {
        param('sSearch_' + i, columnSearch.sSearch);
        param('bRegex_' + i, columnSearch.bRegex);
        param('bSearchable_' + i, column.bSearchable);
      }

      if (features.bSort) {
        param('bSortable_' + i, column.bSortable);
      }
    }

    if (features.bFilter) {
      param('sSearch', preSearch.sSearch);
      param('bRegex', preSearch.bRegex);
    }

    if (features.bSort) {
      $.each(sort, function (i, val) {
        d.order.push({
          column: val.col,
          dir: val.dir
        });
        param('iSortCol_' + i, val.col);
        param('sSortDir_' + i, val.dir);
      });
      param('iSortingCols', sort.length);
    } // If the legacy.ajax parameter is null, then we automatically decide which
    // form to use, based on sAjaxSource


    var legacy = DataTable.ext.legacy.ajax;

    if (legacy === null) {
      return settings.sAjaxSource ? data : d;
    } // Otherwise, if legacy has been specified then we use that to decide on the
    // form


    return legacy ? data : d;
  }
  /**
   * Data the data from the server (nuking the old) and redraw the table
   *  @param {object} oSettings dataTables settings object
   *  @param {object} json json data return from the server.
   *  @param {string} json.sEcho Tracking flag for DataTables to match requests
   *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
   *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
   *  @param {array} json.aaData The data to display on this page
   *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
   *  @memberof DataTable#oApi
   */


  function _fnAjaxUpdateDraw(settings, json) {
    // v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
    // Support both
    var compat = function compat(old, modern) {
      return json[old] !== undefined ? json[old] : json[modern];
    };

    var data = _fnAjaxDataSrc(settings, json);

    var draw = compat('sEcho', 'draw');
    var recordsTotal = compat('iTotalRecords', 'recordsTotal');
    var recordsFiltered = compat('iTotalDisplayRecords', 'recordsFiltered');

    if (draw) {
      // Protect against out of sequence returns
      if (draw * 1 < settings.iDraw) {
        return;
      }

      settings.iDraw = draw * 1;
    }

    _fnClearTable(settings);

    settings._iRecordsTotal = parseInt(recordsTotal, 10);
    settings._iRecordsDisplay = parseInt(recordsFiltered, 10);

    for (var i = 0, ien = data.length; i < ien; i++) {
      _fnAddData(settings, data[i]);
    }

    settings.aiDisplay = settings.aiDisplayMaster.slice();
    settings.bAjaxDataGet = false;

    _fnDraw(settings);

    if (!settings._bInitComplete) {
      _fnInitComplete(settings, json);
    }

    settings.bAjaxDataGet = true;

    _fnProcessingDisplay(settings, false);
  }
  /**
   * Get the data from the JSON data source to use for drawing a table. Using
   * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
   * source object, or from a processing function.
   *  @param {object} oSettings dataTables settings object
   *  @param  {object} json Data source object / array from the server
   *  @return {array} Array of data to use
   */


  function _fnAjaxDataSrc(oSettings, json) {
    var dataSrc = $.isPlainObject(oSettings.ajax) && oSettings.ajax.dataSrc !== undefined ? oSettings.ajax.dataSrc : oSettings.sAjaxDataProp; // Compatibility with 1.9-.
    // Compatibility with 1.9-. In order to read from aaData, check if the
    // default has been changed, if not, check for aaData

    if (dataSrc === 'data') {
      return json.aaData || json[dataSrc];
    }

    return dataSrc !== "" ? _fnGetObjectDataFn(dataSrc)(json) : json;
  }
  /**
   * Generate the node required for filtering text
   *  @returns {node} Filter control element
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnFeatureHtmlFilter(settings) {
    var classes = settings.oClasses;
    var tableId = settings.sTableId;
    var language = settings.oLanguage;
    var previousSearch = settings.oPreviousSearch;
    var features = settings.aanFeatures;
    var input = '<input type="search" class="' + classes.sFilterInput + '"/>';
    var str = language.sSearch;
    str = str.match(/_INPUT_/) ? str.replace('_INPUT_', input) : str + input;
    var filter = $('<div/>', {
      'id': !features.f ? tableId + '_filter' : null,
      'class': classes.sFilter
    }).append($('<label/>').append(str));

    var searchFn = function searchFn() {
      /* Update all other filter input elements for the new display */
      var n = features.f;
      var val = !this.value ? "" : this.value; // mental IE8 fix :-(

      /* Now do the filter */

      if (val != previousSearch.sSearch) {
        _fnFilterComplete(settings, {
          "sSearch": val,
          "bRegex": previousSearch.bRegex,
          "bSmart": previousSearch.bSmart,
          "bCaseInsensitive": previousSearch.bCaseInsensitive
        }); // Need to redraw, without resorting


        settings._iDisplayStart = 0;

        _fnDraw(settings);
      }
    };

    var searchDelay = settings.searchDelay !== null ? settings.searchDelay : _fnDataSource(settings) === 'ssp' ? 400 : 0;
    var jqFilter = $('input', filter).val(previousSearch.sSearch).attr('placeholder', language.sSearchPlaceholder).on('keyup.DT search.DT input.DT paste.DT cut.DT', searchDelay ? _fnThrottle(searchFn, searchDelay) : searchFn).on('keypress.DT', function (e) {
      /* Prevent form submission */
      if (e.keyCode == 13) {
        return false;
      }
    }).attr('aria-controls', tableId); // Update the input elements whenever the table is filtered

    $(settings.nTable).on('search.dt.DT', function (ev, s) {
      if (settings === s) {
        // IE9 throws an 'unknown error' if document.activeElement is used
        // inside an iframe or frame...
        try {
          if (jqFilter[0] !== document.activeElement) {
            jqFilter.val(previousSearch.sSearch);
          }
        } catch (e) {}
      }
    });
    return filter[0];
  }
  /**
   * Filter the table using both the global filter and column based filtering
   *  @param {object} oSettings dataTables settings object
   *  @param {object} oSearch search information
   *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
   *  @memberof DataTable#oApi
   */


  function _fnFilterComplete(oSettings, oInput, iForce) {
    var oPrevSearch = oSettings.oPreviousSearch;
    var aoPrevSearch = oSettings.aoPreSearchCols;

    var fnSaveFilter = function fnSaveFilter(oFilter) {
      /* Save the filtering values */
      oPrevSearch.sSearch = oFilter.sSearch;
      oPrevSearch.bRegex = oFilter.bRegex;
      oPrevSearch.bSmart = oFilter.bSmart;
      oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
    };

    var fnRegex = function fnRegex(o) {
      // Backwards compatibility with the bEscapeRegex option
      return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
    }; // Resolve any column types that are unknown due to addition or invalidation
    // @todo As per sort - can this be moved into an event handler?


    _fnColumnTypes(oSettings);
    /* In server-side processing all filtering is done by the server, so no point hanging around here */


    if (_fnDataSource(oSettings) != 'ssp') {
      /* Global filter */
      _fnFilter(oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive);

      fnSaveFilter(oInput);
      /* Now do the individual column filter */

      for (var i = 0; i < aoPrevSearch.length; i++) {
        _fnFilterColumn(oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]), aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive);
      }
      /* Custom filtering */


      _fnFilterCustom(oSettings);
    } else {
      fnSaveFilter(oInput);
    }
    /* Tell the draw function we have been filtering */


    oSettings.bFiltered = true;

    _fnCallbackFire(oSettings, null, 'search', [oSettings]);
  }
  /**
   * Apply custom filtering functions
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnFilterCustom(settings) {
    var filters = DataTable.ext.search;
    var displayRows = settings.aiDisplay;
    var row, rowIdx;

    for (var i = 0, ien = filters.length; i < ien; i++) {
      var rows = []; // Loop over each row and see if it should be included

      for (var j = 0, jen = displayRows.length; j < jen; j++) {
        rowIdx = displayRows[j];
        row = settings.aoData[rowIdx];

        if (filters[i](settings, row._aFilterData, rowIdx, row._aData, j)) {
          rows.push(rowIdx);
        }
      } // So the array reference doesn't break set the results into the
      // existing array


      displayRows.length = 0;
      $.merge(displayRows, rows);
    }
  }
  /**
   * Filter the table on a per-column basis
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sInput string to filter on
   *  @param {int} iColumn column to filter
   *  @param {bool} bRegex treat search string as a regular expression or not
   *  @param {bool} bSmart use smart filtering or not
   *  @param {bool} bCaseInsensitive Do case insenstive matching or not
   *  @memberof DataTable#oApi
   */


  function _fnFilterColumn(settings, searchStr, colIdx, regex, smart, caseInsensitive) {
    if (searchStr === '') {
      return;
    }

    var data;
    var out = [];
    var display = settings.aiDisplay;

    var rpSearch = _fnFilterCreateSearch(searchStr, regex, smart, caseInsensitive);

    for (var i = 0; i < display.length; i++) {
      data = settings.aoData[display[i]]._aFilterData[colIdx];

      if (rpSearch.test(data)) {
        out.push(display[i]);
      }
    }

    settings.aiDisplay = out;
  }
  /**
   * Filter the data table based on user input and draw the table
   *  @param {object} settings dataTables settings object
   *  @param {string} input string to filter on
   *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
   *  @param {bool} regex treat as a regular expression or not
   *  @param {bool} smart perform smart filtering or not
   *  @param {bool} caseInsensitive Do case insenstive matching or not
   *  @memberof DataTable#oApi
   */


  function _fnFilter(settings, input, force, regex, smart, caseInsensitive) {
    var rpSearch = _fnFilterCreateSearch(input, regex, smart, caseInsensitive);

    var prevSearch = settings.oPreviousSearch.sSearch;
    var displayMaster = settings.aiDisplayMaster;
    var display, invalidated, i;
    var filtered = []; // Need to take account of custom filtering functions - always filter

    if (DataTable.ext.search.length !== 0) {
      force = true;
    } // Check if any of the rows were invalidated


    invalidated = _fnFilterData(settings); // If the input is blank - we just want the full data set

    if (input.length <= 0) {
      settings.aiDisplay = displayMaster.slice();
    } else {
      // New search - start from the master array
      if (invalidated || force || prevSearch.length > input.length || input.indexOf(prevSearch) !== 0 || settings.bSorted // On resort, the display master needs to be
      // re-filtered since indexes will have changed
      ) {
          settings.aiDisplay = displayMaster.slice();
        } // Search the display array


      display = settings.aiDisplay;

      for (i = 0; i < display.length; i++) {
        if (rpSearch.test(settings.aoData[display[i]]._sFilterRow)) {
          filtered.push(display[i]);
        }
      }

      settings.aiDisplay = filtered;
    }
  }
  /**
   * Build a regular expression object suitable for searching a table
   *  @param {string} sSearch string to search for
   *  @param {bool} bRegex treat as a regular expression or not
   *  @param {bool} bSmart perform smart filtering or not
   *  @param {bool} bCaseInsensitive Do case insensitive matching or not
   *  @returns {RegExp} constructed object
   *  @memberof DataTable#oApi
   */


  function _fnFilterCreateSearch(search, regex, smart, caseInsensitive) {
    search = regex ? search : _fnEscapeRegex(search);

    if (smart) {
      /* For smart filtering we want to allow the search to work regardless of
       * word order. We also want double quoted text to be preserved, so word
       * order is important - a la google. So this is what we want to
       * generate:
       * 
       * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
       */
      var a = $.map(search.match(/"[^"]+"|[^ ]+/g) || [''], function (word) {
        if (word.charAt(0) === '"') {
          var m = word.match(/^"(.*)"$/);
          word = m ? m[1] : word;
        }

        return word.replace('"', '');
      });
      search = '^(?=.*?' + a.join(')(?=.*?') + ').*$';
    }

    return new RegExp(search, caseInsensitive ? 'i' : '');
  }
  /**
   * Escape a string such that it can be used in a regular expression
   *  @param {string} sVal string to escape
   *  @returns {string} escaped string
   *  @memberof DataTable#oApi
   */


  var _fnEscapeRegex = DataTable.util.escapeRegex;
  var __filter_div = $('<div>')[0];

  var __filter_div_textContent = __filter_div.textContent !== undefined; // Update the filtering data for each row if needed (by invalidation or first run)


  function _fnFilterData(settings) {
    var columns = settings.aoColumns;
    var column;
    var i, j, ien, jen, filterData, cellData, row;
    var fomatters = DataTable.ext.type.search;
    var wasInvalidated = false;

    for (i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];

      if (!row._aFilterData) {
        filterData = [];

        for (j = 0, jen = columns.length; j < jen; j++) {
          column = columns[j];

          if (column.bSearchable) {
            cellData = _fnGetCellData(settings, i, j, 'filter');

            if (fomatters[column.sType]) {
              cellData = fomatters[column.sType](cellData);
            } // Search in DataTables 1.10 is string based. In 1.11 this
            // should be altered to also allow strict type checking.


            if (cellData === null) {
              cellData = '';
            }

            if (typeof cellData !== 'string' && cellData.toString) {
              cellData = cellData.toString();
            }
          } else {
            cellData = '';
          } // If it looks like there is an HTML entity in the string,
          // attempt to decode it so sorting works as expected. Note that
          // we could use a single line of jQuery to do this, but the DOM
          // method used here is much faster http://jsperf.com/html-decode


          if (cellData.indexOf && cellData.indexOf('&') !== -1) {
            __filter_div.innerHTML = cellData;
            cellData = __filter_div_textContent ? __filter_div.textContent : __filter_div.innerText;
          }

          if (cellData.replace) {
            cellData = cellData.replace(/[\r\n]/g, '');
          }

          filterData.push(cellData);
        }

        row._aFilterData = filterData;
        row._sFilterRow = filterData.join('  ');
        wasInvalidated = true;
      }
    }

    return wasInvalidated;
  }
  /**
   * Convert from the internal Hungarian notation to camelCase for external
   * interaction
   *  @param {object} obj Object to convert
   *  @returns {object} Inverted object
   *  @memberof DataTable#oApi
   */


  function _fnSearchToCamel(obj) {
    return {
      search: obj.sSearch,
      smart: obj.bSmart,
      regex: obj.bRegex,
      caseInsensitive: obj.bCaseInsensitive
    };
  }
  /**
   * Convert from camelCase notation to the internal Hungarian. We could use the
   * Hungarian convert function here, but this is cleaner
   *  @param {object} obj Object to convert
   *  @returns {object} Inverted object
   *  @memberof DataTable#oApi
   */


  function _fnSearchToHung(obj) {
    return {
      sSearch: obj.search,
      bSmart: obj.smart,
      bRegex: obj.regex,
      bCaseInsensitive: obj.caseInsensitive
    };
  }
  /**
   * Generate the node required for the info display
   *  @param {object} oSettings dataTables settings object
   *  @returns {node} Information element
   *  @memberof DataTable#oApi
   */


  function _fnFeatureHtmlInfo(settings) {
    var tid = settings.sTableId,
        nodes = settings.aanFeatures.i,
        n = $('<div/>', {
      'class': settings.oClasses.sInfo,
      'id': !nodes ? tid + '_info' : null
    });

    if (!nodes) {
      // Update display on each draw
      settings.aoDrawCallback.push({
        "fn": _fnUpdateInfo,
        "sName": "information"
      });
      n.attr('role', 'status').attr('aria-live', 'polite'); // Table is described by our info div

      $(settings.nTable).attr('aria-describedby', tid + '_info');
    }

    return n[0];
  }
  /**
   * Update the information elements in the display
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnUpdateInfo(settings) {
    /* Show information about the table */
    var nodes = settings.aanFeatures.i;

    if (nodes.length === 0) {
      return;
    }

    var lang = settings.oLanguage,
        start = settings._iDisplayStart + 1,
        end = settings.fnDisplayEnd(),
        max = settings.fnRecordsTotal(),
        total = settings.fnRecordsDisplay(),
        out = total ? lang.sInfo : lang.sInfoEmpty;

    if (total !== max) {
      /* Record set after filtering */
      out += ' ' + lang.sInfoFiltered;
    } // Convert the macros


    out += lang.sInfoPostFix;
    out = _fnInfoMacros(settings, out);
    var callback = lang.fnInfoCallback;

    if (callback !== null) {
      out = callback.call(settings.oInstance, settings, start, end, max, total, out);
    }

    $(nodes).html(out);
  }

  function _fnInfoMacros(settings, str) {
    // When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
    // internally
    var formatter = settings.fnFormatNumber,
        start = settings._iDisplayStart + 1,
        len = settings._iDisplayLength,
        vis = settings.fnRecordsDisplay(),
        all = len === -1;
    return str.replace(/_START_/g, formatter.call(settings, start)).replace(/_END_/g, formatter.call(settings, settings.fnDisplayEnd())).replace(/_MAX_/g, formatter.call(settings, settings.fnRecordsTotal())).replace(/_TOTAL_/g, formatter.call(settings, vis)).replace(/_PAGE_/g, formatter.call(settings, all ? 1 : Math.ceil(start / len))).replace(/_PAGES_/g, formatter.call(settings, all ? 1 : Math.ceil(vis / len)));
  }
  /**
   * Draw the table for the first time, adding all required features
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnInitialise(settings) {
    var i,
        iLen,
        iAjaxStart = settings.iInitDisplayStart;
    var columns = settings.aoColumns,
        column;
    var features = settings.oFeatures;
    var deferLoading = settings.bDeferLoading; // value modified by the draw

    /* Ensure that the table data is fully initialised */

    if (!settings.bInitialised) {
      setTimeout(function () {
        _fnInitialise(settings);
      }, 200);
      return;
    }
    /* Show the display HTML options */


    _fnAddOptionsHtml(settings);
    /* Build and draw the header / footer for the table */


    _fnBuildHead(settings);

    _fnDrawHead(settings, settings.aoHeader);

    _fnDrawHead(settings, settings.aoFooter);
    /* Okay to show that something is going on now */


    _fnProcessingDisplay(settings, true);
    /* Calculate sizes for columns */


    if (features.bAutoWidth) {
      _fnCalculateColumnWidths(settings);
    }

    for (i = 0, iLen = columns.length; i < iLen; i++) {
      column = columns[i];

      if (column.sWidth) {
        column.nTh.style.width = _fnStringToCss(column.sWidth);
      }
    }

    _fnCallbackFire(settings, null, 'preInit', [settings]); // If there is default sorting required - let's do it. The sort function
    // will do the drawing for us. Otherwise we draw the table regardless of the
    // Ajax source - this allows the table to look initialised for Ajax sourcing
    // data (show 'loading' message possibly)


    _fnReDraw(settings); // Server-side processing init complete is done by _fnAjaxUpdateDraw


    var dataSrc = _fnDataSource(settings);

    if (dataSrc != 'ssp' || deferLoading) {
      // if there is an ajax source load the data
      if (dataSrc == 'ajax') {
        _fnBuildAjax(settings, [], function (json) {
          var aData = _fnAjaxDataSrc(settings, json); // Got the data - add it to the table


          for (i = 0; i < aData.length; i++) {
            _fnAddData(settings, aData[i]);
          } // Reset the init display for cookie saving. We've already done
          // a filter, and therefore cleared it before. So we need to make
          // it appear 'fresh'


          settings.iInitDisplayStart = iAjaxStart;

          _fnReDraw(settings);

          _fnProcessingDisplay(settings, false);

          _fnInitComplete(settings, json);
        }, settings);
      } else {
        _fnProcessingDisplay(settings, false);

        _fnInitComplete(settings);
      }
    }
  }
  /**
   * Draw the table for the first time, adding all required features
   *  @param {object} oSettings dataTables settings object
   *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
   *    with client-side processing (optional)
   *  @memberof DataTable#oApi
   */


  function _fnInitComplete(settings, json) {
    settings._bInitComplete = true; // When data was added after the initialisation (data or Ajax) we need to
    // calculate the column sizing

    if (json || settings.oInit.aaData) {
      _fnAdjustColumnSizing(settings);
    }

    _fnCallbackFire(settings, null, 'plugin-init', [settings, json]);

    _fnCallbackFire(settings, 'aoInitComplete', 'init', [settings, json]);
  }

  function _fnLengthChange(settings, val) {
    var len = parseInt(val, 10);
    settings._iDisplayLength = len;

    _fnLengthOverflow(settings); // Fire length change event


    _fnCallbackFire(settings, null, 'length', [settings, len]);
  }
  /**
   * Generate the node required for user display length changing
   *  @param {object} settings dataTables settings object
   *  @returns {node} Display length feature node
   *  @memberof DataTable#oApi
   */


  function _fnFeatureHtmlLength(settings) {
    var classes = settings.oClasses,
        tableId = settings.sTableId,
        menu = settings.aLengthMenu,
        d2 = $.isArray(menu[0]),
        lengths = d2 ? menu[0] : menu,
        language = d2 ? menu[1] : menu;
    var select = $('<select/>', {
      'name': tableId + '_length',
      'aria-controls': tableId,
      'class': classes.sLengthSelect
    });

    for (var i = 0, ien = lengths.length; i < ien; i++) {
      select[0][i] = new Option(typeof language[i] === 'number' ? settings.fnFormatNumber(language[i]) : language[i], lengths[i]);
    }

    var div = $('<div><label/></div>').addClass(classes.sLength);

    if (!settings.aanFeatures.l) {
      div[0].id = tableId + '_length';
    }

    div.children().append(settings.oLanguage.sLengthMenu.replace('_MENU_', select[0].outerHTML)); // Can't use `select` variable as user might provide their own and the
    // reference is broken by the use of outerHTML

    $('select', div).val(settings._iDisplayLength).on('change.DT', function (e) {
      _fnLengthChange(settings, $(this).val());

      _fnDraw(settings);
    }); // Update node value whenever anything changes the table's length

    $(settings.nTable).on('length.dt.DT', function (e, s, len) {
      if (settings === s) {
        $('select', div).val(len);
      }
    });
    return div[0];
  }
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Note that most of the paging logic is done in
   * DataTable.ext.pager
   */

  /**
   * Generate the node required for default pagination
   *  @param {object} oSettings dataTables settings object
   *  @returns {node} Pagination feature node
   *  @memberof DataTable#oApi
   */


  function _fnFeatureHtmlPaginate(settings) {
    var type = settings.sPaginationType,
        plugin = DataTable.ext.pager[type],
        modern = typeof plugin === 'function',
        redraw = function redraw(settings) {
      _fnDraw(settings);
    },
        node = $('<div/>').addClass(settings.oClasses.sPaging + type)[0],
        features = settings.aanFeatures;

    if (!modern) {
      plugin.fnInit(settings, node, redraw);
    }
    /* Add a draw callback for the pagination on first instance, to update the paging display */


    if (!features.p) {
      node.id = settings.sTableId + '_paginate';
      settings.aoDrawCallback.push({
        "fn": function fn(settings) {
          if (modern) {
            var start = settings._iDisplayStart,
                len = settings._iDisplayLength,
                visRecords = settings.fnRecordsDisplay(),
                all = len === -1,
                page = all ? 0 : Math.ceil(start / len),
                pages = all ? 1 : Math.ceil(visRecords / len),
                buttons = plugin(page, pages),
                i,
                ien;

            for (i = 0, ien = features.p.length; i < ien; i++) {
              _fnRenderer(settings, 'pageButton')(settings, features.p[i], i, buttons, page, pages);
            }
          } else {
            plugin.fnUpdate(settings, redraw);
          }
        },
        "sName": "pagination"
      });
    }

    return node;
  }
  /**
   * Alter the display settings to change the page
   *  @param {object} settings DataTables settings object
   *  @param {string|int} action Paging action to take: "first", "previous",
   *    "next" or "last" or page number to jump to (integer)
   *  @param [bool] redraw Automatically draw the update or not
   *  @returns {bool} true page has changed, false - no change
   *  @memberof DataTable#oApi
   */


  function _fnPageChange(settings, action, redraw) {
    var start = settings._iDisplayStart,
        len = settings._iDisplayLength,
        records = settings.fnRecordsDisplay();

    if (records === 0 || len === -1) {
      start = 0;
    } else if (typeof action === "number") {
      start = action * len;

      if (start > records) {
        start = 0;
      }
    } else if (action == "first") {
      start = 0;
    } else if (action == "previous") {
      start = len >= 0 ? start - len : 0;

      if (start < 0) {
        start = 0;
      }
    } else if (action == "next") {
      if (start + len < records) {
        start += len;
      }
    } else if (action == "last") {
      start = Math.floor((records - 1) / len) * len;
    } else {
      _fnLog(settings, 0, "Unknown paging action: " + action, 5);
    }

    var changed = settings._iDisplayStart !== start;
    settings._iDisplayStart = start;

    if (changed) {
      _fnCallbackFire(settings, null, 'page', [settings]);

      if (redraw) {
        _fnDraw(settings);
      }
    }

    return changed;
  }
  /**
   * Generate the node required for the processing node
   *  @param {object} settings dataTables settings object
   *  @returns {node} Processing element
   *  @memberof DataTable#oApi
   */


  function _fnFeatureHtmlProcessing(settings) {
    return $('<div/>', {
      'id': !settings.aanFeatures.r ? settings.sTableId + '_processing' : null,
      'class': settings.oClasses.sProcessing
    }).html(settings.oLanguage.sProcessing).insertBefore(settings.nTable)[0];
  }
  /**
   * Display or hide the processing indicator
   *  @param {object} settings dataTables settings object
   *  @param {bool} show Show the processing indicator (true) or not (false)
   *  @memberof DataTable#oApi
   */


  function _fnProcessingDisplay(settings, show) {
    if (settings.oFeatures.bProcessing) {
      $(settings.aanFeatures.r).css('display', show ? 'block' : 'none');
    }

    _fnCallbackFire(settings, null, 'processing', [settings, show]);
  }
  /**
   * Add any control elements for the table - specifically scrolling
   *  @param {object} settings dataTables settings object
   *  @returns {node} Node to add to the DOM
   *  @memberof DataTable#oApi
   */


  function _fnFeatureHtmlTable(settings) {
    var table = $(settings.nTable); // Add the ARIA grid role to the table

    table.attr('role', 'grid'); // Scrolling from here on in

    var scroll = settings.oScroll;

    if (scroll.sX === '' && scroll.sY === '') {
      return settings.nTable;
    }

    var scrollX = scroll.sX;
    var scrollY = scroll.sY;
    var classes = settings.oClasses;
    var caption = table.children('caption');
    var captionSide = caption.length ? caption[0]._captionSide : null;
    var headerClone = $(table[0].cloneNode(false));
    var footerClone = $(table[0].cloneNode(false));
    var footer = table.children('tfoot');
    var _div = '<div/>';

    var size = function size(s) {
      return !s ? null : _fnStringToCss(s);
    };

    if (!footer.length) {
      footer = null;
    }
    /*
     * The HTML structure that we want to generate in this function is:
     *  div - scroller
     *    div - scroll head
     *      div - scroll head inner
     *        table - scroll head table
     *          thead - thead
     *    div - scroll body
     *      table - table (master table)
     *        thead - thead clone for sizing
     *        tbody - tbody
     *    div - scroll foot
     *      div - scroll foot inner
     *        table - scroll foot table
     *          tfoot - tfoot
     */


    var scroller = $(_div, {
      'class': classes.sScrollWrapper
    }).append($(_div, {
      'class': classes.sScrollHead
    }).css({
      overflow: 'hidden',
      position: 'relative',
      border: 0,
      width: scrollX ? size(scrollX) : '100%'
    }).append($(_div, {
      'class': classes.sScrollHeadInner
    }).css({
      'box-sizing': 'content-box',
      width: scroll.sXInner || '100%'
    }).append(headerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'top' ? caption : null).append(table.children('thead'))))).append($(_div, {
      'class': classes.sScrollBody
    }).css({
      position: 'relative',
      overflow: 'auto',
      width: size(scrollX)
    }).append(table));

    if (footer) {
      scroller.append($(_div, {
        'class': classes.sScrollFoot
      }).css({
        overflow: 'hidden',
        border: 0,
        width: scrollX ? size(scrollX) : '100%'
      }).append($(_div, {
        'class': classes.sScrollFootInner
      }).append(footerClone.removeAttr('id').css('margin-left', 0).append(captionSide === 'bottom' ? caption : null).append(table.children('tfoot')))));
    }

    var children = scroller.children();
    var scrollHead = children[0];
    var scrollBody = children[1];
    var scrollFoot = footer ? children[2] : null; // When the body is scrolled, then we also want to scroll the headers

    if (scrollX) {
      $(scrollBody).on('scroll.DT', function (e) {
        var scrollLeft = this.scrollLeft;
        scrollHead.scrollLeft = scrollLeft;

        if (footer) {
          scrollFoot.scrollLeft = scrollLeft;
        }
      });
    }

    $(scrollBody).css(scrollY && scroll.bCollapse ? 'max-height' : 'height', scrollY);
    settings.nScrollHead = scrollHead;
    settings.nScrollBody = scrollBody;
    settings.nScrollFoot = scrollFoot; // On redraw - align columns

    settings.aoDrawCallback.push({
      "fn": _fnScrollDraw,
      "sName": "scrolling"
    });
    return scroller[0];
  }
  /**
   * Update the header, footer and body tables for resizing - i.e. column
   * alignment.
   *
   * Welcome to the most horrible function DataTables. The process that this
   * function follows is basically:
   *   1. Re-create the table inside the scrolling div
   *   2. Take live measurements from the DOM
   *   3. Apply the measurements to align the columns
   *   4. Clean up
   *
   *  @param {object} settings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnScrollDraw(settings) {
    // Given that this is such a monster function, a lot of variables are use
    // to try and keep the minimised size as small as possible
    var scroll = settings.oScroll,
        scrollX = scroll.sX,
        scrollXInner = scroll.sXInner,
        scrollY = scroll.sY,
        barWidth = scroll.iBarWidth,
        divHeader = $(settings.nScrollHead),
        divHeaderStyle = divHeader[0].style,
        divHeaderInner = divHeader.children('div'),
        divHeaderInnerStyle = divHeaderInner[0].style,
        divHeaderTable = divHeaderInner.children('table'),
        divBodyEl = settings.nScrollBody,
        divBody = $(divBodyEl),
        divBodyStyle = divBodyEl.style,
        divFooter = $(settings.nScrollFoot),
        divFooterInner = divFooter.children('div'),
        divFooterTable = divFooterInner.children('table'),
        header = $(settings.nTHead),
        table = $(settings.nTable),
        tableEl = table[0],
        tableStyle = tableEl.style,
        footer = settings.nTFoot ? $(settings.nTFoot) : null,
        browser = settings.oBrowser,
        ie67 = browser.bScrollOversize,
        dtHeaderCells = _pluck(settings.aoColumns, 'nTh'),
        headerTrgEls,
        footerTrgEls,
        headerSrcEls,
        footerSrcEls,
        headerCopy,
        footerCopy,
        headerWidths = [],
        footerWidths = [],
        headerContent = [],
        footerContent = [],
        idx,
        correction,
        sanityWidth,
        zeroOut = function zeroOut(nSizer) {
      var style = nSizer.style;
      style.paddingTop = "0";
      style.paddingBottom = "0";
      style.borderTopWidth = "0";
      style.borderBottomWidth = "0";
      style.height = 0;
    }; // If the scrollbar visibility has changed from the last draw, we need to
    // adjust the column sizes as the table width will have changed to account
    // for the scrollbar


    var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;

    if (settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined) {
      settings.scrollBarVis = scrollBarVis;

      _fnAdjustColumnSizing(settings);

      return; // adjust column sizing will call this function again
    } else {
      settings.scrollBarVis = scrollBarVis;
    }
    /*
     * 1. Re-create the table inside the scrolling div
     */
    // Remove the old minimised thead and tfoot elements in the inner table


    table.children('thead, tfoot').remove();

    if (footer) {
      footerCopy = footer.clone().prependTo(table);
      footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized

      footerSrcEls = footerCopy.find('tr');
    } // Clone the current header and footer elements and then place it into the inner table


    headerCopy = header.clone().prependTo(table);
    headerTrgEls = header.find('tr'); // original header is in its own table

    headerSrcEls = headerCopy.find('tr');
    headerCopy.find('th, td').removeAttr('tabindex');
    /*
     * 2. Take live measurements from the DOM - do not alter the DOM itself!
     */
    // Remove old sizing and apply the calculated column widths
    // Get the unique column headers in the newly created (cloned) header. We want to apply the
    // calculated sizes to this header

    if (!scrollX) {
      divBodyStyle.width = '100%';
      divHeader[0].style.width = '100%';
    }

    $.each(_fnGetUniqueThs(settings, headerCopy), function (i, el) {
      idx = _fnVisibleToColumnIndex(settings, i);
      el.style.width = settings.aoColumns[idx].sWidth;
    });

    if (footer) {
      _fnApplyToChildren(function (n) {
        n.style.width = "";
      }, footerSrcEls);
    } // Size the table as a whole


    sanityWidth = table.outerWidth();

    if (scrollX === "") {
      // No x scrolling
      tableStyle.width = "100%"; // IE7 will make the width of the table when 100% include the scrollbar
      // - which is shouldn't. When there is a scrollbar we need to take this
      // into account.

      if (ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
        tableStyle.width = _fnStringToCss(table.outerWidth() - barWidth);
      } // Recalculate the sanity width


      sanityWidth = table.outerWidth();
    } else if (scrollXInner !== "") {
      // legacy x scroll inner has been given - use it
      tableStyle.width = _fnStringToCss(scrollXInner); // Recalculate the sanity width

      sanityWidth = table.outerWidth();
    } // Hidden header should have zero height, so remove padding and borders. Then
    // set the width based on the real headers
    // Apply all styles in one pass


    _fnApplyToChildren(zeroOut, headerSrcEls); // Read all widths in next pass


    _fnApplyToChildren(function (nSizer) {
      headerContent.push(nSizer.innerHTML);
      headerWidths.push(_fnStringToCss($(nSizer).css('width')));
    }, headerSrcEls); // Apply all widths in final pass


    _fnApplyToChildren(function (nToSize, i) {
      // Only apply widths to the DataTables detected header cells - this
      // prevents complex headers from having contradictory sizes applied
      if ($.inArray(nToSize, dtHeaderCells) !== -1) {
        nToSize.style.width = headerWidths[i];
      }
    }, headerTrgEls);

    $(headerSrcEls).height(0);
    /* Same again with the footer if we have one */

    if (footer) {
      _fnApplyToChildren(zeroOut, footerSrcEls);

      _fnApplyToChildren(function (nSizer) {
        footerContent.push(nSizer.innerHTML);
        footerWidths.push(_fnStringToCss($(nSizer).css('width')));
      }, footerSrcEls);

      _fnApplyToChildren(function (nToSize, i) {
        nToSize.style.width = footerWidths[i];
      }, footerTrgEls);

      $(footerSrcEls).height(0);
    }
    /*
     * 3. Apply the measurements
     */
    // "Hide" the header and footer that we used for the sizing. We need to keep
    // the content of the cell so that the width applied to the header and body
    // both match, but we want to hide it completely. We want to also fix their
    // width to what they currently are


    _fnApplyToChildren(function (nSizer, i) {
      nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + headerContent[i] + '</div>';
      nSizer.style.width = headerWidths[i];
    }, headerSrcEls);

    if (footer) {
      _fnApplyToChildren(function (nSizer, i) {
        nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + footerContent[i] + '</div>';
        nSizer.style.width = footerWidths[i];
      }, footerSrcEls);
    } // Sanity check that the table is of a sensible width. If not then we are going to get
    // misalignment - try to prevent this by not allowing the table to shrink below its min width


    if (table.outerWidth() < sanityWidth) {
      // The min width depends upon if we have a vertical scrollbar visible or not */
      correction = divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll" ? sanityWidth + barWidth : sanityWidth; // IE6/7 are a law unto themselves...

      if (ie67 && (divBodyEl.scrollHeight > divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")) {
        tableStyle.width = _fnStringToCss(correction - barWidth);
      } // And give the user a warning that we've stopped the table getting too small


      if (scrollX === "" || scrollXInner !== "") {
        _fnLog(settings, 1, 'Possible column misalignment', 6);
      }
    } else {
      correction = '100%';
    } // Apply to the container elements


    divBodyStyle.width = _fnStringToCss(correction);
    divHeaderStyle.width = _fnStringToCss(correction);

    if (footer) {
      settings.nScrollFoot.style.width = _fnStringToCss(correction);
    }
    /*
     * 4. Clean up
     */


    if (!scrollY) {
      /* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
       * the scrollbar height from the visible display, rather than adding it on. We need to
       * set the height in order to sort this. Don't want to do it in any other browsers.
       */
      if (ie67) {
        divBodyStyle.height = _fnStringToCss(tableEl.offsetHeight + barWidth);
      }
    }
    /* Finally set the width's of the header and footer tables */


    var iOuterWidth = table.outerWidth();
    divHeaderTable[0].style.width = _fnStringToCss(iOuterWidth);
    divHeaderInnerStyle.width = _fnStringToCss(iOuterWidth); // Figure out if there are scrollbar present - if so then we need a the header and footer to
    // provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)

    var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
    var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right');
    divHeaderInnerStyle[padding] = bScrolling ? barWidth + "px" : "0px";

    if (footer) {
      divFooterTable[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style.width = _fnStringToCss(iOuterWidth);
      divFooterInner[0].style[padding] = bScrolling ? barWidth + "px" : "0px";
    } // Correct DOM ordering for colgroup - comes before the thead


    table.children('colgroup').insertBefore(table.children('thead'));
    /* Adjust the position of the header in case we loose the y-scrollbar */

    divBody.scroll(); // If sorting or filtering has occurred, jump the scrolling back to the top
    // only if we aren't holding the position

    if ((settings.bSorted || settings.bFiltered) && !settings._drawHold) {
      divBodyEl.scrollTop = 0;
    }
  }
  /**
   * Apply a given function to the display child nodes of an element array (typically
   * TD children of TR rows
   *  @param {function} fn Method to apply to the objects
   *  @param array {nodes} an1 List of elements to look through for display children
   *  @param array {nodes} an2 Another list (identical structure to the first) - optional
   *  @memberof DataTable#oApi
   */


  function _fnApplyToChildren(fn, an1, an2) {
    var index = 0,
        i = 0,
        iLen = an1.length;
    var nNode1, nNode2;

    while (i < iLen) {
      nNode1 = an1[i].firstChild;
      nNode2 = an2 ? an2[i].firstChild : null;

      while (nNode1) {
        if (nNode1.nodeType === 1) {
          if (an2) {
            fn(nNode1, nNode2, index);
          } else {
            fn(nNode1, index);
          }

          index++;
        }

        nNode1 = nNode1.nextSibling;
        nNode2 = an2 ? nNode2.nextSibling : null;
      }

      i++;
    }
  }

  var __re_html_remove = /<.*?>/g;
  /**
   * Calculate the width of columns for the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */

  function _fnCalculateColumnWidths(oSettings) {
    var table = oSettings.nTable,
        columns = oSettings.aoColumns,
        scroll = oSettings.oScroll,
        scrollY = scroll.sY,
        scrollX = scroll.sX,
        scrollXInner = scroll.sXInner,
        columnCount = columns.length,
        visibleColumns = _fnGetColumns(oSettings, 'bVisible'),
        headerCells = $('th', oSettings.nTHead),
        tableWidthAttr = table.getAttribute('width'),
        // from DOM element
    tableContainer = table.parentNode,
        userInputs = false,
        i,
        column,
        columnIdx,
        width,
        outerWidth,
        browser = oSettings.oBrowser,
        ie67 = browser.bScrollOversize;

    var styleWidth = table.style.width;

    if (styleWidth && styleWidth.indexOf('%') !== -1) {
      tableWidthAttr = styleWidth;
    }
    /* Convert any user input sizes into pixel sizes */


    for (i = 0; i < visibleColumns.length; i++) {
      column = columns[visibleColumns[i]];

      if (column.sWidth !== null) {
        column.sWidth = _fnConvertToWidth(column.sWidthOrig, tableContainer);
        userInputs = true;
      }
    }
    /* If the number of columns in the DOM equals the number that we have to
     * process in DataTables, then we can use the offsets that are created by
     * the web- browser. No custom sizes can be set in order for this to happen,
     * nor scrolling used
     */


    if (ie67 || !userInputs && !scrollX && !scrollY && columnCount == _fnVisbleColumns(oSettings) && columnCount == headerCells.length) {
      for (i = 0; i < columnCount; i++) {
        var colIdx = _fnVisibleToColumnIndex(oSettings, i);

        if (colIdx !== null) {
          columns[colIdx].sWidth = _fnStringToCss(headerCells.eq(i).width());
        }
      }
    } else {
      // Otherwise construct a single row, worst case, table with the widest
      // node in the data, assign any user defined widths, then insert it into
      // the DOM and allow the browser to do all the hard work of calculating
      // table widths
      var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
      .css('visibility', 'hidden').removeAttr('id'); // Clean up the table body

      tmpTable.find('tbody tr').remove();
      var tr = $('<tr/>').appendTo(tmpTable.find('tbody')); // Clone the table header and footer - we can't use the header / footer
      // from the cloned table, since if scrolling is active, the table's
      // real header and footer are contained in different table tags

      tmpTable.find('thead, tfoot').remove();
      tmpTable.append($(oSettings.nTHead).clone()).append($(oSettings.nTFoot).clone()); // Remove any assigned widths from the footer (from scrolling)

      tmpTable.find('tfoot th, tfoot td').css('width', ''); // Apply custom sizing to the cloned header

      headerCells = _fnGetUniqueThs(oSettings, tmpTable.find('thead')[0]);

      for (i = 0; i < visibleColumns.length; i++) {
        column = columns[visibleColumns[i]];
        headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ? _fnStringToCss(column.sWidthOrig) : ''; // For scrollX we need to force the column width otherwise the
        // browser will collapse it. If this width is smaller than the
        // width the column requires, then it will have no effect

        if (column.sWidthOrig && scrollX) {
          $(headerCells[i]).append($('<div/>').css({
            width: column.sWidthOrig,
            margin: 0,
            padding: 0,
            border: 0,
            height: 1
          }));
        }
      } // Find the widest cell for each column and put it into the table


      if (oSettings.aoData.length) {
        for (i = 0; i < visibleColumns.length; i++) {
          columnIdx = visibleColumns[i];
          column = columns[columnIdx];
          $(_fnGetWidestNode(oSettings, columnIdx)).clone(false).append(column.sContentPadding).appendTo(tr);
        }
      } // Tidy the temporary table - remove name attributes so there aren't
      // duplicated in the dom (radio elements for example)


      $('[name]', tmpTable).removeAttr('name'); // Table has been built, attach to the document so we can work with it.
      // A holding element is used, positioned at the top of the container
      // with minimal height, so it has no effect on if the container scrolls
      // or not. Otherwise it might trigger scrolling when it actually isn't
      // needed

      var holder = $('<div/>').css(scrollX || scrollY ? {
        position: 'absolute',
        top: 0,
        left: 0,
        height: 1,
        right: 0,
        overflow: 'hidden'
      } : {}).append(tmpTable).appendTo(tableContainer); // When scrolling (X or Y) we want to set the width of the table as 
      // appropriate. However, when not scrolling leave the table width as it
      // is. This results in slightly different, but I think correct behaviour

      if (scrollX && scrollXInner) {
        tmpTable.width(scrollXInner);
      } else if (scrollX) {
        tmpTable.css('width', 'auto');
        tmpTable.removeAttr('width'); // If there is no width attribute or style, then allow the table to
        // collapse

        if (tmpTable.width() < tableContainer.clientWidth && tableWidthAttr) {
          tmpTable.width(tableContainer.clientWidth);
        }
      } else if (scrollY) {
        tmpTable.width(tableContainer.clientWidth);
      } else if (tableWidthAttr) {
        tmpTable.width(tableWidthAttr);
      } // Get the width of each column in the constructed table - we need to
      // know the inner width (so it can be assigned to the other table's
      // cells) and the outer width so we can calculate the full width of the
      // table. This is safe since DataTables requires a unique cell for each
      // column, but if ever a header can span multiple columns, this will
      // need to be modified.


      var total = 0;

      for (i = 0; i < visibleColumns.length; i++) {
        var cell = $(headerCells[i]);
        var border = cell.outerWidth() - cell.width(); // Use getBounding... where possible (not IE8-) because it can give
        // sub-pixel accuracy, which we then want to round up!

        var bounding = browser.bBounding ? Math.ceil(headerCells[i].getBoundingClientRect().width) : cell.outerWidth(); // Total is tracked to remove any sub-pixel errors as the outerWidth
        // of the table might not equal the total given here (IE!).

        total += bounding; // Width for each column to use

        columns[visibleColumns[i]].sWidth = _fnStringToCss(bounding - border);
      }

      table.style.width = _fnStringToCss(total); // Finished with the table - ditch it

      holder.remove();
    } // If there is a width attr, we want to attach an event listener which
    // allows the table sizing to automatically adjust when the window is
    // resized. Use the width attr rather than CSS, since we can't know if the
    // CSS is a relative value or absolute - DOM read is always px.


    if (tableWidthAttr) {
      table.style.width = _fnStringToCss(tableWidthAttr);
    }

    if ((tableWidthAttr || scrollX) && !oSettings._reszEvt) {
      var bindResize = function bindResize() {
        $(window).on('resize.DT-' + oSettings.sInstance, _fnThrottle(function () {
          _fnAdjustColumnSizing(oSettings);
        }));
      }; // IE6/7 will crash if we bind a resize event handler on page load.
      // To be removed in 1.11 which drops IE6/7 support


      if (ie67) {
        setTimeout(bindResize, 1000);
      } else {
        bindResize();
      }

      oSettings._reszEvt = true;
    }
  }
  /**
   * Throttle the calls to a function. Arguments and context are maintained for
   * the throttled function
   *  @param {function} fn Function to be called
   *  @param {int} [freq=200] call frequency in mS
   *  @returns {function} wrapped function
   *  @memberof DataTable#oApi
   */


  var _fnThrottle = DataTable.util.throttle;
  /**
   * Convert a CSS unit width to pixels (e.g. 2em)
   *  @param {string} width width to be converted
   *  @param {node} parent parent to get the with for (required for relative widths) - optional
   *  @returns {int} width in pixels
   *  @memberof DataTable#oApi
   */

  function _fnConvertToWidth(width, parent) {
    if (!width) {
      return 0;
    }

    var n = $('<div/>').css('width', _fnStringToCss(width)).appendTo(parent || document.body);
    var val = n[0].offsetWidth;
    n.remove();
    return val;
  }
  /**
   * Get the widest node
   *  @param {object} settings dataTables settings object
   *  @param {int} colIdx column of interest
   *  @returns {node} widest table node
   *  @memberof DataTable#oApi
   */


  function _fnGetWidestNode(settings, colIdx) {
    var idx = _fnGetMaxLenString(settings, colIdx);

    if (idx < 0) {
      return null;
    }

    var data = settings.aoData[idx];
    return !data.nTr ? // Might not have been created when deferred rendering
    $('<td/>').html(_fnGetCellData(settings, idx, colIdx, 'display'))[0] : data.anCells[colIdx];
  }
  /**
   * Get the maximum strlen for each data column
   *  @param {object} settings dataTables settings object
   *  @param {int} colIdx column of interest
   *  @returns {string} max string length for each column
   *  @memberof DataTable#oApi
   */


  function _fnGetMaxLenString(settings, colIdx) {
    var s,
        max = -1,
        maxIdx = -1;

    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      s = _fnGetCellData(settings, i, colIdx, 'display') + '';
      s = s.replace(__re_html_remove, '');
      s = s.replace(/&nbsp;/g, ' ');

      if (s.length > max) {
        max = s.length;
        maxIdx = i;
      }
    }

    return maxIdx;
  }
  /**
   * Append a CSS unit (only if required) to a string
   *  @param {string} value to css-ify
   *  @returns {string} value with css unit
   *  @memberof DataTable#oApi
   */


  function _fnStringToCss(s) {
    if (s === null) {
      return '0px';
    }

    if (typeof s == 'number') {
      return s < 0 ? '0px' : s + 'px';
    } // Check it has a unit character already


    return s.match(/\d$/) ? s + 'px' : s;
  }

  function _fnSortFlatten(settings) {
    var i,
        iLen,
        k,
        kLen,
        aSort = [],
        aiOrig = [],
        aoColumns = settings.aoColumns,
        aDataSort,
        iCol,
        sType,
        srcCol,
        fixed = settings.aaSortingFixed,
        fixedObj = $.isPlainObject(fixed),
        nestedSort = [],
        add = function add(a) {
      if (a.length && !$.isArray(a[0])) {
        // 1D array
        nestedSort.push(a);
      } else {
        // 2D array
        $.merge(nestedSort, a);
      }
    }; // Build the sort array, with pre-fix and post-fix options if they have been
    // specified


    if ($.isArray(fixed)) {
      add(fixed);
    }

    if (fixedObj && fixed.pre) {
      add(fixed.pre);
    }

    add(settings.aaSorting);

    if (fixedObj && fixed.post) {
      add(fixed.post);
    }

    for (i = 0; i < nestedSort.length; i++) {
      srcCol = nestedSort[i][0];
      aDataSort = aoColumns[srcCol].aDataSort;

      for (k = 0, kLen = aDataSort.length; k < kLen; k++) {
        iCol = aDataSort[k];
        sType = aoColumns[iCol].sType || 'string';

        if (nestedSort[i]._idx === undefined) {
          nestedSort[i]._idx = $.inArray(nestedSort[i][1], aoColumns[iCol].asSorting);
        }

        aSort.push({
          src: srcCol,
          col: iCol,
          dir: nestedSort[i][1],
          index: nestedSort[i]._idx,
          type: sType,
          formatter: DataTable.ext.type.order[sType + "-pre"]
        });
      }
    }

    return aSort;
  }
  /**
   * Change the order of the table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   *  @todo This really needs split up!
   */


  function _fnSort(oSettings) {
    var i,
        ien,
        iLen,
        j,
        jLen,
        k,
        kLen,
        sDataType,
        nTh,
        aiOrig = [],
        oExtSort = DataTable.ext.type.order,
        aoData = oSettings.aoData,
        aoColumns = oSettings.aoColumns,
        aDataSort,
        data,
        iCol,
        sType,
        oSort,
        formatters = 0,
        sortCol,
        displayMaster = oSettings.aiDisplayMaster,
        aSort; // Resolve any column types that are unknown due to addition or invalidation
    // @todo Can this be moved into a 'data-ready' handler which is called when
    //   data is going to be used in the table?

    _fnColumnTypes(oSettings);

    aSort = _fnSortFlatten(oSettings);

    for (i = 0, ien = aSort.length; i < ien; i++) {
      sortCol = aSort[i]; // Track if we can use the fast sort algorithm

      if (sortCol.formatter) {
        formatters++;
      } // Load the data needed for the sort, for each cell


      _fnSortData(oSettings, sortCol.col);
    }
    /* No sorting required if server-side or no sorting array */


    if (_fnDataSource(oSettings) != 'ssp' && aSort.length !== 0) {
      // Create a value - key array of the current row positions such that we can use their
      // current position during the sort, if values match, in order to perform stable sorting
      for (i = 0, iLen = displayMaster.length; i < iLen; i++) {
        aiOrig[displayMaster[i]] = i;
      }
      /* Do the sort - here we want multi-column sorting based on a given data source (column)
       * and sorting function (from oSort) in a certain direction. It's reasonably complex to
       * follow on it's own, but this is what we want (example two column sorting):
       *  fnLocalSorting = function(a,b){
       *    var iTest;
       *    iTest = oSort['string-asc']('data11', 'data12');
       *      if (iTest !== 0)
       *        return iTest;
       *    iTest = oSort['numeric-desc']('data21', 'data22');
       *    if (iTest !== 0)
       *      return iTest;
       *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
       *  }
       * Basically we have a test for each sorting column, if the data in that column is equal,
       * test the next column. If all columns match, then we use a numeric sort on the row
       * positions in the original data array to provide a stable sort.
       *
       * Note - I know it seems excessive to have two sorting methods, but the first is around
       * 15% faster, so the second is only maintained for backwards compatibility with sorting
       * methods which do not have a pre-sort formatting function.
       */


      if (formatters === aSort.length) {
        // All sort types have formatting functions
        displayMaster.sort(function (a, b) {
          var x,
              y,
              k,
              test,
              sort,
              len = aSort.length,
              dataA = aoData[a]._aSortData,
              dataB = aoData[b]._aSortData;

          for (k = 0; k < len; k++) {
            sort = aSort[k];
            x = dataA[sort.col];
            y = dataB[sort.col];
            test = x < y ? -1 : x > y ? 1 : 0;

            if (test !== 0) {
              return sort.dir === 'asc' ? test : -test;
            }
          }

          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      } else {
        // Depreciated - remove in 1.11 (providing a plug-in option)
        // Not all sort types have formatting methods, so we have to call their sorting
        // methods.
        displayMaster.sort(function (a, b) {
          var x,
              y,
              k,
              l,
              test,
              sort,
              fn,
              len = aSort.length,
              dataA = aoData[a]._aSortData,
              dataB = aoData[b]._aSortData;

          for (k = 0; k < len; k++) {
            sort = aSort[k];
            x = dataA[sort.col];
            y = dataB[sort.col];
            fn = oExtSort[sort.type + "-" + sort.dir] || oExtSort["string-" + sort.dir];
            test = fn(x, y);

            if (test !== 0) {
              return test;
            }
          }

          x = aiOrig[a];
          y = aiOrig[b];
          return x < y ? -1 : x > y ? 1 : 0;
        });
      }
    }
    /* Tell the draw function that we have sorted the data */


    oSettings.bSorted = true;
  }

  function _fnSortAria(settings) {
    var label;
    var nextSort;
    var columns = settings.aoColumns;

    var aSort = _fnSortFlatten(settings);

    var oAria = settings.oLanguage.oAria; // ARIA attributes - need to loop all columns, to update all (removing old
    // attributes as needed)

    for (var i = 0, iLen = columns.length; i < iLen; i++) {
      var col = columns[i];
      var asSorting = col.asSorting;
      var sTitle = col.sTitle.replace(/<.*?>/g, "");
      var th = col.nTh; // IE7 is throwing an error when setting these properties with jQuery's
      // attr() and removeAttr() methods...

      th.removeAttribute('aria-sort');
      /* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */

      if (col.bSortable) {
        if (aSort.length > 0 && aSort[0].col == i) {
          th.setAttribute('aria-sort', aSort[0].dir == "asc" ? "ascending" : "descending");
          nextSort = asSorting[aSort[0].index + 1] || asSorting[0];
        } else {
          nextSort = asSorting[0];
        }

        label = sTitle + (nextSort === "asc" ? oAria.sSortAscending : oAria.sSortDescending);
      } else {
        label = sTitle;
      }

      th.setAttribute('aria-label', label);
    }
  }
  /**
   * Function to run on user sort request
   *  @param {object} settings dataTables settings object
   *  @param {node} attachTo node to attach the handler to
   *  @param {int} colIdx column sorting index
   *  @param {boolean} [append=false] Append the requested sort to the existing
   *    sort if true (i.e. multi-column sort)
   *  @param {function} [callback] callback function
   *  @memberof DataTable#oApi
   */


  function _fnSortListener(settings, colIdx, append, callback) {
    var col = settings.aoColumns[colIdx];
    var sorting = settings.aaSorting;
    var asSorting = col.asSorting;
    var nextSortIdx;

    var next = function next(a, overflow) {
      var idx = a._idx;

      if (idx === undefined) {
        idx = $.inArray(a[1], asSorting);
      }

      return idx + 1 < asSorting.length ? idx + 1 : overflow ? null : 0;
    }; // Convert to 2D array if needed


    if (typeof sorting[0] === 'number') {
      sorting = settings.aaSorting = [sorting];
    } // If appending the sort then we are multi-column sorting


    if (append && settings.oFeatures.bSortMulti) {
      // Are we already doing some kind of sort on this column?
      var sortIdx = $.inArray(colIdx, _pluck(sorting, '0'));

      if (sortIdx !== -1) {
        // Yes, modify the sort
        nextSortIdx = next(sorting[sortIdx], true);

        if (nextSortIdx === null && sorting.length === 1) {
          nextSortIdx = 0; // can't remove sorting completely
        }

        if (nextSortIdx === null) {
          sorting.splice(sortIdx, 1);
        } else {
          sorting[sortIdx][1] = asSorting[nextSortIdx];
          sorting[sortIdx]._idx = nextSortIdx;
        }
      } else {
        // No sort on this column yet
        sorting.push([colIdx, asSorting[0], 0]);
        sorting[sorting.length - 1]._idx = 0;
      }
    } else if (sorting.length && sorting[0][0] == colIdx) {
      // Single column - already sorting on this column, modify the sort
      nextSortIdx = next(sorting[0]);
      sorting.length = 1;
      sorting[0][1] = asSorting[nextSortIdx];
      sorting[0]._idx = nextSortIdx;
    } else {
      // Single column - sort only on this column
      sorting.length = 0;
      sorting.push([colIdx, asSorting[0]]);
      sorting[0]._idx = 0;
    } // Run the sort by calling a full redraw


    _fnReDraw(settings); // callback used for async user interaction


    if (typeof callback == 'function') {
      callback(settings);
    }
  }
  /**
   * Attach a sort handler (click) to a node
   *  @param {object} settings dataTables settings object
   *  @param {node} attachTo node to attach the handler to
   *  @param {int} colIdx column sorting index
   *  @param {function} [callback] callback function
   *  @memberof DataTable#oApi
   */


  function _fnSortAttachListener(settings, attachTo, colIdx, callback) {
    var col = settings.aoColumns[colIdx];

    _fnBindAction(attachTo, {}, function (e) {
      /* If the column is not sortable - don't to anything */
      if (col.bSortable === false) {
        return;
      } // If processing is enabled use a timeout to allow the processing
      // display to be shown - otherwise to it synchronously


      if (settings.oFeatures.bProcessing) {
        _fnProcessingDisplay(settings, true);

        setTimeout(function () {
          _fnSortListener(settings, colIdx, e.shiftKey, callback); // In server-side processing, the draw callback will remove the
          // processing display


          if (_fnDataSource(settings) !== 'ssp') {
            _fnProcessingDisplay(settings, false);
          }
        }, 0);
      } else {
        _fnSortListener(settings, colIdx, e.shiftKey, callback);
      }
    });
  }
  /**
   * Set the sorting classes on table's body, Note: it is safe to call this function
   * when bSort and bSortClasses are false
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnSortingClasses(settings) {
    var oldSort = settings.aLastSort;
    var sortClass = settings.oClasses.sSortColumn;

    var sort = _fnSortFlatten(settings);

    var features = settings.oFeatures;
    var i, ien, colIdx;

    if (features.bSort && features.bSortClasses) {
      // Remove old sorting classes
      for (i = 0, ien = oldSort.length; i < ien; i++) {
        colIdx = oldSort[i].src; // Remove column sorting

        $(_pluck(settings.aoData, 'anCells', colIdx)).removeClass(sortClass + (i < 2 ? i + 1 : 3));
      } // Add new column sorting


      for (i = 0, ien = sort.length; i < ien; i++) {
        colIdx = sort[i].src;
        $(_pluck(settings.aoData, 'anCells', colIdx)).addClass(sortClass + (i < 2 ? i + 1 : 3));
      }
    }

    settings.aLastSort = sort;
  } // Get the data to sort a column, be it from cache, fresh (populating the
  // cache), or from a sort formatter


  function _fnSortData(settings, idx) {
    // Custom sorting function - provided by the sort data type
    var column = settings.aoColumns[idx];
    var customSort = DataTable.ext.order[column.sSortDataType];
    var customData;

    if (customSort) {
      customData = customSort.call(settings.oInstance, settings, idx, _fnColumnIndexToVisible(settings, idx));
    } // Use / populate cache


    var row, cellData;
    var formatter = DataTable.ext.type.order[column.sType + "-pre"];

    for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
      row = settings.aoData[i];

      if (!row._aSortData) {
        row._aSortData = [];
      }

      if (!row._aSortData[idx] || customSort) {
        cellData = customSort ? customData[i] : // If there was a custom sort function, use data from there
        _fnGetCellData(settings, i, idx, 'sort');
        row._aSortData[idx] = formatter ? formatter(cellData) : cellData;
      }
    }
  }
  /**
   * Save the state of a table
   *  @param {object} oSettings dataTables settings object
   *  @memberof DataTable#oApi
   */


  function _fnSaveState(settings) {
    if (!settings.oFeatures.bStateSave || settings.bDestroying) {
      return;
    }
    /* Store the interesting variables */


    var state = {
      time: +new Date(),
      start: settings._iDisplayStart,
      length: settings._iDisplayLength,
      order: $.extend(true, [], settings.aaSorting),
      search: _fnSearchToCamel(settings.oPreviousSearch),
      columns: $.map(settings.aoColumns, function (col, i) {
        return {
          visible: col.bVisible,
          search: _fnSearchToCamel(settings.aoPreSearchCols[i])
        };
      })
    };

    _fnCallbackFire(settings, "aoStateSaveParams", 'stateSaveParams', [settings, state]);

    settings.oSavedState = state;
    settings.fnStateSaveCallback.call(settings.oInstance, settings, state);
  }
  /**
   * Attempt to load a saved table state
   *  @param {object} oSettings dataTables settings object
   *  @param {object} oInit DataTables init object so we can override settings
   *  @param {function} callback Callback to execute when the state has been loaded
   *  @memberof DataTable#oApi
   */


  function _fnLoadState(settings, oInit, callback) {
    var i, ien;
    var columns = settings.aoColumns;

    var loaded = function loaded(s) {
      if (!s || !s.time) {
        callback();
        return;
      } // Allow custom and plug-in manipulation functions to alter the saved data set and
      // cancelling of loading by returning false


      var abStateLoad = _fnCallbackFire(settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s]);

      if ($.inArray(false, abStateLoad) !== -1) {
        callback();
        return;
      } // Reject old data


      var duration = settings.iStateDuration;

      if (duration > 0 && s.time < +new Date() - duration * 1000) {
        callback();
        return;
      } // Number of columns have changed - all bets are off, no restore of settings


      if (s.columns && columns.length !== s.columns.length) {
        callback();
        return;
      } // Store the saved state so it might be accessed at any time


      settings.oLoadedState = $.extend(true, {}, s); // Restore key features - todo - for 1.11 this needs to be done by
      // subscribed events

      if (s.start !== undefined) {
        settings._iDisplayStart = s.start;
        settings.iInitDisplayStart = s.start;
      }

      if (s.length !== undefined) {
        settings._iDisplayLength = s.length;
      } // Order


      if (s.order !== undefined) {
        settings.aaSorting = [];
        $.each(s.order, function (i, col) {
          settings.aaSorting.push(col[0] >= columns.length ? [0, col[1]] : col);
        });
      } // Search


      if (s.search !== undefined) {
        $.extend(settings.oPreviousSearch, _fnSearchToHung(s.search));
      } // Columns
      //


      if (s.columns) {
        for (i = 0, ien = s.columns.length; i < ien; i++) {
          var col = s.columns[i]; // Visibility

          if (col.visible !== undefined) {
            columns[i].bVisible = col.visible;
          } // Search


          if (col.search !== undefined) {
            $.extend(settings.aoPreSearchCols[i], _fnSearchToHung(col.search));
          }
        }
      }

      _fnCallbackFire(settings, 'aoStateLoaded', 'stateLoaded', [settings, s]);

      callback();
    };

    if (!settings.oFeatures.bStateSave) {
      callback();
      return;
    }

    var state = settings.fnStateLoadCallback.call(settings.oInstance, settings, loaded);

    if (state !== undefined) {
      loaded(state);
    } // otherwise, wait for the loaded callback to be executed

  }
  /**
   * Return the settings object for a particular table
   *  @param {node} table table we are using as a dataTable
   *  @returns {object} Settings object - or null if not found
   *  @memberof DataTable#oApi
   */


  function _fnSettingsFromNode(table) {
    var settings = DataTable.settings;
    var idx = $.inArray(table, _pluck(settings, 'nTable'));
    return idx !== -1 ? settings[idx] : null;
  }
  /**
   * Log an error message
   *  @param {object} settings dataTables settings object
   *  @param {int} level log error messages, or display them to the user
   *  @param {string} msg error message
   *  @param {int} tn Technical note id to get more information about the error.
   *  @memberof DataTable#oApi
   */


  function _fnLog(settings, level, msg, tn) {
    msg = 'DataTables warning: ' + (settings ? 'table id=' + settings.sTableId + ' - ' : '') + msg;

    if (tn) {
      msg += '. For more information about this error, please see ' + 'http://datatables.net/tn/' + tn;
    }

    if (!level) {
      // Backwards compatibility pre 1.10
      var ext = DataTable.ext;
      var type = ext.sErrMode || ext.errMode;

      if (settings) {
        _fnCallbackFire(settings, null, 'error', [settings, tn, msg]);
      }

      if (type == 'alert') {
        alert(msg);
      } else if (type == 'throw') {
        throw new Error(msg);
      } else if (typeof type == 'function') {
        type(settings, tn, msg);
      }
    } else if (window.console && console.log) {
      console.log(msg);
    }
  }
  /**
   * See if a property is defined on one object, if so assign it to the other object
   *  @param {object} ret target object
   *  @param {object} src source object
   *  @param {string} name property
   *  @param {string} [mappedName] name to map too - optional, name used if not given
   *  @memberof DataTable#oApi
   */


  function _fnMap(ret, src, name, mappedName) {
    if ($.isArray(name)) {
      $.each(name, function (i, val) {
        if ($.isArray(val)) {
          _fnMap(ret, src, val[0], val[1]);
        } else {
          _fnMap(ret, src, val);
        }
      });
      return;
    }

    if (mappedName === undefined) {
      mappedName = name;
    }

    if (src[name] !== undefined) {
      ret[mappedName] = src[name];
    }
  }
  /**
   * Extend objects - very similar to jQuery.extend, but deep copy objects, and
   * shallow copy arrays. The reason we need to do this, is that we don't want to
   * deep copy array init values (such as aaSorting) since the dev wouldn't be
   * able to override them, but we do want to deep copy arrays.
   *  @param {object} out Object to extend
   *  @param {object} extender Object from which the properties will be applied to
   *      out
   *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
   *      independent copy with the exception of the `data` or `aaData` parameters
   *      if they are present. This is so you can pass in a collection to
   *      DataTables and have that used as your data source without breaking the
   *      references
   *  @returns {object} out Reference, just for convenience - out === the return.
   *  @memberof DataTable#oApi
   *  @todo This doesn't take account of arrays inside the deep copied objects.
   */


  function _fnExtend(out, extender, breakRefs) {
    var val;

    for (var prop in extender) {
      if (extender.hasOwnProperty(prop)) {
        val = extender[prop];

        if ($.isPlainObject(val)) {
          if (!$.isPlainObject(out[prop])) {
            out[prop] = {};
          }

          $.extend(true, out[prop], val);
        } else if (breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val)) {
          out[prop] = val.slice();
        } else {
          out[prop] = val;
        }
      }
    }

    return out;
  }
  /**
   * Bind an event handers to allow a click or return key to activate the callback.
   * This is good for accessibility since a return on the keyboard will have the
   * same effect as a click, if the element has focus.
   *  @param {element} n Element to bind the action to
   *  @param {object} oData Data object to pass to the triggered function
   *  @param {function} fn Callback function for when the event is triggered
   *  @memberof DataTable#oApi
   */


  function _fnBindAction(n, oData, fn) {
    $(n).on('click.DT', oData, function (e) {
      n.blur(); // Remove focus outline for mouse users

      fn(e);
    }).on('keypress.DT', oData, function (e) {
      if (e.which === 13) {
        e.preventDefault();
        fn(e);
      }
    }).on('selectstart.DT', function () {
      /* Take the brutal approach to cancelling text selection */
      return false;
    });
  }
  /**
   * Register a callback function. Easily allows a callback function to be added to
   * an array store of callback functions that can then all be called together.
   *  @param {object} oSettings dataTables settings object
   *  @param {string} sStore Name of the array storage for the callbacks in oSettings
   *  @param {function} fn Function to be called back
   *  @param {string} sName Identifying name for the callback (i.e. a label)
   *  @memberof DataTable#oApi
   */


  function _fnCallbackReg(oSettings, sStore, fn, sName) {
    if (fn) {
      oSettings[sStore].push({
        "fn": fn,
        "sName": sName
      });
    }
  }
  /**
   * Fire callback functions and trigger events. Note that the loop over the
   * callback array store is done backwards! Further note that you do not want to
   * fire off triggers in time sensitive applications (for example cell creation)
   * as its slow.
   *  @param {object} settings dataTables settings object
   *  @param {string} callbackArr Name of the array storage for the callbacks in
   *      oSettings
   *  @param {string} eventName Name of the jQuery custom event to trigger. If
   *      null no trigger is fired
   *  @param {array} args Array of arguments to pass to the callback function /
   *      trigger
   *  @memberof DataTable#oApi
   */


  function _fnCallbackFire(settings, callbackArr, eventName, args) {
    var ret = [];

    if (callbackArr) {
      ret = $.map(settings[callbackArr].slice().reverse(), function (val, i) {
        return val.fn.apply(settings.oInstance, args);
      });
    }

    if (eventName !== null) {
      var e = $.Event(eventName + '.dt');
      $(settings.nTable).trigger(e, args);
      ret.push(e.result);
    }

    return ret;
  }

  function _fnLengthOverflow(settings) {
    var start = settings._iDisplayStart,
        end = settings.fnDisplayEnd(),
        len = settings._iDisplayLength;
    /* If we have space to show extra rows (backing up from the end point - then do so */

    if (start >= end) {
      start = end - len;
    } // Keep the start record on the current page


    start -= start % len;

    if (len === -1 || start < 0) {
      start = 0;
    }

    settings._iDisplayStart = start;
  }

  function _fnRenderer(settings, type) {
    var renderer = settings.renderer;
    var host = DataTable.ext.renderer[type];

    if ($.isPlainObject(renderer) && renderer[type]) {
      // Specific renderer for this type. If available use it, otherwise use
      // the default.
      return host[renderer[type]] || host._;
    } else if (typeof renderer === 'string') {
      // Common renderer - if there is one available for this type use it,
      // otherwise use the default
      return host[renderer] || host._;
    } // Use the default


    return host._;
  }
  /**
   * Detect the data source being used for the table. Used to simplify the code
   * a little (ajax) and to make it compress a little smaller.
   *
   *  @param {object} settings dataTables settings object
   *  @returns {string} Data source
   *  @memberof DataTable#oApi
   */


  function _fnDataSource(settings) {
    if (settings.oFeatures.bServerSide) {
      return 'ssp';
    } else if (settings.ajax || settings.sAjaxSource) {
      return 'ajax';
    }

    return 'dom';
  }
  /**
   * Computed structure of the DataTables API, defined by the options passed to
   * `DataTable.Api.register()` when building the API.
   *
   * The structure is built in order to speed creation and extension of the Api
   * objects since the extensions are effectively pre-parsed.
   *
   * The array is an array of objects with the following structure, where this
   * base array represents the Api prototype base:
   *
   *     [
   *       {
   *         name:      'data'                -- string   - Property name
   *         val:       function () {},       -- function - Api method (or undefined if just an object
   *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
   *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
   *       },
   *       {
   *         name:     'row'
   *         val:       {},
   *         methodExt: [ ... ],
   *         propExt:   [
   *           {
   *             name:      'data'
   *             val:       function () {},
   *             methodExt: [ ... ],
   *             propExt:   [ ... ]
   *           },
   *           ...
   *         ]
   *       }
   *     ]
   *
   * @type {Array}
   * @ignore
   */


  var __apiStruct = [];
  /**
   * `Array.prototype` reference.
   *
   * @type object
   * @ignore
   */

  var __arrayProto = Array.prototype;
  /**
   * Abstraction for `context` parameter of the `Api` constructor to allow it to
   * take several different forms for ease of use.
   *
   * Each of the input parameter types will be converted to a DataTables settings
   * object where possible.
   *
   * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
   *   of:
   *
   *   * `string` - jQuery selector. Any DataTables' matching the given selector
   *     with be found and used.
   *   * `node` - `TABLE` node which has already been formed into a DataTable.
   *   * `jQuery` - A jQuery object of `TABLE` nodes.
   *   * `object` - DataTables settings object
   *   * `DataTables.Api` - API instance
   * @return {array|null} Matching DataTables settings objects. `null` or
   *   `undefined` is returned if no matching DataTable is found.
   * @ignore
   */

  var _toSettings = function _toSettings(mixed) {
    var idx, jq;
    var settings = DataTable.settings;
    var tables = $.map(settings, function (el, i) {
      return el.nTable;
    });

    if (!mixed) {
      return [];
    } else if (mixed.nTable && mixed.oApi) {
      // DataTables settings object
      return [mixed];
    } else if (mixed.nodeName && mixed.nodeName.toLowerCase() === 'table') {
      // Table node
      idx = $.inArray(mixed, tables);
      return idx !== -1 ? [settings[idx]] : null;
    } else if (mixed && typeof mixed.settings === 'function') {
      return mixed.settings().toArray();
    } else if (typeof mixed === 'string') {
      // jQuery selector
      jq = $(mixed);
    } else if (mixed instanceof $) {
      // jQuery object (also DataTables instance)
      jq = mixed;
    }

    if (jq) {
      return jq.map(function (i) {
        idx = $.inArray(this, tables);
        return idx !== -1 ? settings[idx] : null;
      }).toArray();
    }
  };
  /**
   * DataTables API class - used to control and interface with  one or more
   * DataTables enhanced tables.
   *
   * The API class is heavily based on jQuery, presenting a chainable interface
   * that you can use to interact with tables. Each instance of the API class has
   * a "context" - i.e. the tables that it will operate on. This could be a single
   * table, all tables on a page or a sub-set thereof.
   *
   * Additionally the API is designed to allow you to easily work with the data in
   * the tables, retrieving and manipulating it as required. This is done by
   * presenting the API class as an array like interface. The contents of the
   * array depend upon the actions requested by each method (for example
   * `rows().nodes()` will return an array of nodes, while `rows().data()` will
   * return an array of objects or arrays depending upon your table's
   * configuration). The API object has a number of array like methods (`push`,
   * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
   * `unique` etc) to assist your working with the data held in a table.
   *
   * Most methods (those which return an Api instance) are chainable, which means
   * the return from a method call also has all of the methods available that the
   * top level object had. For example, these two calls are equivalent:
   *
   *     // Not chained
   *     api.row.add( {...} );
   *     api.draw();
   *
   *     // Chained
   *     api.row.add( {...} ).draw();
   *
   * @class DataTable.Api
   * @param {array|object|string|jQuery} context DataTable identifier. This is
   *   used to define which DataTables enhanced tables this API will operate on.
   *   Can be one of:
   *
   *   * `string` - jQuery selector. Any DataTables' matching the given selector
   *     with be found and used.
   *   * `node` - `TABLE` node which has already been formed into a DataTable.
   *   * `jQuery` - A jQuery object of `TABLE` nodes.
   *   * `object` - DataTables settings object
   * @param {array} [data] Data to initialise the Api instance with.
   *
   * @example
   *   // Direct initialisation during DataTables construction
   *   var api = $('#example').DataTable();
   *
   * @example
   *   // Initialisation using a DataTables jQuery object
   *   var api = $('#example').dataTable().api();
   *
   * @example
   *   // Initialisation as a constructor
   *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
   */


  _Api2 = function _Api(context, data) {
    if (!(this instanceof _Api2)) {
      return new _Api2(context, data);
    }

    var settings = [];

    var ctxSettings = function ctxSettings(o) {
      var a = _toSettings(o);

      if (a) {
        settings = settings.concat(a);
      }
    };

    if ($.isArray(context)) {
      for (var i = 0, ien = context.length; i < ien; i++) {
        ctxSettings(context[i]);
      }
    } else {
      ctxSettings(context);
    } // Remove duplicates


    this.context = _unique(settings); // Initial data

    if (data) {
      $.merge(this, data);
    } // selector


    this.selector = {
      rows: null,
      cols: null,
      opts: null
    };

    _Api2.extend(this, this, __apiStruct);
  };

  DataTable.Api = _Api2; // Don't destroy the existing prototype, just extend it. Required for jQuery 2's
  // isPlainObject.

  $.extend(_Api2.prototype, {
    any: function any() {
      return this.count() !== 0;
    },
    concat: __arrayProto.concat,
    context: [],
    // array of table settings objects
    count: function count() {
      return this.flatten().length;
    },
    each: function each(fn) {
      for (var i = 0, ien = this.length; i < ien; i++) {
        fn.call(this, this[i], i, this);
      }

      return this;
    },
    eq: function eq(idx) {
      var ctx = this.context;
      return ctx.length > idx ? new _Api2(ctx[idx], this[idx]) : null;
    },
    filter: function filter(fn) {
      var a = [];

      if (__arrayProto.filter) {
        a = __arrayProto.filter.call(this, fn, this);
      } else {
        // Compatibility for browsers without EMCA-252-5 (JS 1.6)
        for (var i = 0, ien = this.length; i < ien; i++) {
          if (fn.call(this, this[i], i, this)) {
            a.push(this[i]);
          }
        }
      }

      return new _Api2(this.context, a);
    },
    flatten: function flatten() {
      var a = [];
      return new _Api2(this.context, a.concat.apply(a, this.toArray()));
    },
    join: __arrayProto.join,
    indexOf: __arrayProto.indexOf || function (obj, start) {
      for (var i = start || 0, ien = this.length; i < ien; i++) {
        if (this[i] === obj) {
          return i;
        }
      }

      return -1;
    },
    iterator: function iterator(flatten, type, fn, alwaysNew) {
      var a = [],
          ret,
          i,
          ien,
          j,
          jen,
          context = this.context,
          rows,
          items,
          item,
          selector = this.selector; // Argument shifting

      if (typeof flatten === 'string') {
        alwaysNew = fn;
        fn = type;
        type = flatten;
        flatten = false;
      }

      for (i = 0, ien = context.length; i < ien; i++) {
        var apiInst = new _Api2(context[i]);

        if (type === 'table') {
          ret = fn.call(apiInst, context[i], i);

          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === 'columns' || type === 'rows') {
          // this has same length as context - one entry for each table
          ret = fn.call(apiInst, context[i], this[i], i);

          if (ret !== undefined) {
            a.push(ret);
          }
        } else if (type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell') {
          // columns and rows share the same structure.
          // 'this' is an array of column indexes for each context
          items = this[i];

          if (type === 'column-rows') {
            rows = _selector_row_indexes(context[i], selector.opts);
          }

          for (j = 0, jen = items.length; j < jen; j++) {
            item = items[j];

            if (type === 'cell') {
              ret = fn.call(apiInst, context[i], item.row, item.column, i, j);
            } else {
              ret = fn.call(apiInst, context[i], item, i, j, rows);
            }

            if (ret !== undefined) {
              a.push(ret);
            }
          }
        }
      }

      if (a.length || alwaysNew) {
        var api = new _Api2(context, flatten ? a.concat.apply([], a) : a);
        var apiSelector = api.selector;
        apiSelector.rows = selector.rows;
        apiSelector.cols = selector.cols;
        apiSelector.opts = selector.opts;
        return api;
      }

      return this;
    },
    lastIndexOf: __arrayProto.lastIndexOf || function (obj, start) {
      // Bit cheeky...
      return this.indexOf.apply(this.toArray.reverse(), arguments);
    },
    length: 0,
    map: function map(fn) {
      var a = [];

      if (__arrayProto.map) {
        a = __arrayProto.map.call(this, fn, this);
      } else {
        // Compatibility for browsers without EMCA-252-5 (JS 1.6)
        for (var i = 0, ien = this.length; i < ien; i++) {
          a.push(fn.call(this, this[i], i));
        }
      }

      return new _Api2(this.context, a);
    },
    pluck: function pluck(prop) {
      return this.map(function (el) {
        return el[prop];
      });
    },
    pop: __arrayProto.pop,
    push: __arrayProto.push,
    // Does not return an API instance
    reduce: __arrayProto.reduce || function (fn, init) {
      return _fnReduce(this, fn, init, 0, this.length, 1);
    },
    reduceRight: __arrayProto.reduceRight || function (fn, init) {
      return _fnReduce(this, fn, init, this.length - 1, -1, -1);
    },
    reverse: __arrayProto.reverse,
    // Object with rows, columns and opts
    selector: null,
    shift: __arrayProto.shift,
    slice: function slice() {
      return new _Api2(this.context, this);
    },
    sort: __arrayProto.sort,
    // ? name - order?
    splice: __arrayProto.splice,
    toArray: function toArray() {
      return __arrayProto.slice.call(this);
    },
    to$: function to$() {
      return $(this);
    },
    toJQuery: function toJQuery() {
      return $(this);
    },
    unique: function unique() {
      return new _Api2(this.context, _unique(this));
    },
    unshift: __arrayProto.unshift
  });

  _Api2.extend = function (scope, obj, ext) {
    // Only extend API instances and static properties of the API
    if (!ext.length || !obj || !(obj instanceof _Api2) && !obj.__dt_wrapper) {
      return;
    }

    var i,
        ien,
        j,
        jen,
        struct,
        inner,
        methodScoping = function methodScoping(scope, fn, struc) {
      return function () {
        var ret = fn.apply(scope, arguments); // Method extension

        _Api2.extend(ret, ret, struc.methodExt);

        return ret;
      };
    };

    for (i = 0, ien = ext.length; i < ien; i++) {
      struct = ext[i]; // Value

      obj[struct.name] = typeof struct.val === 'function' ? methodScoping(scope, struct.val, struct) : $.isPlainObject(struct.val) ? {} : struct.val;
      obj[struct.name].__dt_wrapper = true; // Property extension

      _Api2.extend(scope, obj[struct.name], struct.propExt);
    }
  }; // @todo - Is there need for an augment function?
  // _Api.augment = function ( inst, name )
  // {
  // 	// Find src object in the structure from the name
  // 	var parts = name.split('.');
  // 	_Api.extend( inst, obj );
  // };
  //     [
  //       {
  //         name:      'data'                -- string   - Property name
  //         val:       function () {},       -- function - Api method (or undefined if just an object
  //         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
  //         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
  //       },
  //       {
  //         name:     'row'
  //         val:       {},
  //         methodExt: [ ... ],
  //         propExt:   [
  //           {
  //             name:      'data'
  //             val:       function () {},
  //             methodExt: [ ... ],
  //             propExt:   [ ... ]
  //           },
  //           ...
  //         ]
  //       }
  //     ]


  _Api2.register = _api_register = function _api_register(name, val) {
    if ($.isArray(name)) {
      for (var j = 0, jen = name.length; j < jen; j++) {
        _Api2.register(name[j], val);
      }

      return;
    }

    var i,
        ien,
        heir = name.split('.'),
        struct = __apiStruct,
        key,
        method;

    var find = function find(src, name) {
      for (var i = 0, ien = src.length; i < ien; i++) {
        if (src[i].name === name) {
          return src[i];
        }
      }

      return null;
    };

    for (i = 0, ien = heir.length; i < ien; i++) {
      method = heir[i].indexOf('()') !== -1;
      key = method ? heir[i].replace('()', '') : heir[i];
      var src = find(struct, key);

      if (!src) {
        src = {
          name: key,
          val: {},
          methodExt: [],
          propExt: []
        };
        struct.push(src);
      }

      if (i === ien - 1) {
        src.val = val;
      } else {
        struct = method ? src.methodExt : src.propExt;
      }
    }
  };

  _Api2.registerPlural = _api_registerPlural = function _api_registerPlural(pluralName, singularName, val) {
    _Api2.register(pluralName, val);

    _Api2.register(singularName, function () {
      var ret = val.apply(this, arguments);

      if (ret === this) {
        // Returned item is the API instance that was passed in, return it
        return this;
      } else if (ret instanceof _Api2) {
        // New API instance returned, want the value from the first item
        // in the returned array for the singular result.
        return ret.length ? $.isArray(ret[0]) ? new _Api2(ret.context, ret[0]) : // Array results are 'enhanced'
        ret[0] : undefined;
      } // Non-API return - just fire it back


      return ret;
    });
  };
  /**
   * Selector for HTML tables. Apply the given selector to the give array of
   * DataTables settings objects.
   *
   * @param {string|integer} [selector] jQuery selector string or integer
   * @param  {array} Array of DataTables settings objects to be filtered
   * @return {array}
   * @ignore
   */


  var __table_selector = function __table_selector(selector, a) {
    // Integer is used to pick out a table by index
    if (typeof selector === 'number') {
      return [a[selector]];
    } // Perform a jQuery selector on the table nodes


    var nodes = $.map(a, function (el, i) {
      return el.nTable;
    });
    return $(nodes).filter(selector).map(function (i) {
      // Need to translate back from the table node to the settings
      var idx = $.inArray(this, nodes);
      return a[idx];
    }).toArray();
  };
  /**
   * Context selector for the API's context (i.e. the tables the API instance
   * refers to.
   *
   * @name    DataTable.Api#tables
   * @param {string|integer} [selector] Selector to pick which tables the iterator
   *   should operate on. If not given, all tables in the current context are
   *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
   *   select multiple tables or as an integer to select a single table.
   * @returns {DataTable.Api} Returns a new API instance if a selector is given.
   */


  _api_register('tables()', function (selector) {
    // A new instance is created if there was a selector specified
    return selector ? new _Api2(__table_selector(selector, this.context)) : this;
  });

  _api_register('table()', function (selector) {
    var tables = this.tables(selector);
    var ctx = tables.context; // Truncate to the first matched table

    return ctx.length ? new _Api2(ctx[0]) : tables;
  });

  _api_registerPlural('tables().nodes()', 'table().node()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTable;
    }, 1);
  });

  _api_registerPlural('tables().body()', 'table().body()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTBody;
    }, 1);
  });

  _api_registerPlural('tables().header()', 'table().header()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTHead;
    }, 1);
  });

  _api_registerPlural('tables().footer()', 'table().footer()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTFoot;
    }, 1);
  });

  _api_registerPlural('tables().containers()', 'table().container()', function () {
    return this.iterator('table', function (ctx) {
      return ctx.nTableWrapper;
    }, 1);
  });
  /**
   * Redraw the tables in the current context.
   */


  _api_register('draw()', function (paging) {
    return this.iterator('table', function (settings) {
      if (paging === 'page') {
        _fnDraw(settings);
      } else {
        if (typeof paging === 'string') {
          paging = paging === 'full-hold' ? false : true;
        }

        _fnReDraw(settings, paging === false);
      }
    });
  });
  /**
   * Get the current page index.
   *
   * @return {integer} Current page index (zero based)
   */

  /**
  * Set the current page.
  *
  * Note that if you attempt to show a page which does not exist, DataTables will
  * not throw an error, but rather reset the paging.
  *
  * @param {integer|string} action The paging action to take. This can be one of:
  *  * `integer` - The page index to jump to
  *  * `string` - An action to take:
  *    * `first` - Jump to first page.
  *    * `next` - Jump to the next page
  *    * `previous` - Jump to previous page
  *    * `last` - Jump to the last page.
  * @returns {DataTables.Api} this
  */


  _api_register('page()', function (action) {
    if (action === undefined) {
      return this.page.info().page; // not an expensive call
    } // else, have an action to take on all tables


    return this.iterator('table', function (settings) {
      _fnPageChange(settings, action);
    });
  });
  /**
   * Paging information for the first table in the current context.
   *
   * If you require paging information for another table, use the `table()` method
   * with a suitable selector.
   *
   * @return {object} Object with the following properties set:
   *  * `page` - Current page index (zero based - i.e. the first page is `0`)
   *  * `pages` - Total number of pages
   *  * `start` - Display index for the first record shown on the current page
   *  * `end` - Display index for the last record shown on the current page
   *  * `length` - Display length (number of records). Note that generally `start
   *    + length = end`, but this is not always true, for example if there are
   *    only 2 records to show on the final page, with a length of 10.
   *  * `recordsTotal` - Full data set length
   *  * `recordsDisplay` - Data set length once the current filtering criterion
   *    are applied.
   */


  _api_register('page.info()', function (action) {
    if (this.context.length === 0) {
      return undefined;
    }

    var settings = this.context[0],
        start = settings._iDisplayStart,
        len = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
        visRecords = settings.fnRecordsDisplay(),
        all = len === -1;
    return {
      "page": all ? 0 : Math.floor(start / len),
      "pages": all ? 1 : Math.ceil(visRecords / len),
      "start": start,
      "end": settings.fnDisplayEnd(),
      "length": len,
      "recordsTotal": settings.fnRecordsTotal(),
      "recordsDisplay": visRecords,
      "serverSide": _fnDataSource(settings) === 'ssp'
    };
  });
  /**
   * Get the current page length.
   *
   * @return {integer} Current page length. Note `-1` indicates that all records
   *   are to be shown.
   */

  /**
  * Set the current page length.
  *
  * @param {integer} Page length to set. Use `-1` to show all records.
  * @returns {DataTables.Api} this
  */


  _api_register('page.len()', function (len) {
    // Note that we can't call this function 'length()' because `length`
    // is a Javascript property of functions which defines how many arguments
    // the function expects.
    if (len === undefined) {
      return this.context.length !== 0 ? this.context[0]._iDisplayLength : undefined;
    } // else, set the page length


    return this.iterator('table', function (settings) {
      _fnLengthChange(settings, len);
    });
  });

  var __reload = function __reload(settings, holdPosition, callback) {
    // Use the draw event to trigger a callback
    if (callback) {
      var api = new _Api2(settings);
      api.one('draw', function () {
        callback(api.ajax.json());
      });
    }

    if (_fnDataSource(settings) == 'ssp') {
      _fnReDraw(settings, holdPosition);
    } else {
      _fnProcessingDisplay(settings, true); // Cancel an existing request


      var xhr = settings.jqXHR;

      if (xhr && xhr.readyState !== 4) {
        xhr.abort();
      } // Trigger xhr


      _fnBuildAjax(settings, [], function (json) {
        _fnClearTable(settings);

        var data = _fnAjaxDataSrc(settings, json);

        for (var i = 0, ien = data.length; i < ien; i++) {
          _fnAddData(settings, data[i]);
        }

        _fnReDraw(settings, holdPosition);

        _fnProcessingDisplay(settings, false);
      });
    }
  };
  /**
   * Get the JSON response from the last Ajax request that DataTables made to the
   * server. Note that this returns the JSON from the first table in the current
   * context.
   *
   * @return {object} JSON received from the server.
   */


  _api_register('ajax.json()', function () {
    var ctx = this.context;

    if (ctx.length > 0) {
      return ctx[0].json;
    } // else return undefined;

  });
  /**
   * Get the data submitted in the last Ajax request
   */


  _api_register('ajax.params()', function () {
    var ctx = this.context;

    if (ctx.length > 0) {
      return ctx[0].oAjaxData;
    } // else return undefined;

  });
  /**
   * Reload tables from the Ajax data source. Note that this function will
   * automatically re-draw the table when the remote data has been loaded.
   *
   * @param {boolean} [reset=true] Reset (default) or hold the current paging
   *   position. A full re-sort and re-filter is performed when this method is
   *   called, which is why the pagination reset is the default action.
   * @returns {DataTables.Api} this
   */


  _api_register('ajax.reload()', function (callback, resetPaging) {
    return this.iterator('table', function (settings) {
      __reload(settings, resetPaging === false, callback);
    });
  });
  /**
   * Get the current Ajax URL. Note that this returns the URL from the first
   * table in the current context.
   *
   * @return {string} Current Ajax source URL
   */

  /**
  * Set the Ajax URL. Note that this will set the URL for all tables in the
  * current context.
  *
  * @param {string} url URL to set.
  * @returns {DataTables.Api} this
  */


  _api_register('ajax.url()', function (url) {
    var ctx = this.context;

    if (url === undefined) {
      // get
      if (ctx.length === 0) {
        return undefined;
      }

      ctx = ctx[0];
      return ctx.ajax ? $.isPlainObject(ctx.ajax) ? ctx.ajax.url : ctx.ajax : ctx.sAjaxSource;
    } // set


    return this.iterator('table', function (settings) {
      if ($.isPlainObject(settings.ajax)) {
        settings.ajax.url = url;
      } else {
        settings.ajax = url;
      } // No need to consider sAjaxSource here since DataTables gives priority
      // to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
      // value of `sAjaxSource` redundant.

    });
  });
  /**
   * Load data from the newly set Ajax URL. Note that this method is only
   * available when `ajax.url()` is used to set a URL. Additionally, this method
   * has the same effect as calling `ajax.reload()` but is provided for
   * convenience when setting a new URL. Like `ajax.reload()` it will
   * automatically redraw the table once the remote data has been loaded.
   *
   * @returns {DataTables.Api} this
   */


  _api_register('ajax.url().load()', function (callback, resetPaging) {
    // Same as a reload, but makes sense to present it for easy access after a
    // url change
    return this.iterator('table', function (ctx) {
      __reload(ctx, resetPaging === false, callback);
    });
  });

  var _selector_run = function _selector_run(type, selector, selectFn, settings, opts) {
    var out = [],
        res,
        a,
        i,
        ien,
        j,
        jen,
        selectorType = _typeof(selector); // Can't just check for isArray here, as an API or jQuery instance might be
    // given with their array like look


    if (!selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined) {
      selector = [selector];
    }

    for (i = 0, ien = selector.length; i < ien; i++) {
      // Only split on simple strings - complex expressions will be jQuery selectors
      a = selector[i] && selector[i].split && !selector[i].match(/[\[\(:]/) ? selector[i].split(',') : [selector[i]];

      for (j = 0, jen = a.length; j < jen; j++) {
        res = selectFn(typeof a[j] === 'string' ? $.trim(a[j]) : a[j]);

        if (res && res.length) {
          out = out.concat(res);
        }
      }
    } // selector extensions


    var ext = _ext.selector[type];

    if (ext.length) {
      for (i = 0, ien = ext.length; i < ien; i++) {
        out = ext[i](settings, opts, out);
      }
    }

    return _unique(out);
  };

  var _selector_opts = function _selector_opts(opts) {
    if (!opts) {
      opts = {};
    } // Backwards compatibility for 1.9- which used the terminology filter rather
    // than search


    if (opts.filter && opts.search === undefined) {
      opts.search = opts.filter;
    }

    return $.extend({
      search: 'none',
      order: 'current',
      page: 'all'
    }, opts);
  };

  var _selector_first = function _selector_first(inst) {
    // Reduce the API instance to the first item found
    for (var i = 0, ien = inst.length; i < ien; i++) {
      if (inst[i].length > 0) {
        // Assign the first element to the first item in the instance
        // and truncate the instance and context
        inst[0] = inst[i];
        inst[0].length = 1;
        inst.length = 1;
        inst.context = [inst.context[i]];
        return inst;
      }
    } // Not found - return an empty instance


    inst.length = 0;
    return inst;
  };

  var _selector_row_indexes = function _selector_row_indexes(settings, opts) {
    var i,
        ien,
        tmp,
        a = [],
        displayFiltered = settings.aiDisplay,
        displayMaster = settings.aiDisplayMaster;
    var search = opts.search,
        // none, applied, removed
    order = opts.order,
        // applied, current, index (original - compatibility with 1.9)
    page = opts.page; // all, current

    if (_fnDataSource(settings) == 'ssp') {
      // In server-side processing mode, most options are irrelevant since
      // rows not shown don't exist and the index order is the applied order
      // Removed is a special case - for consistency just return an empty
      // array
      return search === 'removed' ? [] : _range(0, displayMaster.length);
    } else if (page == 'current') {
      // Current page implies that order=current and fitler=applied, since it is
      // fairly senseless otherwise, regardless of what order and search actually
      // are
      for (i = settings._iDisplayStart, ien = settings.fnDisplayEnd(); i < ien; i++) {
        a.push(displayFiltered[i]);
      }
    } else if (order == 'current' || order == 'applied') {
      a = search == 'none' ? displayMaster.slice() : // no search
      search == 'applied' ? displayFiltered.slice() : // applied search
      $.map(displayMaster, function (el, i) {
        // removed search
        return $.inArray(el, displayFiltered) === -1 ? el : null;
      });
    } else if (order == 'index' || order == 'original') {
      for (i = 0, ien = settings.aoData.length; i < ien; i++) {
        if (search == 'none') {
          a.push(i);
        } else {
          // applied | removed
          tmp = $.inArray(i, displayFiltered);

          if (tmp === -1 && search == 'removed' || tmp >= 0 && search == 'applied') {
            a.push(i);
          }
        }
      }
    }

    return a;
  };
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Rows
   *
   * {}          - no selector - use all available rows
   * {integer}   - row aoData index
   * {node}      - TR node
   * {string}    - jQuery selector to apply to the TR elements
   * {array}     - jQuery array of nodes, or simply an array of TR nodes
   *
   */


  var __row_selector = function __row_selector(settings, selector, opts) {
    var rows;

    var run = function run(sel) {
      var selInt = _intVal(sel);

      var i, ien; // Short cut - selector is a number and no options provided (default is
      // all records, so no need to check if the index is in there, since it
      // must be - dev error if the index doesn't exist).

      if (selInt !== null && !opts) {
        return [selInt];
      }

      if (!rows) {
        rows = _selector_row_indexes(settings, opts);
      }

      if (selInt !== null && $.inArray(selInt, rows) !== -1) {
        // Selector - integer
        return [selInt];
      } else if (sel === null || sel === undefined || sel === '') {
        // Selector - none
        return rows;
      } // Selector - function


      if (typeof sel === 'function') {
        return $.map(rows, function (idx) {
          var row = settings.aoData[idx];
          return sel(idx, row._aData, row.nTr) ? idx : null;
        });
      } // Get nodes in the order from the `rows` array with null values removed


      var nodes = _removeEmpty(_pluck_order(settings.aoData, rows, 'nTr')); // Selector - node


      if (sel.nodeName) {
        if (sel._DT_RowIndex !== undefined) {
          return [sel._DT_RowIndex]; // Property added by DT for fast lookup
        } else if (sel._DT_CellIndex) {
          return [sel._DT_CellIndex.row];
        } else {
          var host = $(sel).closest('*[data-dt-row]');
          return host.length ? [host.data('dt-row')] : [];
        }
      } // ID selector. Want to always be able to select rows by id, regardless
      // of if the tr element has been created or not, so can't rely upon
      // jQuery here - hence a custom implementation. This does not match
      // Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
      // but to select it using a CSS selector engine (like Sizzle or
      // querySelect) it would need to need to be escaped for some characters.
      // DataTables simplifies this for row selectors since you can select
      // only a row. A # indicates an id any anything that follows is the id -
      // unescaped.


      if (typeof sel === 'string' && sel.charAt(0) === '#') {
        // get row index from id
        var rowObj = settings.aIds[sel.replace(/^#/, '')];

        if (rowObj !== undefined) {
          return [rowObj.idx];
        } // need to fall through to jQuery in case there is DOM id that
        // matches

      } // Selector - jQuery selector string, array of nodes or jQuery object/
      // As jQuery's .filter() allows jQuery objects to be passed in filter,
      // it also allows arrays, so this will cope with all three options


      return $(nodes).filter(sel).map(function () {
        return this._DT_RowIndex;
      }).toArray();
    };

    return _selector_run('row', selector, run, settings, opts);
  };

  _api_register('rows()', function (selector, opts) {
    // argument shifting
    if (selector === undefined) {
      selector = '';
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = '';
    }

    opts = _selector_opts(opts);
    var inst = this.iterator('table', function (settings) {
      return __row_selector(settings, selector, opts);
    }, 1); // Want argument shifting here and in __row_selector?

    inst.selector.rows = selector;
    inst.selector.opts = opts;
    return inst;
  });

  _api_register('rows().nodes()', function () {
    return this.iterator('row', function (settings, row) {
      return settings.aoData[row].nTr || undefined;
    }, 1);
  });

  _api_register('rows().data()', function () {
    return this.iterator(true, 'rows', function (settings, rows) {
      return _pluck_order(settings.aoData, rows, '_aData');
    }, 1);
  });

  _api_registerPlural('rows().cache()', 'row().cache()', function (type) {
    return this.iterator('row', function (settings, row) {
      var r = settings.aoData[row];
      return type === 'search' ? r._aFilterData : r._aSortData;
    }, 1);
  });

  _api_registerPlural('rows().invalidate()', 'row().invalidate()', function (src) {
    return this.iterator('row', function (settings, row) {
      _fnInvalidate(settings, row, src);
    });
  });

  _api_registerPlural('rows().indexes()', 'row().index()', function () {
    return this.iterator('row', function (settings, row) {
      return row;
    }, 1);
  });

  _api_registerPlural('rows().ids()', 'row().id()', function (hash) {
    var a = [];
    var context = this.context; // `iterator` will drop undefined values, but in this case we want them

    for (var i = 0, ien = context.length; i < ien; i++) {
      for (var j = 0, jen = this[i].length; j < jen; j++) {
        var id = context[i].rowIdFn(context[i].aoData[this[i][j]]._aData);
        a.push((hash === true ? '#' : '') + id);
      }
    }

    return new _Api2(context, a);
  });

  _api_registerPlural('rows().remove()', 'row().remove()', function () {
    var that = this;
    this.iterator('row', function (settings, row, thatIdx) {
      var data = settings.aoData;
      var rowData = data[row];
      var i, ien, j, jen;
      var loopRow, loopCells;
      data.splice(row, 1); // Update the cached indexes

      for (i = 0, ien = data.length; i < ien; i++) {
        loopRow = data[i];
        loopCells = loopRow.anCells; // Rows

        if (loopRow.nTr !== null) {
          loopRow.nTr._DT_RowIndex = i;
        } // Cells


        if (loopCells !== null) {
          for (j = 0, jen = loopCells.length; j < jen; j++) {
            loopCells[j]._DT_CellIndex.row = i;
          }
        }
      } // Delete from the display arrays


      _fnDeleteIndex(settings.aiDisplayMaster, row);

      _fnDeleteIndex(settings.aiDisplay, row);

      _fnDeleteIndex(that[thatIdx], row, false); // maintain local indexes
      // For server-side processing tables - subtract the deleted row from the count


      if (settings._iRecordsDisplay > 0) {
        settings._iRecordsDisplay--;
      } // Check for an 'overflow' they case for displaying the table


      _fnLengthOverflow(settings); // Remove the row's ID reference if there is one


      var id = settings.rowIdFn(rowData._aData);

      if (id !== undefined) {
        delete settings.aIds[id];
      }
    });
    this.iterator('table', function (settings) {
      for (var i = 0, ien = settings.aoData.length; i < ien; i++) {
        settings.aoData[i].idx = i;
      }
    });
    return this;
  });

  _api_register('rows.add()', function (rows) {
    var newRows = this.iterator('table', function (settings) {
      var row, i, ien;
      var out = [];

      for (i = 0, ien = rows.length; i < ien; i++) {
        row = rows[i];

        if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
          out.push(_fnAddTr(settings, row)[0]);
        } else {
          out.push(_fnAddData(settings, row));
        }
      }

      return out;
    }, 1); // Return an Api.rows() extended instance, so rows().nodes() etc can be used

    var modRows = this.rows(-1);
    modRows.pop();
    $.merge(modRows, newRows);
    return modRows;
  });
  /**
   *
   */


  _api_register('row()', function (selector, opts) {
    return _selector_first(this.rows(selector, opts));
  });

  _api_register('row().data()', function (data) {
    var ctx = this.context;

    if (data === undefined) {
      // Get
      return ctx.length && this.length ? ctx[0].aoData[this[0]]._aData : undefined;
    } // Set


    ctx[0].aoData[this[0]]._aData = data; // Automatically invalidate

    _fnInvalidate(ctx[0], this[0], 'data');

    return this;
  });

  _api_register('row().node()', function () {
    var ctx = this.context;
    return ctx.length && this.length ? ctx[0].aoData[this[0]].nTr || null : null;
  });

  _api_register('row.add()', function (row) {
    // Allow a jQuery object to be passed in - only a single row is added from
    // it though - the first element in the set
    if (row instanceof $ && row.length) {
      row = row[0];
    }

    var rows = this.iterator('table', function (settings) {
      if (row.nodeName && row.nodeName.toUpperCase() === 'TR') {
        return _fnAddTr(settings, row)[0];
      }

      return _fnAddData(settings, row);
    }); // Return an Api.rows() extended instance, with the newly added row selected

    return this.row(rows[0]);
  });

  var __details_add = function __details_add(ctx, row, data, klass) {
    // Convert to array of TR elements
    var rows = [];

    var addRow = function addRow(r, k) {
      // Recursion to allow for arrays of jQuery objects
      if ($.isArray(r) || r instanceof $) {
        for (var i = 0, ien = r.length; i < ien; i++) {
          addRow(r[i], k);
        }

        return;
      } // If we get a TR element, then just add it directly - up to the dev
      // to add the correct number of columns etc


      if (r.nodeName && r.nodeName.toLowerCase() === 'tr') {
        rows.push(r);
      } else {
        // Otherwise create a row with a wrapper
        var created = $('<tr><td/></tr>').addClass(k);
        $('td', created).addClass(k).html(r)[0].colSpan = _fnVisbleColumns(ctx);
        rows.push(created[0]);
      }
    };

    addRow(data, klass);

    if (row._details) {
      row._details.detach();
    }

    row._details = $(rows); // If the children were already shown, that state should be retained

    if (row._detailsShow) {
      row._details.insertAfter(row.nTr);
    }
  };

  var __details_remove = function __details_remove(api, idx) {
    var ctx = api.context;

    if (ctx.length) {
      var row = ctx[0].aoData[idx !== undefined ? idx : api[0]];

      if (row && row._details) {
        row._details.remove();

        row._detailsShow = undefined;
        row._details = undefined;
      }
    }
  };

  var __details_display = function __details_display(api, show) {
    var ctx = api.context;

    if (ctx.length && api.length) {
      var row = ctx[0].aoData[api[0]];

      if (row._details) {
        row._detailsShow = show;

        if (show) {
          row._details.insertAfter(row.nTr);
        } else {
          row._details.detach();
        }

        __details_events(ctx[0]);
      }
    }
  };

  var __details_events = function __details_events(settings) {
    var api = new _Api2(settings);
    var namespace = '.dt.DT_details';
    var drawEvent = 'draw' + namespace;
    var colvisEvent = 'column-visibility' + namespace;
    var destroyEvent = 'destroy' + namespace;
    var data = settings.aoData;
    api.off(drawEvent + ' ' + colvisEvent + ' ' + destroyEvent);

    if (_pluck(data, '_details').length > 0) {
      // On each draw, insert the required elements into the document
      api.on(drawEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }

        api.rows({
          page: 'current'
        }).eq(0).each(function (idx) {
          // Internal data grab
          var row = data[idx];

          if (row._detailsShow) {
            row._details.insertAfter(row.nTr);
          }
        });
      }); // Column visibility change - update the colspan

      api.on(colvisEvent, function (e, ctx, idx, vis) {
        if (settings !== ctx) {
          return;
        } // Update the colspan for the details rows (note, only if it already has
        // a colspan)


        var row,
            visible = _fnVisbleColumns(ctx);

        for (var i = 0, ien = data.length; i < ien; i++) {
          row = data[i];

          if (row._details) {
            row._details.children('td[colspan]').attr('colspan', visible);
          }
        }
      }); // Table destroyed - nuke any child rows

      api.on(destroyEvent, function (e, ctx) {
        if (settings !== ctx) {
          return;
        }

        for (var i = 0, ien = data.length; i < ien; i++) {
          if (data[i]._details) {
            __details_remove(api, i);
          }
        }
      });
    }
  }; // Strings for the method names to help minification


  var _emp = '';

  var _child_obj = _emp + 'row().child';

  var _child_mth = _child_obj + '()'; // data can be:
  //  tr
  //  string
  //  jQuery or array of any of the above


  _api_register(_child_mth, function (data, klass) {
    var ctx = this.context;

    if (data === undefined) {
      // get
      return ctx.length && this.length ? ctx[0].aoData[this[0]]._details : undefined;
    } else if (data === true) {
      // show
      this.child.show();
    } else if (data === false) {
      // remove
      __details_remove(this);
    } else if (ctx.length && this.length) {
      // set
      __details_add(ctx[0], ctx[0].aoData[this[0]], data, klass);
    }

    return this;
  });

  _api_register([_child_obj + '.show()', _child_mth + '.show()' // only when `child()` was called with parameters (without
  ], function (show) {
    // it returns an object and this method is not executed)
    __details_display(this, true);

    return this;
  });

  _api_register([_child_obj + '.hide()', _child_mth + '.hide()' // only when `child()` was called with parameters (without
  ], function () {
    // it returns an object and this method is not executed)
    __details_display(this, false);

    return this;
  });

  _api_register([_child_obj + '.remove()', _child_mth + '.remove()' // only when `child()` was called with parameters (without
  ], function () {
    // it returns an object and this method is not executed)
    __details_remove(this);

    return this;
  });

  _api_register(_child_obj + '.isShown()', function () {
    var ctx = this.context;

    if (ctx.length && this.length) {
      // _detailsShown as false or undefined will fall through to return false
      return ctx[0].aoData[this[0]]._detailsShow || false;
    }

    return false;
  });
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   * Columns
   *
   * {integer}           - column index (>=0 count from left, <0 count from right)
   * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
   * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
   * "{string}:name"     - column name
   * "{string}"          - jQuery selector on column header nodes
   *
   */
  // can be an array of these items, comma separated list, or an array of comma
  // separated lists


  var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/; // r1 and r2 are redundant - but it means that the parameters match for the
  // iterator callback in columns().data()

  var __columnData = function __columnData(settings, column, r1, r2, rows) {
    var a = [];

    for (var row = 0, ien = rows.length; row < ien; row++) {
      a.push(_fnGetCellData(settings, rows[row], column));
    }

    return a;
  };

  var __column_selector = function __column_selector(settings, selector, opts) {
    var columns = settings.aoColumns,
        names = _pluck(columns, 'sName'),
        nodes = _pluck(columns, 'nTh');

    var run = function run(s) {
      var selInt = _intVal(s); // Selector - all


      if (s === '') {
        return _range(columns.length);
      } // Selector - index


      if (selInt !== null) {
        return [selInt >= 0 ? selInt : // Count from left
        columns.length + selInt // Count from right (+ because its a negative value)
        ];
      } // Selector = function


      if (typeof s === 'function') {
        var rows = _selector_row_indexes(settings, opts);

        return $.map(columns, function (col, idx) {
          return s(idx, __columnData(settings, idx, 0, 0, rows), nodes[idx]) ? idx : null;
        });
      } // jQuery or string selector


      var match = typeof s === 'string' ? s.match(__re_column_selector) : '';

      if (match) {
        switch (match[2]) {
          case 'visIdx':
          case 'visible':
            var idx = parseInt(match[1], 10); // Visible index given, convert to column index

            if (idx < 0) {
              // Counting from the right
              var visColumns = $.map(columns, function (col, i) {
                return col.bVisible ? i : null;
              });
              return [visColumns[visColumns.length + idx]];
            } // Counting from the left


            return [_fnVisibleToColumnIndex(settings, idx)];

          case 'name':
            // match by name. `names` is column index complete and in order
            return $.map(names, function (name, i) {
              return name === match[1] ? i : null;
            });

          default:
            return [];
        }
      } // Cell in the table body


      if (s.nodeName && s._DT_CellIndex) {
        return [s._DT_CellIndex.column];
      } // jQuery selector on the TH elements for the columns


      var jqResult = $(nodes).filter(s).map(function () {
        return $.inArray(this, nodes); // `nodes` is column index complete and in order
      }).toArray();

      if (jqResult.length || !s.nodeName) {
        return jqResult;
      } // Otherwise a node which might have a `dt-column` data attribute, or be
      // a child or such an element


      var host = $(s).closest('*[data-dt-column]');
      return host.length ? [host.data('dt-column')] : [];
    };

    return _selector_run('column', selector, run, settings, opts);
  };

  var __setColumnVis = function __setColumnVis(settings, column, vis) {
    var cols = settings.aoColumns,
        col = cols[column],
        data = settings.aoData,
        row,
        cells,
        i,
        ien,
        tr; // Get

    if (vis === undefined) {
      return col.bVisible;
    } // Set
    // No change


    if (col.bVisible === vis) {
      return;
    }

    if (vis) {
      // Insert column
      // Need to decide if we should use appendChild or insertBefore
      var insertBefore = $.inArray(true, _pluck(cols, 'bVisible'), column + 1);

      for (i = 0, ien = data.length; i < ien; i++) {
        tr = data[i].nTr;
        cells = data[i].anCells;

        if (tr) {
          // insertBefore can act like appendChild if 2nd arg is null
          tr.insertBefore(cells[column], cells[insertBefore] || null);
        }
      }
    } else {
      // Remove column
      $(_pluck(settings.aoData, 'anCells', column)).detach();
    } // Common actions


    col.bVisible = vis;

    _fnDrawHead(settings, settings.aoHeader);

    _fnDrawHead(settings, settings.aoFooter);

    _fnSaveState(settings);
  };

  _api_register('columns()', function (selector, opts) {
    // argument shifting
    if (selector === undefined) {
      selector = '';
    } else if ($.isPlainObject(selector)) {
      opts = selector;
      selector = '';
    }

    opts = _selector_opts(opts);
    var inst = this.iterator('table', function (settings) {
      return __column_selector(settings, selector, opts);
    }, 1); // Want argument shifting here and in _row_selector?

    inst.selector.cols = selector;
    inst.selector.opts = opts;
    return inst;
  });

  _api_registerPlural('columns().header()', 'column().header()', function (selector, opts) {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].nTh;
    }, 1);
  });

  _api_registerPlural('columns().footer()', 'column().footer()', function (selector, opts) {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].nTf;
    }, 1);
  });

  _api_registerPlural('columns().data()', 'column().data()', function () {
    return this.iterator('column-rows', __columnData, 1);
  });

  _api_registerPlural('columns().dataSrc()', 'column().dataSrc()', function () {
    return this.iterator('column', function (settings, column) {
      return settings.aoColumns[column].mData;
    }, 1);
  });

  _api_registerPlural('columns().cache()', 'column().cache()', function (type) {
    return this.iterator('column-rows', function (settings, column, i, j, rows) {
      return _pluck_order(settings.aoData, rows, type === 'search' ? '_aFilterData' : '_aSortData', column);
    }, 1);
  });

  _api_registerPlural('columns().nodes()', 'column().nodes()', function () {
    return this.iterator('column-rows', function (settings, column, i, j, rows) {
      return _pluck_order(settings.aoData, rows, 'anCells', column);
    }, 1);
  });

  _api_registerPlural('columns().visible()', 'column().visible()', function (vis, calc) {
    var ret = this.iterator('column', function (settings, column) {
      if (vis === undefined) {
        return settings.aoColumns[column].bVisible;
      } // else


      __setColumnVis(settings, column, vis);
    }); // Group the column visibility changes

    if (vis !== undefined) {
      // Second loop once the first is done for events
      this.iterator('column', function (settings, column) {
        _fnCallbackFire(settings, null, 'column-visibility', [settings, column, vis, calc]);
      });

      if (calc === undefined || calc) {
        this.columns.adjust();
      }
    }

    return ret;
  });

  _api_registerPlural('columns().indexes()', 'column().index()', function (type) {
    return this.iterator('column', function (settings, column) {
      return type === 'visible' ? _fnColumnIndexToVisible(settings, column) : column;
    }, 1);
  });

  _api_register('columns.adjust()', function () {
    return this.iterator('table', function (settings) {
      _fnAdjustColumnSizing(settings);
    }, 1);
  });

  _api_register('column.index()', function (type, idx) {
    if (this.context.length !== 0) {
      var ctx = this.context[0];

      if (type === 'fromVisible' || type === 'toData') {
        return _fnVisibleToColumnIndex(ctx, idx);
      } else if (type === 'fromData' || type === 'toVisible') {
        return _fnColumnIndexToVisible(ctx, idx);
      }
    }
  });

  _api_register('column()', function (selector, opts) {
    return _selector_first(this.columns(selector, opts));
  });

  var __cell_selector = function __cell_selector(settings, selector, opts) {
    var data = settings.aoData;

    var rows = _selector_row_indexes(settings, opts);

    var cells = _removeEmpty(_pluck_order(data, rows, 'anCells'));

    var allCells = $([].concat.apply([], cells));
    var row;
    var columns = settings.aoColumns.length;
    var a, i, ien, j, o, host;

    var run = function run(s) {
      var fnSelector = typeof s === 'function';

      if (s === null || s === undefined || fnSelector) {
        // All cells and function selectors
        a = [];

        for (i = 0, ien = rows.length; i < ien; i++) {
          row = rows[i];

          for (j = 0; j < columns; j++) {
            o = {
              row: row,
              column: j
            };

            if (fnSelector) {
              // Selector - function
              host = data[row];

              if (s(o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null)) {
                a.push(o);
              }
            } else {
              // Selector - all
              a.push(o);
            }
          }
        }

        return a;
      } // Selector - index


      if ($.isPlainObject(s)) {
        return [s];
      } // Selector - jQuery filtered cells


      var jqResult = allCells.filter(s).map(function (i, el) {
        return {
          // use a new object, in case someone changes the values
          row: el._DT_CellIndex.row,
          column: el._DT_CellIndex.column
        };
      }).toArray();

      if (jqResult.length || !s.nodeName) {
        return jqResult;
      } // Otherwise the selector is a node, and there is one last option - the
      // element might be a child of an element which has dt-row and dt-column
      // data attributes


      host = $(s).closest('*[data-dt-row]');
      return host.length ? [{
        row: host.data('dt-row'),
        column: host.data('dt-column')
      }] : [];
    };

    return _selector_run('cell', selector, run, settings, opts);
  };

  _api_register('cells()', function (rowSelector, columnSelector, opts) {
    // Argument shifting
    if ($.isPlainObject(rowSelector)) {
      // Indexes
      if (rowSelector.row === undefined) {
        // Selector options in first parameter
        opts = rowSelector;
        rowSelector = null;
      } else {
        // Cell index objects in first parameter
        opts = columnSelector;
        columnSelector = null;
      }
    }

    if ($.isPlainObject(columnSelector)) {
      opts = columnSelector;
      columnSelector = null;
    } // Cell selector


    if (columnSelector === null || columnSelector === undefined) {
      return this.iterator('table', function (settings) {
        return __cell_selector(settings, rowSelector, _selector_opts(opts));
      });
    } // Row + column selector


    var columns = this.columns(columnSelector, opts);
    var rows = this.rows(rowSelector, opts);
    var a, i, ien, j, jen;
    var cells = this.iterator('table', function (settings, idx) {
      a = [];

      for (i = 0, ien = rows[idx].length; i < ien; i++) {
        for (j = 0, jen = columns[idx].length; j < jen; j++) {
          a.push({
            row: rows[idx][i],
            column: columns[idx][j]
          });
        }
      }

      return a;
    }, 1);
    $.extend(cells.selector, {
      cols: columnSelector,
      rows: rowSelector,
      opts: opts
    });
    return cells;
  });

  _api_registerPlural('cells().nodes()', 'cell().node()', function () {
    return this.iterator('cell', function (settings, row, column) {
      var data = settings.aoData[row];
      return data && data.anCells ? data.anCells[column] : undefined;
    }, 1);
  });

  _api_register('cells().data()', function () {
    return this.iterator('cell', function (settings, row, column) {
      return _fnGetCellData(settings, row, column);
    }, 1);
  });

  _api_registerPlural('cells().cache()', 'cell().cache()', function (type) {
    type = type === 'search' ? '_aFilterData' : '_aSortData';
    return this.iterator('cell', function (settings, row, column) {
      return settings.aoData[row][type][column];
    }, 1);
  });

  _api_registerPlural('cells().render()', 'cell().render()', function (type) {
    return this.iterator('cell', function (settings, row, column) {
      return _fnGetCellData(settings, row, column, type);
    }, 1);
  });

  _api_registerPlural('cells().indexes()', 'cell().index()', function () {
    return this.iterator('cell', function (settings, row, column) {
      return {
        row: row,
        column: column,
        columnVisible: _fnColumnIndexToVisible(settings, column)
      };
    }, 1);
  });

  _api_registerPlural('cells().invalidate()', 'cell().invalidate()', function (src) {
    return this.iterator('cell', function (settings, row, column) {
      _fnInvalidate(settings, row, src, column);
    });
  });

  _api_register('cell()', function (rowSelector, columnSelector, opts) {
    return _selector_first(this.cells(rowSelector, columnSelector, opts));
  });

  _api_register('cell().data()', function (data) {
    var ctx = this.context;
    var cell = this[0];

    if (data === undefined) {
      // Get
      return ctx.length && cell.length ? _fnGetCellData(ctx[0], cell[0].row, cell[0].column) : undefined;
    } // Set


    _fnSetCellData(ctx[0], cell[0].row, cell[0].column, data);

    _fnInvalidate(ctx[0], cell[0].row, 'data', cell[0].column);

    return this;
  });
  /**
   * Get current ordering (sorting) that has been applied to the table.
   *
   * @returns {array} 2D array containing the sorting information for the first
   *   table in the current context. Each element in the parent array represents
   *   a column being sorted upon (i.e. multi-sorting with two columns would have
   *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
   *   the column index that the sorting condition applies to, the second is the
   *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
   *   index of the sorting order from the `column.sorting` initialisation array.
   */

  /**
  * Set the ordering for the table.
  *
  * @param {integer} order Column index to sort upon.
  * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
  * @returns {DataTables.Api} this
  */

  /**
  * Set the ordering for the table.
  *
  * @param {array} order 1D array of sorting information to be applied.
  * @param {array} [...] Optional additional sorting conditions
  * @returns {DataTables.Api} this
  */

  /**
  * Set the ordering for the table.
  *
  * @param {array} order 2D array of sorting information to be applied.
  * @returns {DataTables.Api} this
  */


  _api_register('order()', function (order, dir) {
    var ctx = this.context;

    if (order === undefined) {
      // get
      return ctx.length !== 0 ? ctx[0].aaSorting : undefined;
    } // set


    if (typeof order === 'number') {
      // Simple column / direction passed in
      order = [[order, dir]];
    } else if (order.length && !$.isArray(order[0])) {
      // Arguments passed in (list of 1D arrays)
      order = Array.prototype.slice.call(arguments);
    } // otherwise a 2D array was passed in


    return this.iterator('table', function (settings) {
      settings.aaSorting = order.slice();
    });
  });
  /**
   * Attach a sort listener to an element for a given column
   *
   * @param {node|jQuery|string} node Identifier for the element(s) to attach the
   *   listener to. This can take the form of a single DOM node, a jQuery
   *   collection of nodes or a jQuery selector which will identify the node(s).
   * @param {integer} column the column that a click on this node will sort on
   * @param {function} [callback] callback function when sort is run
   * @returns {DataTables.Api} this
   */


  _api_register('order.listener()', function (node, column, callback) {
    return this.iterator('table', function (settings) {
      _fnSortAttachListener(settings, node, column, callback);
    });
  });

  _api_register('order.fixed()', function (set) {
    if (!set) {
      var ctx = this.context;
      var fixed = ctx.length ? ctx[0].aaSortingFixed : undefined;
      return $.isArray(fixed) ? {
        pre: fixed
      } : fixed;
    }

    return this.iterator('table', function (settings) {
      settings.aaSortingFixed = $.extend(true, {}, set);
    });
  }); // Order by the selected column(s)


  _api_register(['columns().order()', 'column().order()'], function (dir) {
    var that = this;
    return this.iterator('table', function (settings, i) {
      var sort = [];
      $.each(that[i], function (j, col) {
        sort.push([col, dir]);
      });
      settings.aaSorting = sort;
    });
  });

  _api_register('search()', function (input, regex, smart, caseInsen) {
    var ctx = this.context;

    if (input === undefined) {
      // get
      return ctx.length !== 0 ? ctx[0].oPreviousSearch.sSearch : undefined;
    } // set


    return this.iterator('table', function (settings) {
      if (!settings.oFeatures.bFilter) {
        return;
      }

      _fnFilterComplete(settings, $.extend({}, settings.oPreviousSearch, {
        "sSearch": input + "",
        "bRegex": regex === null ? false : regex,
        "bSmart": smart === null ? true : smart,
        "bCaseInsensitive": caseInsen === null ? true : caseInsen
      }), 1);
    });
  });

  _api_registerPlural('columns().search()', 'column().search()', function (input, regex, smart, caseInsen) {
    return this.iterator('column', function (settings, column) {
      var preSearch = settings.aoPreSearchCols;

      if (input === undefined) {
        // get
        return preSearch[column].sSearch;
      } // set


      if (!settings.oFeatures.bFilter) {
        return;
      }

      $.extend(preSearch[column], {
        "sSearch": input + "",
        "bRegex": regex === null ? false : regex,
        "bSmart": smart === null ? true : smart,
        "bCaseInsensitive": caseInsen === null ? true : caseInsen
      });

      _fnFilterComplete(settings, settings.oPreviousSearch, 1);
    });
  });
  /*
   * State API methods
   */


  _api_register('state()', function () {
    return this.context.length ? this.context[0].oSavedState : null;
  });

  _api_register('state.clear()', function () {
    return this.iterator('table', function (settings) {
      // Save an empty object
      settings.fnStateSaveCallback.call(settings.oInstance, settings, {});
    });
  });

  _api_register('state.loaded()', function () {
    return this.context.length ? this.context[0].oLoadedState : null;
  });

  _api_register('state.save()', function () {
    return this.iterator('table', function (settings) {
      _fnSaveState(settings);
    });
  });
  /**
   * Provide a common method for plug-ins to check the version of DataTables being
   * used, in order to ensure compatibility.
   *
   *  @param {string} version Version string to check for, in the format "X.Y.Z".
   *    Note that the formats "X" and "X.Y" are also acceptable.
   *  @returns {boolean} true if this version of DataTables is greater or equal to
   *    the required version, or false if this version of DataTales is not
   *    suitable
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
   */


  DataTable.versionCheck = DataTable.fnVersionCheck = function (version) {
    var aThis = DataTable.version.split('.');
    var aThat = version.split('.');
    var iThis, iThat;

    for (var i = 0, iLen = aThat.length; i < iLen; i++) {
      iThis = parseInt(aThis[i], 10) || 0;
      iThat = parseInt(aThat[i], 10) || 0; // Parts are the same, keep comparing

      if (iThis === iThat) {
        continue;
      } // Parts are different, return immediately


      return iThis > iThat;
    }

    return true;
  };
  /**
   * Check if a `<table>` node is a DataTable table already or not.
   *
   *  @param {node|jquery|string} table Table node, jQuery object or jQuery
   *      selector for the table to test. Note that if more than more than one
   *      table is passed on, only the first will be checked
   *  @returns {boolean} true the table given is a DataTable, or false otherwise
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
   *      $('#example').dataTable();
   *    }
   */


  DataTable.isDataTable = DataTable.fnIsDataTable = function (table) {
    var t = $(table).get(0);
    var is = false;

    if (table instanceof DataTable.Api) {
      return true;
    }

    $.each(DataTable.settings, function (i, o) {
      var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
      var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;

      if (o.nTable === t || head === t || foot === t) {
        is = true;
      }
    });
    return is;
  };
  /**
   * Get all DataTable tables that have been initialised - optionally you can
   * select to get only currently visible tables.
   *
   *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
   *    or visible tables only.
   *  @returns {array} Array of `table` nodes (not DataTable instances) which are
   *    DataTables
   *  @static
   *  @dtopt API-Static
   *
   *  @example
   *    $.each( $.fn.dataTable.tables(true), function () {
   *      $(table).DataTable().columns.adjust();
   *    } );
   */


  DataTable.tables = DataTable.fnTables = function (visible) {
    var api = false;

    if ($.isPlainObject(visible)) {
      api = visible.api;
      visible = visible.visible;
    }

    var a = $.map(DataTable.settings, function (o) {
      if (!visible || visible && $(o.nTable).is(':visible')) {
        return o.nTable;
      }
    });
    return api ? new _Api2(a) : a;
  };
  /**
   * Convert from camel case parameters to Hungarian notation. This is made public
   * for the extensions to provide the same ability as DataTables core to accept
   * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
   * parameters.
   *
   *  @param {object} src The model object which holds all parameters that can be
   *    mapped.
   *  @param {object} user The object to convert from camel case to Hungarian.
   *  @param {boolean} force When set to `true`, properties which already have a
   *    Hungarian value in the `user` object will be overwritten. Otherwise they
   *    won't be.
   */


  DataTable.camelToHungarian = _fnCamelToHungarian;
  /**
   *
   */

  _api_register('$()', function (selector, opts) {
    var rows = this.rows(opts).nodes(),
        // Get all rows
    jqRows = $(rows);
    return $([].concat(jqRows.filter(selector).toArray(), jqRows.find(selector).toArray()));
  }); // jQuery functions to operate on the tables


  $.each(['on', 'one', 'off'], function (i, key) {
    _api_register(key + '()', function ()
    /* event, handler */
    {
      var args = Array.prototype.slice.call(arguments); // Add the `dt` namespace automatically if it isn't already present

      args[0] = $.map(args[0].split(/\s/), function (e) {
        return !e.match(/\.dt\b/) ? e + '.dt' : e;
      }).join(' ');
      var inst = $(this.tables().nodes());
      inst[key].apply(inst, args);
      return this;
    });
  });

  _api_register('clear()', function () {
    return this.iterator('table', function (settings) {
      _fnClearTable(settings);
    });
  });

  _api_register('settings()', function () {
    return new _Api2(this.context, this.context);
  });

  _api_register('init()', function () {
    var ctx = this.context;
    return ctx.length ? ctx[0].oInit : null;
  });

  _api_register('data()', function () {
    return this.iterator('table', function (settings) {
      return _pluck(settings.aoData, '_aData');
    }).flatten();
  });

  _api_register('destroy()', function (remove) {
    remove = remove || false;
    return this.iterator('table', function (settings) {
      var orig = settings.nTableWrapper.parentNode;
      var classes = settings.oClasses;
      var table = settings.nTable;
      var tbody = settings.nTBody;
      var thead = settings.nTHead;
      var tfoot = settings.nTFoot;
      var jqTable = $(table);
      var jqTbody = $(tbody);
      var jqWrapper = $(settings.nTableWrapper);
      var rows = $.map(settings.aoData, function (r) {
        return r.nTr;
      });
      var i, ien; // Flag to note that the table is currently being destroyed - no action
      // should be taken

      settings.bDestroying = true; // Fire off the destroy callbacks for plug-ins etc

      _fnCallbackFire(settings, "aoDestroyCallback", "destroy", [settings]); // If not being removed from the document, make all columns visible


      if (!remove) {
        new _Api2(settings).columns().visible(true);
      } // Blitz all `DT` namespaced events (these are internal events, the
      // lowercase, `dt` events are user subscribed and they are responsible
      // for removing them


      jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
      $(window).off('.DT-' + settings.sInstance); // When scrolling we had to break the table up - restore it

      if (table != thead.parentNode) {
        jqTable.children('thead').detach();
        jqTable.append(thead);
      }

      if (tfoot && table != tfoot.parentNode) {
        jqTable.children('tfoot').detach();
        jqTable.append(tfoot);
      }

      settings.aaSorting = [];
      settings.aaSortingFixed = [];

      _fnSortingClasses(settings);

      $(rows).removeClass(settings.asStripeClasses.join(' '));
      $('th, td', thead).removeClass(classes.sSortable + ' ' + classes.sSortableAsc + ' ' + classes.sSortableDesc + ' ' + classes.sSortableNone); // Add the TR elements back into the table in their original order

      jqTbody.children().detach();
      jqTbody.append(rows); // Remove the DataTables generated nodes, events and classes

      var removedMethod = remove ? 'remove' : 'detach';
      jqTable[removedMethod]();
      jqWrapper[removedMethod](); // If we need to reattach the table to the document

      if (!remove && orig) {
        // insertBefore acts like appendChild if !arg[1]
        orig.insertBefore(table, settings.nTableReinsertBefore); // Restore the width of the original table - was read from the style property,
        // so we can restore directly to that

        jqTable.css('width', settings.sDestroyWidth).removeClass(classes.sTable); // If the were originally stripe classes - then we add them back here.
        // Note this is not fool proof (for example if not all rows had stripe
        // classes - but it's a good effort without getting carried away

        ien = settings.asDestroyStripes.length;

        if (ien) {
          jqTbody.children().each(function (i) {
            $(this).addClass(settings.asDestroyStripes[i % ien]);
          });
        }
      }
      /* Remove the settings object from the settings array */


      var idx = $.inArray(settings, DataTable.settings);

      if (idx !== -1) {
        DataTable.settings.splice(idx, 1);
      }
    });
  }); // Add the `every()` method for rows, columns and cells in a compact form


  $.each(['column', 'row', 'cell'], function (i, type) {
    _api_register(type + 's().every()', function (fn) {
      var opts = this.selector.opts;
      var api = this;
      return this.iterator(type, function (settings, arg1, arg2, arg3, arg4) {
        // Rows and columns:
        //  arg1 - index
        //  arg2 - table counter
        //  arg3 - loop counter
        //  arg4 - undefined
        // Cells:
        //  arg1 - row index
        //  arg2 - column index
        //  arg3 - table counter
        //  arg4 - loop counter
        fn.call(api[type](arg1, type === 'cell' ? arg2 : opts, type === 'cell' ? opts : undefined), arg1, arg2, arg3, arg4);
      });
    });
  }); // i18n method for extensions to be able to use the language object from the
  // DataTable

  _api_register('i18n()', function (token, def, plural) {
    var ctx = this.context[0];

    var resolved = _fnGetObjectDataFn(token)(ctx.oLanguage);

    if (resolved === undefined) {
      resolved = def;
    }

    if (plural !== undefined && $.isPlainObject(resolved)) {
      resolved = resolved[plural] !== undefined ? resolved[plural] : resolved._;
    }

    return resolved.replace('%d', plural); // nb: plural might be undefined,
  });
  /**
   * Version string for plug-ins to check compatibility. Allowed format is
   * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
   * only for non-release builds. See http://semver.org/ for more information.
   *  @member
   *  @type string
   *  @default Version number
   */


  DataTable.version = "1.10.16";
  /**
   * Private data store, containing all of the settings objects that are
   * created for the tables on a given page.
   *
   * Note that the `DataTable.settings` object is aliased to
   * `jQuery.fn.dataTableExt` through which it may be accessed and
   * manipulated, or `jQuery.fn.dataTable.settings`.
   *  @member
   *  @type array
   *  @default []
   *  @private
   */

  DataTable.settings = [];
  /**
   * Object models container, for the various models that DataTables has
   * available to it. These models define the objects that are used to hold
   * the active state and configuration of the table.
   *  @namespace
   */

  DataTable.models = {};
  /**
   * Template object for the way in which DataTables holds information about
   * search information for the global filter and individual column filters.
   *  @namespace
   */

  DataTable.models.oSearch = {
    /**
     * Flag to indicate if the filtering should be case insensitive or not
     *  @type boolean
     *  @default true
     */
    "bCaseInsensitive": true,

    /**
     * Applied search term
     *  @type string
     *  @default <i>Empty string</i>
     */
    "sSearch": "",

    /**
     * Flag to indicate if the search term should be interpreted as a
     * regular expression (true) or not (false) and therefore and special
     * regex characters escaped.
     *  @type boolean
     *  @default false
     */
    "bRegex": false,

    /**
     * Flag to indicate if DataTables is to use its smart filtering or not.
     *  @type boolean
     *  @default true
     */
    "bSmart": true
  };
  /**
   * Template object for the way in which DataTables holds information about
   * each individual row. This is the object format used for the settings
   * aoData array.
   *  @namespace
   */

  DataTable.models.oRow = {
    /**
     * TR element for the row
     *  @type node
     *  @default null
     */
    "nTr": null,

    /**
     * Array of TD elements for each row. This is null until the row has been
     * created.
     *  @type array nodes
     *  @default []
     */
    "anCells": null,

    /**
     * Data object from the original data source for the row. This is either
     * an array if using the traditional form of DataTables, or an object if
     * using mData options. The exact type will depend on the passed in
     * data from the data source, or will be an array if using DOM a data
     * source.
     *  @type array|object
     *  @default []
     */
    "_aData": [],

    /**
     * Sorting data cache - this array is ostensibly the same length as the
     * number of columns (although each index is generated only as it is
     * needed), and holds the data that is used for sorting each column in the
     * row. We do this cache generation at the start of the sort in order that
     * the formatting of the sort data need be done only once for each cell
     * per sort. This array should not be read from or written to by anything
     * other than the master sorting methods.
     *  @type array
     *  @default null
     *  @private
     */
    "_aSortData": null,

    /**
     * Per cell filtering data cache. As per the sort data cache, used to
     * increase the performance of the filtering in DataTables
     *  @type array
     *  @default null
     *  @private
     */
    "_aFilterData": null,

    /**
     * Filtering data cache. This is the same as the cell filtering cache, but
     * in this case a string rather than an array. This is easily computed with
     * a join on `_aFilterData`, but is provided as a cache so the join isn't
     * needed on every search (memory traded for performance)
     *  @type array
     *  @default null
     *  @private
     */
    "_sFilterRow": null,

    /**
     * Cache of the class name that DataTables has applied to the row, so we
     * can quickly look at this variable rather than needing to do a DOM check
     * on className for the nTr property.
     *  @type string
     *  @default <i>Empty string</i>
     *  @private
     */
    "_sRowStripe": "",

    /**
     * Denote if the original data source was from the DOM, or the data source
     * object. This is used for invalidating data, so DataTables can
     * automatically read data from the original source, unless uninstructed
     * otherwise.
     *  @type string
     *  @default null
     *  @private
     */
    "src": null,

    /**
     * Index in the aoData array. This saves an indexOf lookup when we have the
     * object, but want to know the index
     *  @type integer
     *  @default -1
     *  @private
     */
    "idx": -1
  };
  /**
   * Template object for the column information object in DataTables. This object
   * is held in the settings aoColumns array and contains all the information that
   * DataTables needs about each individual column.
   *
   * Note that this object is related to {@link DataTable.defaults.column}
   * but this one is the internal data store for DataTables's cache of columns.
   * It should NOT be manipulated outside of DataTables. Any configuration should
   * be done through the initialisation options.
   *  @namespace
   */

  DataTable.models.oColumn = {
    /**
     * Column index. This could be worked out on-the-fly with $.inArray, but it
     * is faster to just hold it as a variable
     *  @type integer
     *  @default null
     */
    "idx": null,

    /**
     * A list of the columns that sorting should occur on when this column
     * is sorted. That this property is an array allows multi-column sorting
     * to be defined for a column (for example first name / last name columns
     * would benefit from this). The values are integers pointing to the
     * columns to be sorted on (typically it will be a single integer pointing
     * at itself, but that doesn't need to be the case).
     *  @type array
     */
    "aDataSort": null,

    /**
     * Define the sorting directions that are applied to the column, in sequence
     * as the column is repeatedly sorted upon - i.e. the first value is used
     * as the sorting direction when the column if first sorted (clicked on).
     * Sort it again (click again) and it will move on to the next index.
     * Repeat until loop.
     *  @type array
     */
    "asSorting": null,

    /**
     * Flag to indicate if the column is searchable, and thus should be included
     * in the filtering or not.
     *  @type boolean
     */
    "bSearchable": null,

    /**
     * Flag to indicate if the column is sortable or not.
     *  @type boolean
     */
    "bSortable": null,

    /**
     * Flag to indicate if the column is currently visible in the table or not
     *  @type boolean
     */
    "bVisible": null,

    /**
     * Store for manual type assignment using the `column.type` option. This
     * is held in store so we can manipulate the column's `sType` property.
     *  @type string
     *  @default null
     *  @private
     */
    "_sManualType": null,

    /**
     * Flag to indicate if HTML5 data attributes should be used as the data
     * source for filtering or sorting. True is either are.
     *  @type boolean
     *  @default false
     *  @private
     */
    "_bAttrSrc": false,

    /**
     * Developer definable function that is called whenever a cell is created (Ajax source,
     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
     * allowing you to modify the DOM element (add background colour for example) when the
     * element is available.
     *  @type function
     *  @param {element} nTd The TD node that has been created
     *  @param {*} sData The Data for the cell
     *  @param {array|object} oData The data for the whole row
     *  @param {int} iRow The row index for the aoData data store
     *  @default null
     */
    "fnCreatedCell": null,

    /**
     * Function to get data from a cell in a column. You should <b>never</b>
     * access data directly through _aData internally in DataTables - always use
     * the method attached to this property. It allows mData to function as
     * required. This function is automatically assigned by the column
     * initialisation method
     *  @type function
     *  @param {array|object} oData The data array/object for the array
     *    (i.e. aoData[]._aData)
     *  @param {string} sSpecific The specific data type you want to get -
     *    'display', 'type' 'filter' 'sort'
     *  @returns {*} The data for the cell from the given row's data
     *  @default null
     */
    "fnGetData": null,

    /**
     * Function to set data for a cell in the column. You should <b>never</b>
     * set the data directly to _aData internally in DataTables - always use
     * this method. It allows mData to function as required. This function
     * is automatically assigned by the column initialisation method
     *  @type function
     *  @param {array|object} oData The data array/object for the array
     *    (i.e. aoData[]._aData)
     *  @param {*} sValue Value to set
     *  @default null
     */
    "fnSetData": null,

    /**
     * Property to read the value for the cells in the column from the data
     * source array / object. If null, then the default content is used, if a
     * function is given then the return from the function is used.
     *  @type function|int|string|null
     *  @default null
     */
    "mData": null,

    /**
     * Partner property to mData which is used (only when defined) to get
     * the data - i.e. it is basically the same as mData, but without the
     * 'set' option, and also the data fed to it is the result from mData.
     * This is the rendering method to match the data method of mData.
     *  @type function|int|string|null
     *  @default null
     */
    "mRender": null,

    /**
     * Unique header TH/TD element for this column - this is what the sorting
     * listener is attached to (if sorting is enabled.)
     *  @type node
     *  @default null
     */
    "nTh": null,

    /**
     * Unique footer TH/TD element for this column (if there is one). Not used
     * in DataTables as such, but can be used for plug-ins to reference the
     * footer for each column.
     *  @type node
     *  @default null
     */
    "nTf": null,

    /**
     * The class to apply to all TD elements in the table's TBODY for the column
     *  @type string
     *  @default null
     */
    "sClass": null,

    /**
     * When DataTables calculates the column widths to assign to each column,
     * it finds the longest string in each column and then constructs a
     * temporary table and reads the widths from that. The problem with this
     * is that "mmm" is much wider then "iiii", but the latter is a longer
     * string - thus the calculation can go wrong (doing it properly and putting
     * it into an DOM object and measuring that is horribly(!) slow). Thus as
     * a "work around" we provide this option. It will append its value to the
     * text that is found to be the longest string for the column - i.e. padding.
     *  @type string
     */
    "sContentPadding": null,

    /**
     * Allows a default value to be given for a column's data, and will be used
     * whenever a null data source is encountered (this can be because mData
     * is set to null, or because the data source itself is null).
     *  @type string
     *  @default null
     */
    "sDefaultContent": null,

    /**
     * Name for the column, allowing reference to the column by name as well as
     * by index (needs a lookup to work by name).
     *  @type string
     */
    "sName": null,

    /**
     * Custom sorting data type - defines which of the available plug-ins in
     * afnSortData the custom sorting will use - if any is defined.
     *  @type string
     *  @default std
     */
    "sSortDataType": 'std',

    /**
     * Class to be applied to the header element when sorting on this column
     *  @type string
     *  @default null
     */
    "sSortingClass": null,

    /**
     * Class to be applied to the header element when sorting on this column -
     * when jQuery UI theming is used.
     *  @type string
     *  @default null
     */
    "sSortingClassJUI": null,

    /**
     * Title of the column - what is seen in the TH element (nTh).
     *  @type string
     */
    "sTitle": null,

    /**
     * Column sorting and filtering type
     *  @type string
     *  @default null
     */
    "sType": null,

    /**
     * Width of the column
     *  @type string
     *  @default null
     */
    "sWidth": null,

    /**
     * Width of the column when it was first "encountered"
     *  @type string
     *  @default null
     */
    "sWidthOrig": null
  };
  /*
   * Developer note: The properties of the object below are given in Hungarian
   * notation, that was used as the interface for DataTables prior to v1.10, however
   * from v1.10 onwards the primary interface is camel case. In order to avoid
   * breaking backwards compatibility utterly with this change, the Hungarian
   * version is still, internally the primary interface, but is is not documented
   * - hence the @name tags in each doc comment. This allows a Javascript function
   * to create a map from Hungarian notation to camel case (going the other direction
   * would require each property to be listed, which would at around 3K to the size
   * of DataTables, while this method is about a 0.5K hit.
   *
   * Ultimately this does pave the way for Hungarian notation to be dropped
   * completely, but that is a massive amount of work and will break current
   * installs (therefore is on-hold until v2).
   */

  /**
   * Initialisation options that can be given to DataTables at initialisation
   * time.
   *  @namespace
   */

  DataTable.defaults = {
    /**
     * An array of data to use for the table, passed in at initialisation which
     * will be used in preference to any data which is already in the DOM. This is
     * particularly useful for constructing tables purely in Javascript, for
     * example with a custom Ajax call.
     *  @type array
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.data
     *
     *  @example
     *    // Using a 2D array data source
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "data": [
     *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
     *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
     *        ],
     *        "columns": [
     *          { "title": "Engine" },
     *          { "title": "Browser" },
     *          { "title": "Platform" },
     *          { "title": "Version" },
     *          { "title": "Grade" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using an array of objects as a data source (`data`)
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "data": [
     *          {
     *            "engine":   "Trident",
     *            "browser":  "Internet Explorer 4.0",
     *            "platform": "Win 95+",
     *            "version":  4,
     *            "grade":    "X"
     *          },
     *          {
     *            "engine":   "Trident",
     *            "browser":  "Internet Explorer 5.0",
     *            "platform": "Win 95+",
     *            "version":  5,
     *            "grade":    "C"
     *          }
     *        ],
     *        "columns": [
     *          { "title": "Engine",   "data": "engine" },
     *          { "title": "Browser",  "data": "browser" },
     *          { "title": "Platform", "data": "platform" },
     *          { "title": "Version",  "data": "version" },
     *          { "title": "Grade",    "data": "grade" }
     *        ]
     *      } );
     *    } );
     */
    "aaData": null,

    /**
     * If ordering is enabled, then DataTables will perform a first pass sort on
     * initialisation. You can define which column(s) the sort is performed
     * upon, and the sorting direction, with this variable. The `sorting` array
     * should contain an array for each column to be sorted initially containing
     * the column's index and a direction string ('asc' or 'desc').
     *  @type array
     *  @default [[0,'asc']]
     *
     *  @dtopt Option
     *  @name DataTable.defaults.order
     *
     *  @example
     *    // Sort by 3rd column first, and then 4th column
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "order": [[2,'asc'], [3,'desc']]
     *      } );
     *    } );
     *
     *    // No initial sorting
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "order": []
     *      } );
     *    } );
     */
    "aaSorting": [[0, 'asc']],

    /**
     * This parameter is basically identical to the `sorting` parameter, but
     * cannot be overridden by user interaction with the table. What this means
     * is that you could have a column (visible or hidden) which the sorting
     * will always be forced on first - any sorting after that (from the user)
     * will then be performed as required. This can be useful for grouping rows
     * together.
     *  @type array
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.orderFixed
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "orderFixed": [[0,'asc']]
     *      } );
     *    } )
     */
    "aaSortingFixed": [],

    /**
     * DataTables can be instructed to load data to display in the table from a
     * Ajax source. This option defines how that Ajax call is made and where to.
     *
     * The `ajax` property has three different modes of operation, depending on
     * how it is defined. These are:
     *
     * * `string` - Set the URL from where the data should be loaded from.
     * * `object` - Define properties for `jQuery.ajax`.
     * * `function` - Custom data get function
     *
     * `string`
     * --------
     *
     * As a string, the `ajax` property simply defines the URL from which
     * DataTables will load data.
     *
     * `object`
     * --------
     *
     * As an object, the parameters in the object are passed to
     * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
     * of the Ajax request. DataTables has a number of default parameters which
     * you can override using this option. Please refer to the jQuery
     * documentation for a full description of the options available, although
     * the following parameters provide additional options in DataTables or
     * require special consideration:
     *
     * * `data` - As with jQuery, `data` can be provided as an object, but it
     *   can also be used as a function to manipulate the data DataTables sends
     *   to the server. The function takes a single parameter, an object of
     *   parameters with the values that DataTables has readied for sending. An
     *   object may be returned which will be merged into the DataTables
     *   defaults, or you can add the items to the object that was passed in and
     *   not return anything from the function. This supersedes `fnServerParams`
     *   from DataTables 1.9-.
     *
     * * `dataSrc` - By default DataTables will look for the property `data` (or
     *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
     *   from an Ajax source or for server-side processing - this parameter
     *   allows that property to be changed. You can use Javascript dotted
     *   object notation to get a data source for multiple levels of nesting, or
     *   it my be used as a function. As a function it takes a single parameter,
     *   the JSON returned from the server, which can be manipulated as
     *   required, with the returned value being that used by DataTables as the
     *   data source for the table. This supersedes `sAjaxDataProp` from
     *   DataTables 1.9-.
     *
     * * `success` - Should not be overridden it is used internally in
     *   DataTables. To manipulate / transform the data returned by the server
     *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
     *
     * `function`
     * ----------
     *
     * As a function, making the Ajax call is left up to yourself allowing
     * complete control of the Ajax request. Indeed, if desired, a method other
     * than Ajax could be used to obtain the required data, such as Web storage
     * or an AIR database.
     *
     * The function is given four parameters and no return is required. The
     * parameters are:
     *
     * 1. _object_ - Data to send to the server
     * 2. _function_ - Callback function that must be executed when the required
     *    data has been obtained. That data should be passed into the callback
     *    as the only parameter
     * 3. _object_ - DataTables settings object for the table
     *
     * Note that this supersedes `fnServerData` from DataTables 1.9-.
     *
     *  @type string|object|function
     *  @default null
     *
     *  @dtopt Option
     *  @name DataTable.defaults.ajax
     *  @since 1.10.0
     *
     * @example
     *   // Get JSON data from a file via Ajax.
     *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
     *   $('#example').dataTable( {
     *     "ajax": "data.json"
     *   } );
     *
     * @example
     *   // Get JSON data from a file via Ajax, using `dataSrc` to change
     *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": "tableData"
     *     }
     *   } );
     *
     * @example
     *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
     *   // from a plain array rather than an array in an object
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": ""
     *     }
     *   } );
     *
     * @example
     *   // Manipulate the data returned from the server - add a link to data
     *   // (note this can, should, be done using `render` for the column - this
     *   // is just a simple example of how the data can be manipulated).
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "dataSrc": function ( json ) {
     *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
     *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
     *         }
     *         return json;
     *       }
     *     }
     *   } );
     *
     * @example
     *   // Add data to the request
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "data": function ( d ) {
     *         return {
     *           "extra_search": $('#extra').val()
     *         };
     *       }
     *     }
     *   } );
     *
     * @example
     *   // Send request as POST
     *   $('#example').dataTable( {
     *     "ajax": {
     *       "url": "data.json",
     *       "type": "POST"
     *     }
     *   } );
     *
     * @example
     *   // Get the data from localStorage (could interface with a form for
     *   // adding, editing and removing rows).
     *   $('#example').dataTable( {
     *     "ajax": function (data, callback, settings) {
     *       callback(
     *         JSON.parse( localStorage.getItem('dataTablesData') )
     *       );
     *     }
     *   } );
     */
    "ajax": null,

    /**
     * This parameter allows you to readily specify the entries in the length drop
     * down menu that DataTables shows when pagination is enabled. It can be
     * either a 1D array of options which will be used for both the displayed
     * option and the value, or a 2D array which will use the array in the first
     * position as the value, and the array in the second position as the
     * displayed options (useful for language strings such as 'All').
     *
     * Note that the `pageLength` property will be automatically set to the
     * first value given in this array, unless `pageLength` is also provided.
     *  @type array
     *  @default [ 10, 25, 50, 100 ]
     *
     *  @dtopt Option
     *  @name DataTable.defaults.lengthMenu
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
     *      } );
     *    } );
     */
    "aLengthMenu": [10, 25, 50, 100],

    /**
     * The `columns` option in the initialisation parameter allows you to define
     * details about the way individual columns behave. For a full list of
     * column options that can be set, please see
     * {@link DataTable.defaults.column}. Note that if you use `columns` to
     * define your columns, you must have an entry in the array for every single
     * column that you have in your table (these can be null if you don't which
     * to specify any options).
     *  @member
     *
     *  @name DataTable.defaults.column
     */
    "aoColumns": null,

    /**
     * Very similar to `columns`, `columnDefs` allows you to target a specific
     * column, multiple columns, or all columns, using the `targets` property of
     * each object in the array. This allows great flexibility when creating
     * tables, as the `columnDefs` arrays can be of any length, targeting the
     * columns you specifically want. `columnDefs` may use any of the column
     * options available: {@link DataTable.defaults.column}, but it _must_
     * have `targets` defined in each object in the array. Values in the `targets`
     * array may be:
     *   <ul>
     *     <li>a string - class name will be matched on the TH for the column</li>
     *     <li>0 or a positive integer - column index counting from the left</li>
     *     <li>a negative integer - column index counting from the right</li>
     *     <li>the string "_all" - all columns (i.e. assign a default)</li>
     *   </ul>
     *  @member
     *
     *  @name DataTable.defaults.columnDefs
     */
    "aoColumnDefs": null,

    /**
     * Basically the same as `search`, this parameter defines the individual column
     * filtering state at initialisation time. The array must be of the same size
     * as the number of columns, and each element be an object with the parameters
     * `search` and `escapeRegex` (the latter is optional). 'null' is also
     * accepted and the default will be used.
     *  @type array
     *  @default []
     *
     *  @dtopt Option
     *  @name DataTable.defaults.searchCols
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "searchCols": [
     *          null,
     *          { "search": "My filter" },
     *          null,
     *          { "search": "^[0-9]", "escapeRegex": false }
     *        ]
     *      } );
     *    } )
     */
    "aoSearchCols": [],

    /**
     * An array of CSS classes that should be applied to displayed rows. This
     * array may be of any length, and DataTables will apply each class
     * sequentially, looping when required.
     *  @type array
     *  @default null <i>Will take the values determined by the `oClasses.stripe*`
     *    options</i>
     *
     *  @dtopt Option
     *  @name DataTable.defaults.stripeClasses
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
     *      } );
     *    } )
     */
    "asStripeClasses": null,

    /**
     * Enable or disable automatic column width calculation. This can be disabled
     * as an optimisation (it takes some time to calculate the widths) if the
     * tables widths are passed in using `columns`.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.autoWidth
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "autoWidth": false
     *      } );
     *    } );
     */
    "bAutoWidth": true,

    /**
     * Deferred rendering can provide DataTables with a huge speed boost when you
     * are using an Ajax or JS data source for the table. This option, when set to
     * true, will cause DataTables to defer the creation of the table elements for
     * each row until they are needed for a draw - saving a significant amount of
     * time.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.deferRender
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajax": "sources/arrays.txt",
     *        "deferRender": true
     *      } );
     *    } );
     */
    "bDeferRender": false,

    /**
     * Replace a DataTable which matches the given selector and replace it with
     * one which has the properties of the new initialisation object passed. If no
     * table matches the selector, then the new DataTable will be constructed as
     * per normal.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.destroy
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "srollY": "200px",
     *        "paginate": false
     *      } );
     *
     *      // Some time later....
     *      $('#example').dataTable( {
     *        "filter": false,
     *        "destroy": true
     *      } );
     *    } );
     */
    "bDestroy": false,

    /**
     * Enable or disable filtering of data. Filtering in DataTables is "smart" in
     * that it allows the end user to input multiple words (space separated) and
     * will match a row containing those words, even if not in the order that was
     * specified (this allow matching across multiple columns). Note that if you
     * wish to use filtering in DataTables this must remain 'true' - to remove the
     * default filtering input box and retain filtering abilities, please use
     * {@link DataTable.defaults.dom}.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.searching
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "searching": false
     *      } );
     *    } );
     */
    "bFilter": true,

    /**
     * Enable or disable the table information display. This shows information
     * about the data that is currently visible on the page, including information
     * about filtered data if that action is being performed.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.info
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "info": false
     *      } );
     *    } );
     */
    "bInfo": true,

    /**
     * Allows the end user to select the size of a formatted page from a select
     * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.lengthChange
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "lengthChange": false
     *      } );
     *    } );
     */
    "bLengthChange": true,

    /**
     * Enable or disable pagination.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.paging
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "paging": false
     *      } );
     *    } );
     */
    "bPaginate": true,

    /**
     * Enable or disable the display of a 'processing' indicator when the table is
     * being processed (e.g. a sort). This is particularly useful for tables with
     * large amounts of data where it can take a noticeable amount of time to sort
     * the entries.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.processing
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "processing": true
     *      } );
     *    } );
     */
    "bProcessing": false,

    /**
     * Retrieve the DataTables object for the given selector. Note that if the
     * table has already been initialised, this parameter will cause DataTables
     * to simply return the object that has already been set up - it will not take
     * account of any changes you might have made to the initialisation object
     * passed to DataTables (setting this parameter to true is an acknowledgement
     * that you understand this). `destroy` can be used to reinitialise a table if
     * you need.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.retrieve
     *
     *  @example
     *    $(document).ready( function() {
     *      initTable();
     *      tableActions();
     *    } );
     *
     *    function initTable ()
     *    {
     *      return $('#example').dataTable( {
     *        "scrollY": "200px",
     *        "paginate": false,
     *        "retrieve": true
     *      } );
     *    }
     *
     *    function tableActions ()
     *    {
     *      var table = initTable();
     *      // perform API operations with oTable
     *    }
     */
    "bRetrieve": false,

    /**
     * When vertical (y) scrolling is enabled, DataTables will force the height of
     * the table's viewport to the given height at all times (useful for layout).
     * However, this can look odd when filtering data down to a small data set,
     * and the footer is left "floating" further down. This parameter (when
     * enabled) will cause DataTables to collapse the table's viewport down when
     * the result set will fit within the given Y height.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.scrollCollapse
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollY": "200",
     *        "scrollCollapse": true
     *      } );
     *    } );
     */
    "bScrollCollapse": false,

    /**
     * Configure DataTables to use server-side processing. Note that the
     * `ajax` parameter must also be given in order to give DataTables a
     * source to obtain the required data for each draw.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverSide
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "xhr.php"
     *      } );
     *    } );
     */
    "bServerSide": false,

    /**
     * Enable or disable sorting of columns. Sorting of individual columns can be
     * disabled by the `sortable` option for each column.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.ordering
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "ordering": false
     *      } );
     *    } );
     */
    "bSort": true,

    /**
     * Enable or display DataTables' ability to sort multiple columns at the
     * same time (activated by shift-click by the user).
     *  @type boolean
     *  @default true
     *
     *  @dtopt Options
     *  @name DataTable.defaults.orderMulti
     *
     *  @example
     *    // Disable multiple column sorting ability
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "orderMulti": false
     *      } );
     *    } );
     */
    "bSortMulti": true,

    /**
     * Allows control over whether DataTables should use the top (true) unique
     * cell that is found for a single column, or the bottom (false - default).
     * This is useful when using complex headers.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Options
     *  @name DataTable.defaults.orderCellsTop
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "orderCellsTop": true
     *      } );
     *    } );
     */
    "bSortCellsTop": false,

    /**
     * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
     * `sorting\_3` to the columns which are currently being sorted on. This is
     * presented as a feature switch as it can increase processing time (while
     * classes are removed and added) so for large data sets you might want to
     * turn this off.
     *  @type boolean
     *  @default true
     *
     *  @dtopt Features
     *  @name DataTable.defaults.orderClasses
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "orderClasses": false
     *      } );
     *    } );
     */
    "bSortClasses": true,

    /**
     * Enable or disable state saving. When enabled HTML5 `localStorage` will be
     * used to save table display information such as pagination information,
     * display length, filtering and sorting. As such when the end user reloads
     * the page the display display will match what thy had previously set up.
     *
     * Due to the use of `localStorage` the default state saving is not supported
     * in IE6 or 7. If state saving is required in those browsers, use
     * `stateSaveCallback` to provide a storage solution such as cookies.
     *  @type boolean
     *  @default false
     *
     *  @dtopt Features
     *  @name DataTable.defaults.stateSave
     *
     *  @example
     *    $(document).ready( function () {
     *      $('#example').dataTable( {
     *        "stateSave": true
     *      } );
     *    } );
     */
    "bStateSave": false,

    /**
     * This function is called when a TR element is created (and all TD child
     * elements have been inserted), or registered if using a DOM source, allowing
     * manipulation of the TR element (adding classes etc).
     *  @type function
     *  @param {node} row "TR" element for the current row
     *  @param {array} data Raw data array for this row
     *  @param {int} dataIndex The index of this row in the internal aoData array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.createdRow
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "createdRow": function( row, data, dataIndex ) {
     *          // Bold the grade for all 'A' grade browsers
     *          if ( data[4] == "A" )
     *          {
     *            $('td:eq(4)', row).html( '<b>A</b>' );
     *          }
     *        }
     *      } );
     *    } );
     */
    "fnCreatedRow": null,

    /**
     * This function is called on every 'draw' event, and allows you to
     * dynamically modify any aspect you want about the created DOM.
     *  @type function
     *  @param {object} settings DataTables settings object
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.drawCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "drawCallback": function( settings ) {
     *          alert( 'DataTables has redrawn the table' );
     *        }
     *      } );
     *    } );
     */
    "fnDrawCallback": null,

    /**
     * Identical to fnHeaderCallback() but for the table footer this function
     * allows you to modify the table footer on every 'draw' event.
     *  @type function
     *  @param {node} foot "TR" element for the footer
     *  @param {array} data Full table data (as derived from the original HTML)
     *  @param {int} start Index for the current display starting point in the
     *    display array
     *  @param {int} end Index for the current display ending point in the
     *    display array
     *  @param {array int} display Index array to translate the visual position
     *    to the full data array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.footerCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "footerCallback": function( tfoot, data, start, end, display ) {
     *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
     *        }
     *      } );
     *    } )
     */
    "fnFooterCallback": null,

    /**
     * When rendering large numbers in the information element for the table
     * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
     * to have a comma separator for the 'thousands' units (e.g. 1 million is
     * rendered as "1,000,000") to help readability for the end user. This
     * function will override the default method DataTables uses.
     *  @type function
     *  @member
     *  @param {int} toFormat number to be formatted
     *  @returns {string} formatted string for DataTables to show the number
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.formatNumber
     *
     *  @example
     *    // Format a number using a single quote for the separator (note that
     *    // this can also be done with the language.thousands option)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "formatNumber": function ( toFormat ) {
     *          return toFormat.toString().replace(
     *            /\B(?=(\d{3})+(?!\d))/g, "'"
     *          );
     *        };
     *      } );
     *    } );
     */
    "fnFormatNumber": function fnFormatNumber(toFormat) {
      return toFormat.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands);
    },

    /**
     * This function is called on every 'draw' event, and allows you to
     * dynamically modify the header row. This can be used to calculate and
     * display useful information about the table.
     *  @type function
     *  @param {node} head "TR" element for the header
     *  @param {array} data Full table data (as derived from the original HTML)
     *  @param {int} start Index for the current display starting point in the
     *    display array
     *  @param {int} end Index for the current display ending point in the
     *    display array
     *  @param {array int} display Index array to translate the visual position
     *    to the full data array
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.headerCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "fheaderCallback": function( head, data, start, end, display ) {
     *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
     *        }
     *      } );
     *    } )
     */
    "fnHeaderCallback": null,

    /**
     * The information element can be used to convey information about the current
     * state of the table. Although the internationalisation options presented by
     * DataTables are quite capable of dealing with most customisations, there may
     * be times where you wish to customise the string further. This callback
     * allows you to do exactly that.
     *  @type function
     *  @param {object} oSettings DataTables settings object
     *  @param {int} start Starting position in data for the draw
     *  @param {int} end End position in data for the draw
     *  @param {int} max Total number of rows in the table (regardless of
     *    filtering)
     *  @param {int} total Total number of rows in the data set, after filtering
     *  @param {string} pre The string that DataTables has formatted using it's
     *    own rules
     *  @returns {string} The string to be displayed in the information element.
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.infoCallback
     *
     *  @example
     *    $('#example').dataTable( {
     *      "infoCallback": function( settings, start, end, max, total, pre ) {
     *        return start +" to "+ end;
     *      }
     *    } );
     */
    "fnInfoCallback": null,

    /**
     * Called when the table has been initialised. Normally DataTables will
     * initialise sequentially and there will be no need for this function,
     * however, this does not hold true when using external language information
     * since that is obtained using an async XHR call.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} json The JSON object request from the server - only
     *    present if client-side Ajax sourced data is used
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.initComplete
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "initComplete": function(settings, json) {
     *          alert( 'DataTables has finished its initialisation.' );
     *        }
     *      } );
     *    } )
     */
    "fnInitComplete": null,

    /**
     * Called at the very start of each table draw and can be used to cancel the
     * draw by returning false, any other return (including undefined) results in
     * the full draw occurring).
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @returns {boolean} False will cancel the draw, anything else (including no
     *    return) will allow it to complete.
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.preDrawCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "preDrawCallback": function( settings ) {
     *          if ( $('#test').val() == 1 ) {
     *            return false;
     *          }
     *        }
     *      } );
     *    } );
     */
    "fnPreDrawCallback": null,

    /**
     * This function allows you to 'post process' each row after it have been
     * generated for each table draw, but before it is rendered on screen. This
     * function might be used for setting the row class name etc.
     *  @type function
     *  @param {node} row "TR" element for the current row
     *  @param {array} data Raw data array for this row
     *  @param {int} displayIndex The display index for the current table draw
     *  @param {int} displayIndexFull The index of the data in the full list of
     *    rows (after filtering)
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.rowCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
     *          // Bold the grade for all 'A' grade browsers
     *          if ( data[4] == "A" ) {
     *            $('td:eq(4)', row).html( '<b>A</b>' );
     *          }
     *        }
     *      } );
     *    } );
     */
    "fnRowCallback": null,

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * This parameter allows you to override the default function which obtains
     * the data from the server so something more suitable for your application.
     * For example you could use POST data, or pull information from a Gears or
     * AIR database.
     *  @type function
     *  @member
     *  @param {string} source HTTP source to obtain the data from (`ajax`)
     *  @param {array} data A key/value pair object containing the data to send
     *    to the server
     *  @param {function} callback to be called on completion of the data get
     *    process that will draw the data on the page.
     *  @param {object} settings DataTables settings object
     *
     *  @dtopt Callbacks
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverData
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    "fnServerData": null,

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     *  It is often useful to send extra data to the server when making an Ajax
     * request - for example custom filtering information, and this callback
     * function makes it trivial to send extra information to the server. The
     * passed in parameter is the data set that has been constructed by
     * DataTables, and you can add to this or modify it as you require.
     *  @type function
     *  @param {array} data Data array (array of objects which are name/value
     *    pairs) that has been constructed by DataTables and will be sent to the
     *    server. In the case of Ajax sourced data with server-side processing
     *    this will be an empty array, for server-side processing there will be a
     *    significant number of parameters!
     *  @returns {undefined} Ensure that you modify the data array passed in,
     *    as this is passed by reference.
     *
     *  @dtopt Callbacks
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverParams
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    "fnServerParams": null,

    /**
     * Load the table state. With this function you can define from where, and how, the
     * state of a table is loaded. By default DataTables will load from `localStorage`
     * but you might wish to use a server-side database or cookies.
     *  @type function
     *  @member
     *  @param {object} settings DataTables settings object
     *  @param {object} callback Callback that can be executed when done. It
     *    should be passed the loaded state object.
     *  @return {object} The DataTables state object to be loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoadCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadCallback": function (settings, callback) {
     *          $.ajax( {
     *            "url": "/state_load",
     *            "dataType": "json",
     *            "success": function (json) {
     *              callback( json );
     *            }
     *          } );
     *        }
     *      } );
     *    } );
     */
    "fnStateLoadCallback": function fnStateLoadCallback(settings) {
      try {
        return JSON.parse((settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem('DataTables_' + settings.sInstance + '_' + location.pathname));
      } catch (e) {}
    },

    /**
     * Callback which allows modification of the saved state prior to loading that state.
     * This callback is called when the table is loading state from the stored data, but
     * prior to the settings object being modified by the saved state. Note that for
     * plug-in authors, you should use the `stateLoadParams` event to load parameters for
     * a plug-in.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object that is to be loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoadParams
     *
     *  @example
     *    // Remove a saved filter, so filtering is never loaded
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadParams": function (settings, data) {
     *          data.oSearch.sSearch = "";
     *        }
     *      } );
     *    } );
     *
     *  @example
     *    // Disallow state loading by returning false
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoadParams": function (settings, data) {
     *          return false;
     *        }
     *      } );
     *    } );
     */
    "fnStateLoadParams": null,

    /**
     * Callback that is called when the state has been loaded from the state saving method
     * and the DataTables settings object has been modified as a result of the loaded state.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object that was loaded
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateLoaded
     *
     *  @example
     *    // Show an alert with the filtering value that was saved
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateLoaded": function (settings, data) {
     *          alert( 'Saved filter was: '+data.oSearch.sSearch );
     *        }
     *      } );
     *    } );
     */
    "fnStateLoaded": null,

    /**
     * Save the table state. This function allows you to define where and how the state
     * information for the table is stored By default DataTables will use `localStorage`
     * but you might wish to use a server-side database or cookies.
     *  @type function
     *  @member
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object to be saved
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateSaveCallback
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateSaveCallback": function (settings, data) {
     *          // Send an Ajax request to the server with the state object
     *          $.ajax( {
     *            "url": "/state_save",
     *            "data": data,
     *            "dataType": "json",
     *            "method": "POST"
     *            "success": function () {}
     *          } );
     *        }
     *      } );
     *    } );
     */
    "fnStateSaveCallback": function fnStateSaveCallback(settings, data) {
      try {
        (settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem('DataTables_' + settings.sInstance + '_' + location.pathname, JSON.stringify(data));
      } catch (e) {}
    },

    /**
     * Callback which allows modification of the state to be saved. Called when the table
     * has changed state a new state save is required. This method allows modification of
     * the state saving object prior to actually doing the save, including addition or
     * other state properties or modification. Note that for plug-in authors, you should
     * use the `stateSaveParams` event to save parameters for a plug-in.
     *  @type function
     *  @param {object} settings DataTables settings object
     *  @param {object} data The state object to be saved
     *
     *  @dtopt Callbacks
     *  @name DataTable.defaults.stateSaveParams
     *
     *  @example
     *    // Remove a saved filter, so filtering is never saved
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateSave": true,
     *        "stateSaveParams": function (settings, data) {
     *          data.oSearch.sSearch = "";
     *        }
     *      } );
     *    } );
     */
    "fnStateSaveParams": null,

    /**
     * Duration for which the saved state information is considered valid. After this period
     * has elapsed the state will be returned to the default.
     * Value is given in seconds.
     *  @type int
     *  @default 7200 <i>(2 hours)</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.stateDuration
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "stateDuration": 60*60*24; // 1 day
     *      } );
     *    } )
     */
    "iStateDuration": 7200,

    /**
     * When enabled DataTables will not make a request to the server for the first
     * page draw - rather it will use the data already on the page (no sorting etc
     * will be applied to it), thus saving on an XHR at load time. `deferLoading`
     * is used to indicate that deferred loading is required, but it is also used
     * to tell DataTables how many records there are in the full table (allowing
     * the information element and pagination to be displayed correctly). In the case
     * where a filtering is applied to the table on initial load, this can be
     * indicated by giving the parameter as an array, where the first element is
     * the number of records available after filtering and the second element is the
     * number of records without filtering (allowing the table information element
     * to be shown correctly).
     *  @type int | array
     *  @default null
     *
     *  @dtopt Options
     *  @name DataTable.defaults.deferLoading
     *
     *  @example
     *    // 57 records available in the table, no filtering applied
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "scripts/server_processing.php",
     *        "deferLoading": 57
     *      } );
     *    } );
     *
     *  @example
     *    // 57 records after filtering, 100 without filtering (an initial filter applied)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "serverSide": true,
     *        "ajax": "scripts/server_processing.php",
     *        "deferLoading": [ 57, 100 ],
     *        "search": {
     *          "search": "my_filter"
     *        }
     *      } );
     *    } );
     */
    "iDeferLoading": null,

    /**
     * Number of rows to display on a single page when using pagination. If
     * feature enabled (`lengthChange`) then the end user will be able to override
     * this to a custom setting using a pop-up menu.
     *  @type int
     *  @default 10
     *
     *  @dtopt Options
     *  @name DataTable.defaults.pageLength
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "pageLength": 50
     *      } );
     *    } )
     */
    "iDisplayLength": 10,

    /**
     * Define the starting point for data display when using DataTables with
     * pagination. Note that this parameter is the number of records, rather than
     * the page number, so if you have 10 records per page and want to start on
     * the third page, it should be "20".
     *  @type int
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.displayStart
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "displayStart": 20
     *      } );
     *    } )
     */
    "iDisplayStart": 0,

    /**
     * By default DataTables allows keyboard navigation of the table (sorting, paging,
     * and filtering) by adding a `tabindex` attribute to the required elements. This
     * allows you to tab through the controls and press the enter key to activate them.
     * The tabindex is default 0, meaning that the tab follows the flow of the document.
     * You can overrule this using this parameter if you wish. Use a value of -1 to
     * disable built-in keyboard navigation.
     *  @type int
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.tabIndex
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "tabIndex": 1
     *      } );
     *    } );
     */
    "iTabIndex": 0,

    /**
     * Classes that DataTables assigns to the various components and features
     * that it adds to the HTML table. This allows classes to be configured
     * during initialisation in addition to through the static
     * {@link DataTable.ext.oStdClasses} object).
     *  @namespace
     *  @name DataTable.defaults.classes
     */
    "oClasses": {},

    /**
     * All strings that DataTables uses in the user interface that it creates
     * are defined in this object, allowing you to modified them individually or
     * completely replace them all as required.
     *  @namespace
     *  @name DataTable.defaults.language
     */
    "oLanguage": {
      /**
       * Strings that are used for WAI-ARIA labels and controls only (these are not
       * actually visible on the page, but will be read by screenreaders, and thus
       * must be internationalised as well).
       *  @namespace
       *  @name DataTable.defaults.language.aria
       */
      "oAria": {
        /**
         * ARIA label that is added to the table headers when the column may be
         * sorted ascending by activing the column (click or return when focused).
         * Note that the column header is prefixed to this string.
         *  @type string
         *  @default : activate to sort column ascending
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.aria.sortAscending
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "aria": {
         *            "sortAscending": " - click/return to sort ascending"
         *          }
         *        }
         *      } );
         *    } );
         */
        "sSortAscending": ": activate to sort column ascending",

        /**
         * ARIA label that is added to the table headers when the column may be
         * sorted descending by activing the column (click or return when focused).
         * Note that the column header is prefixed to this string.
         *  @type string
         *  @default : activate to sort column ascending
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.aria.sortDescending
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "aria": {
         *            "sortDescending": " - click/return to sort descending"
         *          }
         *        }
         *      } );
         *    } );
         */
        "sSortDescending": ": activate to sort column descending"
      },

      /**
       * Pagination string used by DataTables for the built-in pagination
       * control types.
       *  @namespace
       *  @name DataTable.defaults.language.paginate
       */
      "oPaginate": {
        /**
         * Text to use when using the 'full_numbers' type of pagination for the
         * button to take the user to the first page.
         *  @type string
         *  @default First
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.first
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "first": "First page"
         *          }
         *        }
         *      } );
         *    } );
         */
        "sFirst": "First",

        /**
         * Text to use when using the 'full_numbers' type of pagination for the
         * button to take the user to the last page.
         *  @type string
         *  @default Last
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.last
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "last": "Last page"
         *          }
         *        }
         *      } );
         *    } );
         */
        "sLast": "Last",

        /**
         * Text to use for the 'next' pagination button (to take the user to the
         * next page).
         *  @type string
         *  @default Next
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.next
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "next": "Next page"
         *          }
         *        }
         *      } );
         *    } );
         */
        "sNext": "Next",

        /**
         * Text to use for the 'previous' pagination button (to take the user to
         * the previous page).
         *  @type string
         *  @default Previous
         *
         *  @dtopt Language
         *  @name DataTable.defaults.language.paginate.previous
         *
         *  @example
         *    $(document).ready( function() {
         *      $('#example').dataTable( {
         *        "language": {
         *          "paginate": {
         *            "previous": "Previous page"
         *          }
         *        }
         *      } );
         *    } );
         */
        "sPrevious": "Previous"
      },

      /**
       * This string is shown in preference to `zeroRecords` when the table is
       * empty of data (regardless of filtering). Note that this is an optional
       * parameter - if it is not given, the value of `zeroRecords` will be used
       * instead (either the default or given value).
       *  @type string
       *  @default No data available in table
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.emptyTable
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "emptyTable": "No data available in table"
       *        }
       *      } );
       *    } );
       */
      "sEmptyTable": "No data available in table",

      /**
       * This string gives information to the end user about the information
       * that is current on display on the page. The following tokens can be
       * used in the string and will be dynamically replaced as the table
       * display updates. This tokens can be placed anywhere in the string, or
       * removed as needed by the language requires:
       *
       * * `\_START\_` - Display index of the first record on the current page
       * * `\_END\_` - Display index of the last record on the current page
       * * `\_TOTAL\_` - Number of records in the table after filtering
       * * `\_MAX\_` - Number of records in the table without filtering
       * * `\_PAGE\_` - Current page number
       * * `\_PAGES\_` - Total number of pages of data in the table
       *
       *  @type string
       *  @default Showing _START_ to _END_ of _TOTAL_ entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.info
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "info": "Showing page _PAGE_ of _PAGES_"
       *        }
       *      } );
       *    } );
       */
      "sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",

      /**
       * Display information string for when the table is empty. Typically the
       * format of this string should match `info`.
       *  @type string
       *  @default Showing 0 to 0 of 0 entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoEmpty
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoEmpty": "No entries to show"
       *        }
       *      } );
       *    } );
       */
      "sInfoEmpty": "Showing 0 to 0 of 0 entries",

      /**
       * When a user filters the information in a table, this string is appended
       * to the information (`info`) to give an idea of how strong the filtering
       * is. The variable _MAX_ is dynamically updated.
       *  @type string
       *  @default (filtered from _MAX_ total entries)
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoFiltered
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoFiltered": " - filtering from _MAX_ records"
       *        }
       *      } );
       *    } );
       */
      "sInfoFiltered": "(filtered from _MAX_ total entries)",

      /**
       * If can be useful to append extra information to the info string at times,
       * and this variable does exactly that. This information will be appended to
       * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
       * being used) at all times.
       *  @type string
       *  @default <i>Empty string</i>
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.infoPostFix
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "infoPostFix": "All records shown are derived from real information."
       *        }
       *      } );
       *    } );
       */
      "sInfoPostFix": "",

      /**
       * This decimal place operator is a little different from the other
       * language options since DataTables doesn't output floating point
       * numbers, so it won't ever use this for display of a number. Rather,
       * what this parameter does is modify the sort methods of the table so
       * that numbers which are in a format which has a character other than
       * a period (`.`) as a decimal place will be sorted numerically.
       *
       * Note that numbers with different decimal places cannot be shown in
       * the same table and still be sortable, the table must be consistent.
       * However, multiple different tables on the page can use different
       * decimal place characters.
       *  @type string
       *  @default 
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.decimal
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "decimal": ","
       *          "thousands": "."
       *        }
       *      } );
       *    } );
       */
      "sDecimal": "",

      /**
       * DataTables has a build in number formatter (`formatNumber`) which is
       * used to format large numbers that are used in the table information.
       * By default a comma is used, but this can be trivially changed to any
       * character you wish with this parameter.
       *  @type string
       *  @default ,
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.thousands
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "thousands": "'"
       *        }
       *      } );
       *    } );
       */
      "sThousands": ",",

      /**
       * Detail the action that will be taken when the drop down menu for the
       * pagination length option is changed. The '_MENU_' variable is replaced
       * with a default select list of 10, 25, 50 and 100, and can be replaced
       * with a custom select box if required.
       *  @type string
       *  @default Show _MENU_ entries
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.lengthMenu
       *
       *  @example
       *    // Language change only
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "lengthMenu": "Display _MENU_ records"
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Language and options change
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "lengthMenu": 'Display <select>'+
       *            '<option value="10">10</option>'+
       *            '<option value="20">20</option>'+
       *            '<option value="30">30</option>'+
       *            '<option value="40">40</option>'+
       *            '<option value="50">50</option>'+
       *            '<option value="-1">All</option>'+
       *            '</select> records'
       *        }
       *      } );
       *    } );
       */
      "sLengthMenu": "Show _MENU_ entries",

      /**
       * When using Ajax sourced data and during the first draw when DataTables is
       * gathering the data, this message is shown in an empty row in the table to
       * indicate to the end user the the data is being loaded. Note that this
       * parameter is not used when loading data by server-side processing, just
       * Ajax sourced data with client-side processing.
       *  @type string
       *  @default Loading...
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.loadingRecords
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "loadingRecords": "Please wait - loading..."
       *        }
       *      } );
       *    } );
       */
      "sLoadingRecords": "Loading...",

      /**
       * Text which is displayed when the table is processing a user action
       * (usually a sort command or similar).
       *  @type string
       *  @default Processing...
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.processing
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "processing": "DataTables is currently busy"
       *        }
       *      } );
       *    } );
       */
      "sProcessing": "Processing...",

      /**
       * Details the actions that will be taken when the user types into the
       * filtering input text box. The variable "_INPUT_", if used in the string,
       * is replaced with the HTML text box for the filtering input allowing
       * control over where it appears in the string. If "_INPUT_" is not given
       * then the input box is appended to the string automatically.
       *  @type string
       *  @default Search:
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.search
       *
       *  @example
       *    // Input text box will be appended at the end automatically
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "search": "Filter records:"
       *        }
       *      } );
       *    } );
       *
       *  @example
       *    // Specify where the filter should appear
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "search": "Apply filter _INPUT_ to table"
       *        }
       *      } );
       *    } );
       */
      "sSearch": "Search:",

      /**
       * Assign a `placeholder` attribute to the search `input` element
       *  @type string
       *  @default 
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.searchPlaceholder
       */
      "sSearchPlaceholder": "",

      /**
       * All of the language information can be stored in a file on the
       * server-side, which DataTables will look up if this parameter is passed.
       * It must store the URL of the language file, which is in a JSON format,
       * and the object has the same properties as the oLanguage object in the
       * initialiser object (i.e. the above parameters). Please refer to one of
       * the example language files to see how this works in action.
       *  @type string
       *  @default <i>Empty string - i.e. disabled</i>
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.url
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
       *        }
       *      } );
       *    } );
       */
      "sUrl": "",

      /**
       * Text shown inside the table records when the is no information to be
       * displayed after filtering. `emptyTable` is shown when there is simply no
       * information in the table at all (regardless of filtering).
       *  @type string
       *  @default No matching records found
       *
       *  @dtopt Language
       *  @name DataTable.defaults.language.zeroRecords
       *
       *  @example
       *    $(document).ready( function() {
       *      $('#example').dataTable( {
       *        "language": {
       *          "zeroRecords": "No records to display"
       *        }
       *      } );
       *    } );
       */
      "sZeroRecords": "No matching records found"
    },

    /**
     * This parameter allows you to have define the global filtering state at
     * initialisation time. As an object the `search` parameter must be
     * defined, but all other parameters are optional. When `regex` is true,
     * the search string will be treated as a regular expression, when false
     * (default) it will be treated as a straight string. When `smart`
     * DataTables will use it's smart filtering methods (to word match at
     * any point in the data), when false this will not be done.
     *  @namespace
     *  @extends DataTable.models.oSearch
     *
     *  @dtopt Options
     *  @name DataTable.defaults.search
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "search": {"search": "Initial search"}
     *      } );
     *    } )
     */
    "oSearch": $.extend({}, DataTable.models.oSearch),

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * By default DataTables will look for the property `data` (or `aaData` for
     * compatibility with DataTables 1.9-) when obtaining data from an Ajax
     * source or for server-side processing - this parameter allows that
     * property to be changed. You can use Javascript dotted object notation to
     * get a data source for multiple levels of nesting.
     *  @type string
     *  @default data
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.ajaxDataProp
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    "sAjaxDataProp": "data",

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * You can instruct DataTables to load data from an external
     * source using this parameter (use aData if you want to pass data in you
     * already have). Simply provide a url a JSON object can be obtained from.
     *  @type string
     *  @default null
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.ajaxSource
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    "sAjaxSource": null,

    /**
     * This initialisation variable allows you to specify exactly where in the
     * DOM you want DataTables to inject the various controls it adds to the page
     * (for example you might want the pagination controls at the top of the
     * table). DIV elements (with or without a custom class) can also be added to
     * aid styling. The follow syntax is used:
     *   <ul>
     *     <li>The following options are allowed:
     *       <ul>
     *         <li>'l' - Length changing</li>
     *         <li>'f' - Filtering input</li>
     *         <li>'t' - The table!</li>
     *         <li>'i' - Information</li>
     *         <li>'p' - Pagination</li>
     *         <li>'r' - pRocessing</li>
     *       </ul>
     *     </li>
     *     <li>The following constants are allowed:
     *       <ul>
     *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
     *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
     *       </ul>
     *     </li>
     *     <li>The following syntax is expected:
     *       <ul>
     *         <li>'&lt;' and '&gt;' - div elements</li>
     *         <li>'&lt;"class" and '&gt;' - div with a class</li>
     *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
     *       </ul>
     *     </li>
     *     <li>Examples:
     *       <ul>
     *         <li>'&lt;"wrapper"flipt&gt;'</li>
     *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
     *       </ul>
     *     </li>
     *   </ul>
     *  @type string
     *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
     *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.dom
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
     *      } );
     *    } );
     */
    "sDom": "lfrtip",

    /**
     * Search delay option. This will throttle full table searches that use the
     * DataTables provided search input element (it does not effect calls to
     * `dt-api search()`, providing a delay before the search is made.
     *  @type integer
     *  @default 0
     *
     *  @dtopt Options
     *  @name DataTable.defaults.searchDelay
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "searchDelay": 200
     *      } );
     *    } )
     */
    "searchDelay": null,

    /**
     * DataTables features six different built-in options for the buttons to
     * display for pagination control:
     *
     * * `numbers` - Page number buttons only
     * * `simple` - 'Previous' and 'Next' buttons only
     * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
     * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
     * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
     * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
     *  
     * Further methods can be added using {@link DataTable.ext.oPagination}.
     *  @type string
     *  @default simple_numbers
     *
     *  @dtopt Options
     *  @name DataTable.defaults.pagingType
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "pagingType": "full_numbers"
     *      } );
     *    } )
     */
    "sPaginationType": "simple_numbers",

    /**
     * Enable horizontal scrolling. When a table is too wide to fit into a
     * certain layout, or you have a large number of columns in the table, you
     * can enable x-scrolling to show the table in a viewport, which can be
     * scrolled. This property can be `true` which will allow the table to
     * scroll horizontally when needed, or any CSS unit, or a number (in which
     * case it will be treated as a pixel measurement). Setting as simply `true`
     * is recommended.
     *  @type boolean|string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Features
     *  @name DataTable.defaults.scrollX
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollX": true,
     *        "scrollCollapse": true
     *      } );
     *    } );
     */
    "sScrollX": "",

    /**
     * This property can be used to force a DataTable to use more width than it
     * might otherwise do when x-scrolling is enabled. For example if you have a
     * table which requires to be well spaced, this parameter is useful for
     * "over-sizing" the table, and thus forcing scrolling. This property can by
     * any CSS unit, or a number (in which case it will be treated as a pixel
     * measurement).
     *  @type string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Options
     *  @name DataTable.defaults.scrollXInner
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollX": "100%",
     *        "scrollXInner": "110%"
     *      } );
     *    } );
     */
    "sScrollXInner": "",

    /**
     * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
     * to the given height, and enable scrolling for any data which overflows the
     * current viewport. This can be used as an alternative to paging to display
     * a lot of data in a small area (although paging and scrolling can both be
     * enabled at the same time). This property can be any CSS unit, or a number
     * (in which case it will be treated as a pixel measurement).
     *  @type string
     *  @default <i>blank string - i.e. disabled</i>
     *
     *  @dtopt Features
     *  @name DataTable.defaults.scrollY
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "scrollY": "200px",
     *        "paginate": false
     *      } );
     *    } );
     */
    "sScrollY": "",

    /**
     * __Deprecated__ The functionality provided by this parameter has now been
     * superseded by that provided through `ajax`, which should be used instead.
     *
     * Set the HTTP method that is used to make the Ajax call for server-side
     * processing or Ajax sourced data.
     *  @type string
     *  @default GET
     *
     *  @dtopt Options
     *  @dtopt Server-side
     *  @name DataTable.defaults.serverMethod
     *
     *  @deprecated 1.10. Please use `ajax` for this functionality now.
     */
    "sServerMethod": "GET",

    /**
     * DataTables makes use of renderers when displaying HTML elements for
     * a table. These renderers can be added or modified by plug-ins to
     * generate suitable mark-up for a site. For example the Bootstrap
     * integration plug-in for DataTables uses a paging button renderer to
     * display pagination buttons in the mark-up required by Bootstrap.
     *
     * For further information about the renderers available see
     * DataTable.ext.renderer
     *  @type string|object
     *  @default null
     *
     *  @name DataTable.defaults.renderer
     *
     */
    "renderer": null,

    /**
     * Set the data property name that DataTables should use to get a row's id
     * to set as the `id` property in the node.
     *  @type string
     *  @default DT_RowId
     *
     *  @name DataTable.defaults.rowId
     */
    "rowId": "DT_RowId"
  };

  _fnHungarianMap(DataTable.defaults);
  /*
   * Developer note - See note in model.defaults.js about the use of Hungarian
   * notation and camel case.
   */

  /**
   * Column options that can be given to DataTables at initialisation time.
   *  @namespace
   */


  DataTable.defaults.column = {
    /**
     * Define which column(s) an order will occur on for this column. This
     * allows a column's ordering to take multiple columns into account when
     * doing a sort or use the data from a different column. For example first
     * name / last name columns make sense to do a multi-column sort over the
     * two columns.
     *  @type array|int
     *  @default null <i>Takes the value of the column index automatically</i>
     *
     *  @name DataTable.defaults.column.orderData
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
     *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
     *          { "orderData": 2, "targets": [ 2 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "orderData": [ 0, 1 ] },
     *          { "orderData": [ 1, 0 ] },
     *          { "orderData": 2 },
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    "aDataSort": null,
    "iDataSort": -1,

    /**
     * You can control the default ordering direction, and even alter the
     * behaviour of the sort handler (i.e. only allow ascending ordering etc)
     * using this parameter.
     *  @type array
     *  @default [ 'asc', 'desc' ]
     *
     *  @name DataTable.defaults.column.orderSequence
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
     *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
     *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          { "orderSequence": [ "asc" ] },
     *          { "orderSequence": [ "desc", "asc", "asc" ] },
     *          { "orderSequence": [ "desc" ] },
     *          null
     *        ]
     *      } );
     *    } );
     */
    "asSorting": ['asc', 'desc'],

    /**
     * Enable or disable filtering on the data in this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.searchable
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "searchable": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "searchable": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
    "bSearchable": true,

    /**
     * Enable or disable ordering on this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.orderable
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderable": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "orderable": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
    "bSortable": true,

    /**
     * Enable or disable the display of this column.
     *  @type boolean
     *  @default true
     *
     *  @name DataTable.defaults.column.visible
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "visible": false, "targets": [ 0 ] }
     *        ] } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "visible": false },
     *          null,
     *          null,
     *          null,
     *          null
     *        ] } );
     *    } );
     */
    "bVisible": true,

    /**
     * Developer definable function that is called whenever a cell is created (Ajax source,
     * etc) or processed for input (DOM source). This can be used as a compliment to mRender
     * allowing you to modify the DOM element (add background colour for example) when the
     * element is available.
     *  @type function
     *  @param {element} td The TD node that has been created
     *  @param {*} cellData The Data for the cell
     *  @param {array|object} rowData The data for the whole row
     *  @param {int} row The row index for the aoData data store
     *  @param {int} col The column index for aoColumns
     *
     *  @name DataTable.defaults.column.createdCell
     *  @dtopt Columns
     *
     *  @example
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [3],
     *          "createdCell": function (td, cellData, rowData, row, col) {
     *            if ( cellData == "1.7" ) {
     *              $(td).css('color', 'blue')
     *            }
     *          }
     *        } ]
     *      });
     *    } );
     */
    "fnCreatedCell": null,

    /**
     * This parameter has been replaced by `data` in DataTables to ensure naming
     * consistency. `dataProp` can still be used, as there is backwards
     * compatibility in DataTables for this option, but it is strongly
     * recommended that you use `data` in preference to `dataProp`.
     *  @name DataTable.defaults.column.dataProp
     */

    /**
     * This property can be used to read data from any data source property,
     * including deeply nested objects / properties. `data` can be given in a
     * number of different ways which effect its behaviour:
     *
     * * `integer` - treated as an array index for the data source. This is the
     *   default that DataTables uses (incrementally increased for each column).
     * * `string` - read an object property from the data source. There are
     *   three 'special' options that can be used in the string to alter how
     *   DataTables reads the data from the source object:
     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
     *      Javascript to read from nested objects, so to can the options
     *      specified in `data`. For example: `browser.version` or
     *      `browser.name`. If your object parameter name contains a period, use
     *      `\\` to escape it - i.e. `first\\.name`.
     *    * `[]` - Array notation. DataTables can automatically combine data
     *      from and array source, joining the data with the characters provided
     *      between the two brackets. For example: `name[, ]` would provide a
     *      comma-space separated list from the source array. If no characters
     *      are provided between the brackets, the original array source is
     *      returned.
     *    * `()` - Function notation. Adding `()` to the end of a parameter will
     *      execute a function of the name given. For example: `browser()` for a
     *      simple function on the data source, `browser.version()` for a
     *      function in a nested property or even `browser().version` to get an
     *      object property if the function called returns an object. Note that
     *      function notation is recommended for use in `render` rather than
     *      `data` as it is much simpler to use as a renderer.
     * * `null` - use the original data source for the row rather than plucking
     *   data directly from it. This action has effects on two other
     *   initialisation options:
     *    * `defaultContent` - When null is given as the `data` option and
     *      `defaultContent` is specified for the column, the value defined by
     *      `defaultContent` will be used for the cell.
     *    * `render` - When null is used for the `data` option and the `render`
     *      option is specified for the column, the whole data source for the
     *      row is used for the renderer.
     * * `function` - the function given will be executed whenever DataTables
     *   needs to set or get the data for a cell in the column. The function
     *   takes three parameters:
     *    * Parameters:
     *      * `{array|object}` The data source for the row
     *      * `{string}` The type call data requested - this will be 'set' when
     *        setting data or 'filter', 'display', 'type', 'sort' or undefined
     *        when gathering data. Note that when `undefined` is given for the
     *        type DataTables expects to get the raw data for the object back<
     *      * `{*}` Data to set when the second parameter is 'set'.
     *    * Return:
     *      * The return value from the function is not required when 'set' is
     *        the type of call, but otherwise the return is what will be used
     *        for the data requested.
     *
     * Note that `data` is a getter and setter option. If you just require
     * formatting of data for output, you will likely want to use `render` which
     * is simply a getter and thus simpler to use.
     *
     * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
     * name change reflects the flexibility of this property and is consistent
     * with the naming of mRender. If 'mDataProp' is given, then it will still
     * be used by DataTables, as it automatically maps the old name to the new
     * if required.
     *
     *  @type string|int|function|null
     *  @default null <i>Use automatically calculated column index</i>
     *
     *  @name DataTable.defaults.column.data
     *  @dtopt Columns
     *
     *  @example
     *    // Read table data from objects
     *    // JSON structure for each row:
     *    //   {
     *    //      "engine": {value},
     *    //      "browser": {value},
     *    //      "platform": {value},
     *    //      "version": {value},
     *    //      "grade": {value}
     *    //   }
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/objects.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          { "data": "platform" },
     *          { "data": "version" },
     *          { "data": "grade" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Read information from deeply nested objects
     *    // JSON structure for each row:
     *    //   {
     *    //      "engine": {value},
     *    //      "browser": {value},
     *    //      "platform": {
     *    //         "inner": {value}
     *    //      },
     *    //      "details": [
     *    //         {value}, {value}
     *    //      ]
     *    //   }
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/deep.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          { "data": "platform.inner" },
     *          { "data": "platform.details.0" },
     *          { "data": "platform.details.1" }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `data` as a function to provide different information for
     *    // sorting, filtering and display. In this case, currency (price)
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": function ( source, type, val ) {
     *            if (type === 'set') {
     *              source.price = val;
     *              // Store the computed dislay and filter values for efficiency
     *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
     *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
     *              return;
     *            }
     *            else if (type === 'display') {
     *              return source.price_display;
     *            }
     *            else if (type === 'filter') {
     *              return source.price_filter;
     *            }
     *            // 'sort', 'type' and undefined all just use the integer
     *            return source.price;
     *          }
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using default content
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null,
     *          "defaultContent": "Click to edit"
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using array notation - outputting a list from an array
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": "name[, ]"
     *        } ]
     *      } );
     *    } );
     *
     */
    "mData": null,

    /**
     * This property is the rendering partner to `data` and it is suggested that
     * when you want to manipulate data for display (including filtering,
     * sorting etc) without altering the underlying data for the table, use this
     * property. `render` can be considered to be the the read only companion to
     * `data` which is read / write (then as such more complex). Like `data`
     * this option can be given in a number of different ways to effect its
     * behaviour:
     *
     * * `integer` - treated as an array index for the data source. This is the
     *   default that DataTables uses (incrementally increased for each column).
     * * `string` - read an object property from the data source. There are
     *   three 'special' options that can be used in the string to alter how
     *   DataTables reads the data from the source object:
     *    * `.` - Dotted Javascript notation. Just as you use a `.` in
     *      Javascript to read from nested objects, so to can the options
     *      specified in `data`. For example: `browser.version` or
     *      `browser.name`. If your object parameter name contains a period, use
     *      `\\` to escape it - i.e. `first\\.name`.
     *    * `[]` - Array notation. DataTables can automatically combine data
     *      from and array source, joining the data with the characters provided
     *      between the two brackets. For example: `name[, ]` would provide a
     *      comma-space separated list from the source array. If no characters
     *      are provided between the brackets, the original array source is
     *      returned.
     *    * `()` - Function notation. Adding `()` to the end of a parameter will
     *      execute a function of the name given. For example: `browser()` for a
     *      simple function on the data source, `browser.version()` for a
     *      function in a nested property or even `browser().version` to get an
     *      object property if the function called returns an object.
     * * `object` - use different data for the different data types requested by
     *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
     *   of the object is the data type the property refers to and the value can
     *   defined using an integer, string or function using the same rules as
     *   `render` normally does. Note that an `_` option _must_ be specified.
     *   This is the default value to use if you haven't specified a value for
     *   the data type requested by DataTables.
     * * `function` - the function given will be executed whenever DataTables
     *   needs to set or get the data for a cell in the column. The function
     *   takes three parameters:
     *    * Parameters:
     *      * {array|object} The data source for the row (based on `data`)
     *      * {string} The type call data requested - this will be 'filter',
     *        'display', 'type' or 'sort'.
     *      * {array|object} The full data source for the row (not based on
     *        `data`)
     *    * Return:
     *      * The return value from the function is what will be used for the
     *        data requested.
     *
     *  @type string|int|function|object|null
     *  @default null Use the data source value.
     *
     *  @name DataTable.defaults.column.render
     *  @dtopt Columns
     *
     *  @example
     *    // Create a comma separated list from an array of objects
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "ajaxSource": "sources/deep.txt",
     *        "columns": [
     *          { "data": "engine" },
     *          { "data": "browser" },
     *          {
     *            "data": "platform",
     *            "render": "[, ].name"
     *          }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Execute a function to obtain data
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null, // Use the full data source object for the renderer's source
     *          "render": "browserName()"
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // As an object, extracting different data for the different types
     *    // This would be used with a data source such as:
     *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
     *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
     *    // (which has both forms) is used for filtering for if a user inputs either format, while
     *    // the formatted phone number is the one that is shown in the table.
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": null, // Use the full data source object for the renderer's source
     *          "render": {
     *            "_": "phone",
     *            "filter": "phone_filter",
     *            "display": "phone_display"
     *          }
     *        } ]
     *      } );
     *    } );
     *
     *  @example
     *    // Use as a function to create a link from the data source
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "data": "download_link",
     *          "render": function ( data, type, full ) {
     *            return '<a href="'+data+'">Download</a>';
     *          }
     *        } ]
     *      } );
     *    } );
     */
    "mRender": null,

    /**
     * Change the cell type created for the column - either TD cells or TH cells. This
     * can be useful as TH cells have semantic meaning in the table body, allowing them
     * to act as a header for a row (you may wish to add scope='row' to the TH elements).
     *  @type string
     *  @default td
     *
     *  @name DataTable.defaults.column.cellType
     *  @dtopt Columns
     *
     *  @example
     *    // Make the first column use TH cells
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [ {
     *          "targets": [ 0 ],
     *          "cellType": "th"
     *        } ]
     *      } );
     *    } );
     */
    "sCellType": "td",

    /**
     * Class to give to each cell in this column.
     *  @type string
     *  @default <i>Empty string</i>
     *
     *  @name DataTable.defaults.column.class
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "class": "my_class", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "class": "my_class" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    "sClass": "",

    /**
     * When DataTables calculates the column widths to assign to each column,
     * it finds the longest string in each column and then constructs a
     * temporary table and reads the widths from that. The problem with this
     * is that "mmm" is much wider then "iiii", but the latter is a longer
     * string - thus the calculation can go wrong (doing it properly and putting
     * it into an DOM object and measuring that is horribly(!) slow). Thus as
     * a "work around" we provide this option. It will append its value to the
     * text that is found to be the longest string for the column - i.e. padding.
     * Generally you shouldn't need this!
     *  @type string
     *  @default <i>Empty string<i>
     *
     *  @name DataTable.defaults.column.contentPadding
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          null,
     *          {
     *            "contentPadding": "mmm"
     *          }
     *        ]
     *      } );
     *    } );
     */
    "sContentPadding": "",

    /**
     * Allows a default value to be given for a column's data, and will be used
     * whenever a null data source is encountered (this can be because `data`
     * is set to null, or because the data source itself is null).
     *  @type string
     *  @default null
     *
     *  @name DataTable.defaults.column.defaultContent
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          {
     *            "data": null,
     *            "defaultContent": "Edit",
     *            "targets": [ -1 ]
     *          }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          null,
     *          {
     *            "data": null,
     *            "defaultContent": "Edit"
     *          }
     *        ]
     *      } );
     *    } );
     */
    "sDefaultContent": null,

    /**
     * This parameter is only used in DataTables' server-side processing. It can
     * be exceptionally useful to know what columns are being displayed on the
     * client side, and to map these to database fields. When defined, the names
     * also allow DataTables to reorder information from the server if it comes
     * back in an unexpected order (i.e. if you switch your columns around on the
     * client-side, your server-side code does not also need updating).
     *  @type string
     *  @default <i>Empty string</i>
     *
     *  @name DataTable.defaults.column.name
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "name": "engine", "targets": [ 0 ] },
     *          { "name": "browser", "targets": [ 1 ] },
     *          { "name": "platform", "targets": [ 2 ] },
     *          { "name": "version", "targets": [ 3 ] },
     *          { "name": "grade", "targets": [ 4 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "name": "engine" },
     *          { "name": "browser" },
     *          { "name": "platform" },
     *          { "name": "version" },
     *          { "name": "grade" }
     *        ]
     *      } );
     *    } );
     */
    "sName": "",

    /**
     * Defines a data source type for the ordering which can be used to read
     * real-time information from the table (updating the internally cached
     * version) prior to ordering. This allows ordering to occur on user
     * editable elements such as form inputs.
     *  @type string
     *  @default std
     *
     *  @name DataTable.defaults.column.orderDataType
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
     *          { "type": "numeric", "targets": [ 3 ] },
     *          { "orderDataType": "dom-select", "targets": [ 4 ] },
     *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          null,
     *          null,
     *          { "orderDataType": "dom-text" },
     *          { "orderDataType": "dom-text", "type": "numeric" },
     *          { "orderDataType": "dom-select" },
     *          { "orderDataType": "dom-checkbox" }
     *        ]
     *      } );
     *    } );
     */
    "sSortDataType": "std",

    /**
     * The title of this column.
     *  @type string
     *  @default null <i>Derived from the 'TH' value for this column in the
     *    original HTML table.</i>
     *
     *  @name DataTable.defaults.column.title
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "title": "My column title", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "title": "My column title" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    "sTitle": null,

    /**
     * The type allows you to specify how the data for this column will be
     * ordered. Four types (string, numeric, date and html (which will strip
     * HTML tags before ordering)) are currently available. Note that only date
     * formats understood by Javascript's Date() object will be accepted as type
     * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
     * 'numeric', 'date' or 'html' (by default). Further types can be adding
     * through plug-ins.
     *  @type string
     *  @default null <i>Auto-detected from raw data</i>
     *
     *  @name DataTable.defaults.column.type
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "type": "html", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "type": "html" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    "sType": null,

    /**
     * Defining the width of the column, this parameter may take any CSS value
     * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
     * been given a specific width through this interface ensuring that the table
     * remains readable.
     *  @type string
     *  @default null <i>Automatic</i>
     *
     *  @name DataTable.defaults.column.width
     *  @dtopt Columns
     *
     *  @example
     *    // Using `columnDefs`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columnDefs": [
     *          { "width": "20%", "targets": [ 0 ] }
     *        ]
     *      } );
     *    } );
     *
     *  @example
     *    // Using `columns`
     *    $(document).ready( function() {
     *      $('#example').dataTable( {
     *        "columns": [
     *          { "width": "20%" },
     *          null,
     *          null,
     *          null,
     *          null
     *        ]
     *      } );
     *    } );
     */
    "sWidth": null
  };

  _fnHungarianMap(DataTable.defaults.column);
  /**
   * DataTables settings object - this holds all the information needed for a
   * given table, including configuration, data and current application of the
   * table options. DataTables does not have a single instance for each DataTable
   * with the settings attached to that instance, but rather instances of the
   * DataTable "class" are created on-the-fly as needed (typically by a
   * $().dataTable() call) and the settings object is then applied to that
   * instance.
   *
   * Note that this object is related to {@link DataTable.defaults} but this
   * one is the internal data store for DataTables's cache of columns. It should
   * NOT be manipulated outside of DataTables. Any configuration should be done
   * through the initialisation options.
   *  @namespace
   *  @todo Really should attach the settings object to individual instances so we
   *    don't need to create new instances on each $().dataTable() call (if the
   *    table already exists). It would also save passing oSettings around and
   *    into every single function. However, this is a very significant
   *    architecture change for DataTables and will almost certainly break
   *    backwards compatibility with older installations. This is something that
   *    will be done in 2.0.
   */


  DataTable.models.oSettings = {
    /**
     * Primary features of DataTables and their enablement state.
     *  @namespace
     */
    "oFeatures": {
      /**
       * Flag to say if DataTables should automatically try to calculate the
       * optimum table and columns widths (true) or not (false).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bAutoWidth": null,

      /**
       * Delay the creation of TR and TD elements until they are actually
       * needed by a driven page draw. This can give a significant speed
       * increase for Ajax source and Javascript source data, but makes no
       * difference at all fro DOM and server-side processing tables.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bDeferRender": null,

      /**
       * Enable filtering on the table or not. Note that if this is disabled
       * then there is no filtering at all on the table, including fnFilter.
       * To just remove the filtering input use sDom and remove the 'f' option.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bFilter": null,

      /**
       * Table information element (the 'Showing x of y records' div) enable
       * flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bInfo": null,

      /**
       * Present a user control allowing the end user to change the page size
       * when pagination is enabled.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bLengthChange": null,

      /**
       * Pagination enabled or not. Note that if this is disabled then length
       * changing must also be disabled.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bPaginate": null,

      /**
       * Processing indicator enable flag whenever DataTables is enacting a
       * user request - typically an Ajax request for server-side processing.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bProcessing": null,

      /**
       * Server-side processing enabled flag - when enabled DataTables will
       * get all data from the server for every draw - there is no filtering,
       * sorting or paging done on the client-side.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bServerSide": null,

      /**
       * Sorting enablement flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bSort": null,

      /**
       * Multi-column sorting
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bSortMulti": null,

      /**
       * Apply a class to the columns which are being sorted to provide a
       * visual highlight or not. This can slow things down when enabled since
       * there is a lot of DOM interaction.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bSortClasses": null,

      /**
       * State saving enablement flag.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bStateSave": null
    },

    /**
     * Scrolling settings for a table.
     *  @namespace
     */
    "oScroll": {
      /**
       * When the table is shorter in height than sScrollY, collapse the
       * table container down to the height of the table (when true).
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type boolean
       */
      "bCollapse": null,

      /**
       * Width of the scrollbar for the web-browser's platform. Calculated
       * during table initialisation.
       *  @type int
       *  @default 0
       */
      "iBarWidth": 0,

      /**
       * Viewport width for horizontal scrolling. Horizontal scrolling is
       * disabled if an empty string.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
      "sX": null,

      /**
       * Width to expand the table to when using x-scrolling. Typically you
       * should not need to use this.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       *  @deprecated
       */
      "sXInner": null,

      /**
       * Viewport height for vertical scrolling. Vertical scrolling is disabled
       * if an empty string.
       * Note that this parameter will be set by the initialisation routine. To
       * set a default use {@link DataTable.defaults}.
       *  @type string
       */
      "sY": null
    },

    /**
     * Language information for the table.
     *  @namespace
     *  @extends DataTable.defaults.oLanguage
     */
    "oLanguage": {
      /**
       * Information callback function. See
       * {@link DataTable.defaults.fnInfoCallback}
       *  @type function
       *  @default null
       */
      "fnInfoCallback": null
    },

    /**
     * Browser support parameters
     *  @namespace
     */
    "oBrowser": {
      /**
       * Indicate if the browser incorrectly calculates width:100% inside a
       * scrolling element (IE6/7)
       *  @type boolean
       *  @default false
       */
      "bScrollOversize": false,

      /**
       * Determine if the vertical scrollbar is on the right or left of the
       * scrolling container - needed for rtl language layout, although not
       * all browsers move the scrollbar (Safari).
       *  @type boolean
       *  @default false
       */
      "bScrollbarLeft": false,

      /**
       * Flag for if `getBoundingClientRect` is fully supported or not
       *  @type boolean
       *  @default false
       */
      "bBounding": false,

      /**
       * Browser scrollbar width
       *  @type integer
       *  @default 0
       */
      "barWidth": 0
    },
    "ajax": null,

    /**
     * Array referencing the nodes which are used for the features. The
     * parameters of this object match what is allowed by sDom - i.e.
     *   <ul>
     *     <li>'l' - Length changing</li>
     *     <li>'f' - Filtering input</li>
     *     <li>'t' - The table!</li>
     *     <li>'i' - Information</li>
     *     <li>'p' - Pagination</li>
     *     <li>'r' - pRocessing</li>
     *   </ul>
     *  @type array
     *  @default []
     */
    "aanFeatures": [],

    /**
     * Store data information - see {@link DataTable.models.oRow} for detailed
     * information.
     *  @type array
     *  @default []
     */
    "aoData": [],

    /**
     * Array of indexes which are in the current display (after filtering etc)
     *  @type array
     *  @default []
     */
    "aiDisplay": [],

    /**
     * Array of indexes for display - no filtering
     *  @type array
     *  @default []
     */
    "aiDisplayMaster": [],

    /**
     * Map of row ids to data indexes
     *  @type object
     *  @default {}
     */
    "aIds": {},

    /**
     * Store information about each column that is in use
     *  @type array
     *  @default []
     */
    "aoColumns": [],

    /**
     * Store information about the table's header
     *  @type array
     *  @default []
     */
    "aoHeader": [],

    /**
     * Store information about the table's footer
     *  @type array
     *  @default []
     */
    "aoFooter": [],

    /**
     * Store the applied global search information in case we want to force a
     * research or compare the old search to a new one.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @namespace
     *  @extends DataTable.models.oSearch
     */
    "oPreviousSearch": {},

    /**
     * Store the applied search for each column - see
     * {@link DataTable.models.oSearch} for the format that is used for the
     * filtering information for each column.
     *  @type array
     *  @default []
     */
    "aoPreSearchCols": [],

    /**
     * Sorting that is applied to the table. Note that the inner arrays are
     * used in the following manner:
     * <ul>
     *   <li>Index 0 - column number</li>
     *   <li>Index 1 - current sorting direction</li>
     * </ul>
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @todo These inner arrays should really be objects
     */
    "aaSorting": null,

    /**
     * Sorting that is always applied to the table (i.e. prefixed in front of
     * aaSorting).
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
    "aaSortingFixed": [],

    /**
     * Classes to use for the striping of a table.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
    "asStripeClasses": null,

    /**
     * If restoring a table - we should restore its striping classes as well
     *  @type array
     *  @default []
     */
    "asDestroyStripes": [],

    /**
     * If restoring a table - we should restore its width
     *  @type int
     *  @default 0
     */
    "sDestroyWidth": 0,

    /**
     * Callback functions array for every time a row is inserted (i.e. on a draw).
     *  @type array
     *  @default []
     */
    "aoRowCallback": [],

    /**
     * Callback functions for the header on each draw.
     *  @type array
     *  @default []
     */
    "aoHeaderCallback": [],

    /**
     * Callback function for the footer on each draw.
     *  @type array
     *  @default []
     */
    "aoFooterCallback": [],

    /**
     * Array of callback functions for draw callback functions
     *  @type array
     *  @default []
     */
    "aoDrawCallback": [],

    /**
     * Array of callback functions for row created function
     *  @type array
     *  @default []
     */
    "aoRowCreatedCallback": [],

    /**
     * Callback functions for just before the table is redrawn. A return of
     * false will be used to cancel the draw.
     *  @type array
     *  @default []
     */
    "aoPreDrawCallback": [],

    /**
     * Callback functions for when the table has been initialised.
     *  @type array
     *  @default []
     */
    "aoInitComplete": [],

    /**
     * Callbacks for modifying the settings to be stored for state saving, prior to
     * saving state.
     *  @type array
     *  @default []
     */
    "aoStateSaveParams": [],

    /**
     * Callbacks for modifying the settings that have been stored for state saving
     * prior to using the stored values to restore the state.
     *  @type array
     *  @default []
     */
    "aoStateLoadParams": [],

    /**
     * Callbacks for operating on the settings object once the saved state has been
     * loaded
     *  @type array
     *  @default []
     */
    "aoStateLoaded": [],

    /**
     * Cache the table ID for quick access
     *  @type string
     *  @default <i>Empty string</i>
     */
    "sTableId": "",

    /**
     * The TABLE node for the main table
     *  @type node
     *  @default null
     */
    "nTable": null,

    /**
     * Permanent ref to the thead element
     *  @type node
     *  @default null
     */
    "nTHead": null,

    /**
     * Permanent ref to the tfoot element - if it exists
     *  @type node
     *  @default null
     */
    "nTFoot": null,

    /**
     * Permanent ref to the tbody element
     *  @type node
     *  @default null
     */
    "nTBody": null,

    /**
     * Cache the wrapper node (contains all DataTables controlled elements)
     *  @type node
     *  @default null
     */
    "nTableWrapper": null,

    /**
     * Indicate if when using server-side processing the loading of data
     * should be deferred until the second draw.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     *  @default false
     */
    "bDeferLoading": false,

    /**
     * Indicate if all required information has been read in
     *  @type boolean
     *  @default false
     */
    "bInitialised": false,

    /**
     * Information about open rows. Each object in the array has the parameters
     * 'nTr' and 'nParent'
     *  @type array
     *  @default []
     */
    "aoOpenRows": [],

    /**
     * Dictate the positioning of DataTables' control elements - see
     * {@link DataTable.model.oInit.sDom}.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default null
     */
    "sDom": null,

    /**
     * Search delay (in mS)
     *  @type integer
     *  @default null
     */
    "searchDelay": null,

    /**
     * Which type of pagination should be used.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default two_button
     */
    "sPaginationType": "two_button",

    /**
     * The state duration (for `stateSave`) in seconds.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type int
     *  @default 0
     */
    "iStateDuration": 0,

    /**
     * Array of callback functions for state saving. Each array element is an
     * object with the following parameters:
     *   <ul>
     *     <li>function:fn - function to call. Takes two parameters, oSettings
     *       and the JSON string to save that has been thus far created. Returns
     *       a JSON string to be inserted into a json object
     *       (i.e. '"param": [ 0, 1, 2]')</li>
     *     <li>string:sName - name of callback</li>
     *   </ul>
     *  @type array
     *  @default []
     */
    "aoStateSave": [],

    /**
     * Array of callback functions for state loading. Each array element is an
     * object with the following parameters:
     *   <ul>
     *     <li>function:fn - function to call. Takes two parameters, oSettings
     *       and the object stored. May return false to cancel state loading</li>
     *     <li>string:sName - name of callback</li>
     *   </ul>
     *  @type array
     *  @default []
     */
    "aoStateLoad": [],

    /**
     * State that was saved. Useful for back reference
     *  @type object
     *  @default null
     */
    "oSavedState": null,

    /**
     * State that was loaded. Useful for back reference
     *  @type object
     *  @default null
     */
    "oLoadedState": null,

    /**
     * Source url for AJAX data for the table.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     *  @default null
     */
    "sAjaxSource": null,

    /**
     * Property from a given object from which to read the table data from. This
     * can be an empty string (when not server-side processing), in which case
     * it is  assumed an an array is given directly.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     */
    "sAjaxDataProp": null,

    /**
     * Note if draw should be blocked while getting data
     *  @type boolean
     *  @default true
     */
    "bAjaxDataGet": true,

    /**
     * The last jQuery XHR object that was used for server-side data gathering.
     * This can be used for working with the XHR information in one of the
     * callbacks
     *  @type object
     *  @default null
     */
    "jqXHR": null,

    /**
     * JSON returned from the server in the last Ajax request
     *  @type object
     *  @default undefined
     */
    "json": undefined,

    /**
     * Data submitted as part of the last Ajax request
     *  @type object
     *  @default undefined
     */
    "oAjaxData": undefined,

    /**
     * Function to get the server-side data.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type function
     */
    "fnServerData": null,

    /**
     * Functions which are called prior to sending an Ajax request so extra
     * parameters can easily be sent to the server
     *  @type array
     *  @default []
     */
    "aoServerParams": [],

    /**
     * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
     * required).
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type string
     */
    "sServerMethod": null,

    /**
     * Format numbers for display.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type function
     */
    "fnFormatNumber": null,

    /**
     * List of options that can be used for the user selectable length menu.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type array
     *  @default []
     */
    "aLengthMenu": null,

    /**
     * Counter for the draws that the table does. Also used as a tracker for
     * server-side processing
     *  @type int
     *  @default 0
     */
    "iDraw": 0,

    /**
     * Indicate if a redraw is being done - useful for Ajax
     *  @type boolean
     *  @default false
     */
    "bDrawing": false,

    /**
     * Draw index (iDraw) of the last error when parsing the returned data
     *  @type int
     *  @default -1
     */
    "iDrawError": -1,

    /**
     * Paging display length
     *  @type int
     *  @default 10
     */
    "_iDisplayLength": 10,

    /**
     * Paging start point - aiDisplay index
     *  @type int
     *  @default 0
     */
    "_iDisplayStart": 0,

    /**
     * Server-side processing - number of records in the result set
     * (i.e. before filtering), Use fnRecordsTotal rather than
     * this property to get the value of the number of records, regardless of
     * the server-side processing setting.
     *  @type int
     *  @default 0
     *  @private
     */
    "_iRecordsTotal": 0,

    /**
     * Server-side processing - number of records in the current display set
     * (i.e. after filtering). Use fnRecordsDisplay rather than
     * this property to get the value of the number of records, regardless of
     * the server-side processing setting.
     *  @type boolean
     *  @default 0
     *  @private
     */
    "_iRecordsDisplay": 0,

    /**
     * The classes to use for the table
     *  @type object
     *  @default {}
     */
    "oClasses": {},

    /**
     * Flag attached to the settings object so you can check in the draw
     * callback if filtering has been done in the draw. Deprecated in favour of
     * events.
     *  @type boolean
     *  @default false
     *  @deprecated
     */
    "bFiltered": false,

    /**
     * Flag attached to the settings object so you can check in the draw
     * callback if sorting has been done in the draw. Deprecated in favour of
     * events.
     *  @type boolean
     *  @default false
     *  @deprecated
     */
    "bSorted": false,

    /**
     * Indicate that if multiple rows are in the header and there is more than
     * one unique cell per column, if the top one (true) or bottom one (false)
     * should be used for sorting / title by DataTables.
     * Note that this parameter will be set by the initialisation routine. To
     * set a default use {@link DataTable.defaults}.
     *  @type boolean
     */
    "bSortCellsTop": null,

    /**
     * Initialisation object that is used for the table
     *  @type object
     *  @default null
     */
    "oInit": null,

    /**
     * Destroy callback functions - for plug-ins to attach themselves to the
     * destroy so they can clean up markup and events.
     *  @type array
     *  @default []
     */
    "aoDestroyCallback": [],

    /**
     * Get the number of records in the current record set, before filtering
     *  @type function
     */
    "fnRecordsTotal": function fnRecordsTotal() {
      return _fnDataSource(this) == 'ssp' ? this._iRecordsTotal * 1 : this.aiDisplayMaster.length;
    },

    /**
     * Get the number of records in the current record set, after filtering
     *  @type function
     */
    "fnRecordsDisplay": function fnRecordsDisplay() {
      return _fnDataSource(this) == 'ssp' ? this._iRecordsDisplay * 1 : this.aiDisplay.length;
    },

    /**
     * Get the display end point - aiDisplay index
     *  @type function
     */
    "fnDisplayEnd": function fnDisplayEnd() {
      var len = this._iDisplayLength,
          start = this._iDisplayStart,
          calc = start + len,
          records = this.aiDisplay.length,
          features = this.oFeatures,
          paginate = features.bPaginate;

      if (features.bServerSide) {
        return paginate === false || len === -1 ? start + records : Math.min(start + len, this._iRecordsDisplay);
      } else {
        return !paginate || calc > records || len === -1 ? records : calc;
      }
    },

    /**
     * The DataTables object for this table
     *  @type object
     *  @default null
     */
    "oInstance": null,

    /**
     * Unique identifier for each instance of the DataTables object. If there
     * is an ID on the table node, then it takes that value, otherwise an
     * incrementing internal counter is used.
     *  @type string
     *  @default null
     */
    "sInstance": null,

    /**
     * tabindex attribute value that is added to DataTables control elements, allowing
     * keyboard navigation of the table and its controls.
     */
    "iTabIndex": 0,

    /**
     * DIV container for the footer scrolling table if scrolling
     */
    "nScrollHead": null,

    /**
     * DIV container for the footer scrolling table if scrolling
     */
    "nScrollFoot": null,

    /**
     * Last applied sort
     *  @type array
     *  @default []
     */
    "aLastSort": [],

    /**
     * Stored plug-in instances
     *  @type object
     *  @default {}
     */
    "oPlugins": {},

    /**
     * Function used to get a row's id from the row's data
     *  @type function
     *  @default null
     */
    "rowIdFn": null,

    /**
     * Data location where to store a row's id
     *  @type string
     *  @default null
     */
    "rowId": null
  };
  /**
   * Extension object for DataTables that is used to provide all extension
   * options.
   *
   * Note that the `DataTable.ext` object is available through
   * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
   * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
   *  @namespace
   *  @extends DataTable.models.ext
   */

  /**
   * DataTables extensions
   * 
   * This namespace acts as a collection area for plug-ins that can be used to
   * extend DataTables capabilities. Indeed many of the build in methods
   * use this method to provide their own capabilities (sorting methods for
   * example).
   *
   * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
   * reasons
   *
   *  @namespace
   */

  DataTable.ext = _ext = {
    /**
     * Buttons. For use with the Buttons extension for DataTables. This is
     * defined here so other extensions can define buttons regardless of load
     * order. It is _not_ used by DataTables core.
     *
     *  @type object
     *  @default {}
     */
    buttons: {},

    /**
     * Element class names
     *
     *  @type object
     *  @default {}
     */
    classes: {},

    /**
     * DataTables build type (expanded by the download builder)
     *
     *  @type string
     */
    build: "bs4/dt-1.10.16",

    /**
     * Error reporting.
     * 
     * How should DataTables report an error. Can take the value 'alert',
     * 'throw', 'none' or a function.
     *
     *  @type string|function
     *  @default alert
     */
    errMode: "alert",

    /**
     * Feature plug-ins.
     * 
     * This is an array of objects which describe the feature plug-ins that are
     * available to DataTables. These feature plug-ins are then available for
     * use through the `dom` initialisation option.
     * 
     * Each feature plug-in is described by an object which must have the
     * following properties:
     * 
     * * `fnInit` - function that is used to initialise the plug-in,
     * * `cFeature` - a character so the feature can be enabled by the `dom`
     *   instillation option. This is case sensitive.
     *
     * The `fnInit` function has the following input parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     *
     * And the following return is expected:
     * 
     * * {node|null} The element which contains your feature. Note that the
     *   return may also be void if your plug-in does not require to inject any
     *   DOM elements into DataTables control (`dom`) - for example this might
     *   be useful when developing a plug-in which allows table control via
     *   keyboard entry
     *
     *  @type array
     *
     *  @example
     *    $.fn.dataTable.ext.features.push( {
     *      "fnInit": function( oSettings ) {
     *        return new TableTools( { "oDTSettings": oSettings } );
     *      },
     *      "cFeature": "T"
     *    } );
     */
    feature: [],

    /**
     * Row searching.
     * 
     * This method of searching is complimentary to the default type based
     * searching, and a lot more comprehensive as it allows you complete control
     * over the searching logic. Each element in this array is a function
     * (parameters described below) that is called for every row in the table,
     * and your logic decides if it should be included in the searching data set
     * or not.
     *
     * Searching functions have the following input parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     * 2. `{array|object}` Data for the row to be processed (same as the
     *    original format that was passed in as the data source, or an array
     *    from a DOM data source
     * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
     *    can be useful to retrieve the `TR` element if you need DOM interaction.
     *
     * And the following return is expected:
     *
     * * {boolean} Include the row in the searched result set (true) or not
     *   (false)
     *
     * Note that as with the main search ability in DataTables, technically this
     * is "filtering", since it is subtractive. However, for consistency in
     * naming we call it searching here.
     *
     *  @type array
     *  @default []
     *
     *  @example
     *    // The following example shows custom search being applied to the
     *    // fourth column (i.e. the data[3] index) based on two input values
     *    // from the end-user, matching the data in a certain range.
     *    $.fn.dataTable.ext.search.push(
     *      function( settings, data, dataIndex ) {
     *        var min = document.getElementById('min').value * 1;
     *        var max = document.getElementById('max').value * 1;
     *        var version = data[3] == "-" ? 0 : data[3]*1;
     *
     *        if ( min == "" && max == "" ) {
     *          return true;
     *        }
     *        else if ( min == "" && version < max ) {
     *          return true;
     *        }
     *        else if ( min < version && "" == max ) {
     *          return true;
     *        }
     *        else if ( min < version && version < max ) {
     *          return true;
     *        }
     *        return false;
     *      }
     *    );
     */
    search: [],

    /**
     * Selector extensions
     *
     * The `selector` option can be used to extend the options available for the
     * selector modifier options (`selector-modifier` object data type) that
     * each of the three built in selector types offer (row, column and cell +
     * their plural counterparts). For example the Select extension uses this
     * mechanism to provide an option to select only rows, columns and cells
     * that have been marked as selected by the end user (`{selected: true}`),
     * which can be used in conjunction with the existing built in selector
     * options.
     *
     * Each property is an array to which functions can be pushed. The functions
     * take three attributes:
     *
     * * Settings object for the host table
     * * Options object (`selector-modifier` object type)
     * * Array of selected item indexes
     *
     * The return is an array of the resulting item indexes after the custom
     * selector has been applied.
     *
     *  @type object
     */
    selector: {
      cell: [],
      column: [],
      row: []
    },

    /**
     * Internal functions, exposed for used in plug-ins.
     * 
     * Please note that you should not need to use the internal methods for
     * anything other than a plug-in (and even then, try to avoid if possible).
     * The internal function may change between releases.
     *
     *  @type object
     *  @default {}
     */
    internal: {},

    /**
     * Legacy configuration options. Enable and disable legacy options that
     * are available in DataTables.
     *
     *  @type object
     */
    legacy: {
      /**
       * Enable / disable DataTables 1.9 compatible server-side processing
       * requests
       *
       *  @type boolean
       *  @default null
       */
      ajax: null
    },

    /**
     * Pagination plug-in methods.
     * 
     * Each entry in this object is a function and defines which buttons should
     * be shown by the pagination rendering method that is used for the table:
     * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
     * buttons are displayed in the document, while the functions here tell it
     * what buttons to display. This is done by returning an array of button
     * descriptions (what each button will do).
     *
     * Pagination types (the four built in options and any additional plug-in
     * options defined here) can be used through the `paginationType`
     * initialisation parameter.
     *
     * The functions defined take two parameters:
     *
     * 1. `{int} page` The current page index
     * 2. `{int} pages` The number of pages in the table
     *
     * Each function is expected to return an array where each element of the
     * array can be one of:
     *
     * * `first` - Jump to first page when activated
     * * `last` - Jump to last page when activated
     * * `previous` - Show previous page when activated
     * * `next` - Show next page when activated
     * * `{int}` - Show page of the index given
     * * `{array}` - A nested array containing the above elements to add a
     *   containing 'DIV' element (might be useful for styling).
     *
     * Note that DataTables v1.9- used this object slightly differently whereby
     * an object with two functions would be defined for each plug-in. That
     * ability is still supported by DataTables 1.10+ to provide backwards
     * compatibility, but this option of use is now decremented and no longer
     * documented in DataTables 1.10+.
     *
     *  @type object
     *  @default {}
     *
     *  @example
     *    // Show previous, next and current page buttons only
     *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
     *      return [ 'previous', page, 'next' ];
     *    };
     */
    pager: {},
    renderer: {
      pageButton: {},
      header: {}
    },

    /**
     * Ordering plug-ins - custom data source
     * 
     * The extension options for ordering of data available here is complimentary
     * to the default type based ordering that DataTables typically uses. It
     * allows much greater control over the the data that is being used to
     * order a column, but is necessarily therefore more complex.
     * 
     * This type of ordering is useful if you want to do ordering based on data
     * live from the DOM (for example the contents of an 'input' element) rather
     * than just the static string that DataTables knows of.
     * 
     * The way these plug-ins work is that you create an array of the values you
     * wish to be ordering for the column in question and then return that
     * array. The data in the array much be in the index order of the rows in
     * the table (not the currently ordering order!). Which order data gathering
     * function is run here depends on the `dt-init columns.orderDataType`
     * parameter that is used for the column (if any).
     *
     * The functions defined take two parameters:
     *
     * 1. `{object}` DataTables settings object: see
     *    {@link DataTable.models.oSettings}
     * 2. `{int}` Target column index
     *
     * Each function is expected to return an array:
     *
     * * `{array}` Data for the column to be ordering upon
     *
     *  @type array
     *
     *  @example
     *    // Ordering using `input` node values
     *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
     *    {
     *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
     *        return $('input', td).val();
     *      } );
     *    }
     */
    order: {},

    /**
     * Type based plug-ins.
     *
     * Each column in DataTables has a type assigned to it, either by automatic
     * detection or by direct assignment using the `type` option for the column.
     * The type of a column will effect how it is ordering and search (plug-ins
     * can also make use of the column type if required).
     *
     * @namespace
     */
    type: {
      /**
       * Type detection functions.
       *
       * The functions defined in this object are used to automatically detect
       * a column's type, making initialisation of DataTables super easy, even
       * when complex data is in the table.
       *
       * The functions defined take two parameters:
       *
          *  1. `{*}` Data from the column cell to be analysed
          *  2. `{settings}` DataTables settings object. This can be used to
          *     perform context specific type detection - for example detection
          *     based on language settings such as using a comma for a decimal
          *     place. Generally speaking the options from the settings will not
          *     be required
       *
       * Each function is expected to return:
       *
       * * `{string|null}` Data type detected, or null if unknown (and thus
       *   pass it on to the other type detection functions.
       *
       *  @type array
       *
       *  @example
       *    // Currency type detection plug-in:
       *    $.fn.dataTable.ext.type.detect.push(
       *      function ( data, settings ) {
       *        // Check the numeric part
       *        if ( ! $.isNumeric( data.substring(1) ) ) {
       *          return null;
       *        }
       *
       *        // Check prefixed by currency
       *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
       *          return 'currency';
       *        }
       *        return null;
       *      }
       *    );
       */
      detect: [],

      /**
       * Type based search formatting.
       *
       * The type based searching functions can be used to pre-format the
       * data to be search on. For example, it can be used to strip HTML
       * tags or to de-format telephone numbers for numeric only searching.
       *
       * Note that is a search is not defined for a column of a given type,
       * no search formatting will be performed.
       * 
       * Pre-processing of searching data plug-ins - When you assign the sType
       * for a column (or have it automatically detected for you by DataTables
       * or a type detection plug-in), you will typically be using this for
       * custom sorting, but it can also be used to provide custom searching
       * by allowing you to pre-processing the data and returning the data in
       * the format that should be searched upon. This is done by adding
       * functions this object with a parameter name which matches the sType
       * for that target column. This is the corollary of <i>afnSortData</i>
       * for searching data.
       *
       * The functions defined take a single parameter:
       *
          *  1. `{*}` Data from the column cell to be prepared for searching
       *
       * Each function is expected to return:
       *
       * * `{string|null}` Formatted string that will be used for the searching.
       *
       *  @type object
       *  @default {}
       *
       *  @example
       *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
       *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
       *    }
       */
      search: {},

      /**
       * Type based ordering.
       *
       * The column type tells DataTables what ordering to apply to the table
       * when a column is sorted upon. The order for each type that is defined,
       * is defined by the functions available in this object.
       *
       * Each ordering option can be described by three properties added to
       * this object:
       *
       * * `{type}-pre` - Pre-formatting function
       * * `{type}-asc` - Ascending order function
       * * `{type}-desc` - Descending order function
       *
       * All three can be used together, only `{type}-pre` or only
       * `{type}-asc` and `{type}-desc` together. It is generally recommended
       * that only `{type}-pre` is used, as this provides the optimal
       * implementation in terms of speed, although the others are provided
       * for compatibility with existing Javascript sort functions.
       *
       * `{type}-pre`: Functions defined take a single parameter:
       *
          *  1. `{*}` Data from the column cell to be prepared for ordering
       *
       * And return:
       *
       * * `{*}` Data to be sorted upon
       *
       * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
       * functions, taking two parameters:
       *
          *  1. `{*}` Data to compare to the second parameter
          *  2. `{*}` Data to compare to the first parameter
       *
       * And returning:
       *
       * * `{*}` Ordering match: <0 if first parameter should be sorted lower
       *   than the second parameter, ===0 if the two parameters are equal and
       *   >0 if the first parameter should be sorted height than the second
       *   parameter.
       * 
       *  @type object
       *  @default {}
       *
       *  @example
       *    // Numeric ordering of formatted numbers with a pre-formatter
       *    $.extend( $.fn.dataTable.ext.type.order, {
       *      "string-pre": function(x) {
       *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
       *        return parseFloat( a );
       *      }
       *    } );
       *
       *  @example
       *    // Case-sensitive string ordering, with no pre-formatting method
       *    $.extend( $.fn.dataTable.ext.order, {
       *      "string-case-asc": function(x,y) {
       *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
       *      },
       *      "string-case-desc": function(x,y) {
       *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
       *      }
       *    } );
       */
      order: {}
    },

    /**
     * Unique DataTables instance counter
     *
     * @type int
     * @private
     */
    _unique: 0,
    //
    // Depreciated
    // The following properties are retained for backwards compatiblity only.
    // The should not be used in new projects and will be removed in a future
    // version
    //

    /**
     * Version check function.
     *  @type function
     *  @depreciated Since 1.10
     */
    fnVersionCheck: DataTable.fnVersionCheck,

    /**
     * Index for what 'this' index API functions should use
     *  @type int
     *  @deprecated Since v1.10
     */
    iApiIndex: 0,

    /**
     * jQuery UI class container
     *  @type object
     *  @deprecated Since v1.10
     */
    oJUIClasses: {},

    /**
     * Software version
     *  @type string
     *  @deprecated Since v1.10
     */
    sVersion: DataTable.version
  }; //
  // Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
  //

  $.extend(_ext, {
    afnFiltering: _ext.search,
    aTypes: _ext.type.detect,
    ofnSearch: _ext.type.search,
    oSort: _ext.type.order,
    afnSortData: _ext.order,
    aoFeatures: _ext.feature,
    oApi: _ext.internal,
    oStdClasses: _ext.classes,
    oPagination: _ext.pager
  });
  $.extend(DataTable.ext.classes, {
    "sTable": "dataTable",
    "sNoFooter": "no-footer",

    /* Paging buttons */
    "sPageButton": "paginate_button",
    "sPageButtonActive": "current",
    "sPageButtonDisabled": "disabled",

    /* Striping classes */
    "sStripeOdd": "odd",
    "sStripeEven": "even",

    /* Empty row */
    "sRowEmpty": "dataTables_empty",

    /* Features */
    "sWrapper": "dataTables_wrapper",
    "sFilter": "dataTables_filter",
    "sInfo": "dataTables_info",
    "sPaging": "dataTables_paginate paging_",

    /* Note that the type is postfixed */
    "sLength": "dataTables_length",
    "sProcessing": "dataTables_processing",

    /* Sorting */
    "sSortAsc": "sorting_asc",
    "sSortDesc": "sorting_desc",
    "sSortable": "sorting",

    /* Sortable in both directions */
    "sSortableAsc": "sorting_asc_disabled",
    "sSortableDesc": "sorting_desc_disabled",
    "sSortableNone": "sorting_disabled",
    "sSortColumn": "sorting_",

    /* Note that an int is postfixed for the sorting order */

    /* Filtering */
    "sFilterInput": "",

    /* Page length */
    "sLengthSelect": "",

    /* Scrolling */
    "sScrollWrapper": "dataTables_scroll",
    "sScrollHead": "dataTables_scrollHead",
    "sScrollHeadInner": "dataTables_scrollHeadInner",
    "sScrollBody": "dataTables_scrollBody",
    "sScrollFoot": "dataTables_scrollFoot",
    "sScrollFootInner": "dataTables_scrollFootInner",

    /* Misc */
    "sHeaderTH": "",
    "sFooterTH": "",
    // Deprecated
    "sSortJUIAsc": "",
    "sSortJUIDesc": "",
    "sSortJUI": "",
    "sSortJUIAscAllowed": "",
    "sSortJUIDescAllowed": "",
    "sSortJUIWrapper": "",
    "sSortIcon": "",
    "sJUIHeader": "",
    "sJUIFooter": ""
  });
  var extPagination = DataTable.ext.pager;

  function _numbers(page, pages) {
    var numbers = [],
        buttons = extPagination.numbers_length,
        half = Math.floor(buttons / 2),
        i = 1;

    if (pages <= buttons) {
      numbers = _range(0, pages);
    } else if (page <= half) {
      numbers = _range(0, buttons - 2);
      numbers.push('ellipsis');
      numbers.push(pages - 1);
    } else if (page >= pages - 1 - half) {
      numbers = _range(pages - (buttons - 2), pages);
      numbers.splice(0, 0, 'ellipsis'); // no unshift in ie6

      numbers.splice(0, 0, 0);
    } else {
      numbers = _range(page - half + 2, page + half - 1);
      numbers.push('ellipsis');
      numbers.push(pages - 1);
      numbers.splice(0, 0, 'ellipsis');
      numbers.splice(0, 0, 0);
    }

    numbers.DT_el = 'span';
    return numbers;
  }

  $.extend(extPagination, {
    simple: function simple(page, pages) {
      return ['previous', 'next'];
    },
    full: function full(page, pages) {
      return ['first', 'previous', 'next', 'last'];
    },
    numbers: function numbers(page, pages) {
      return [_numbers(page, pages)];
    },
    simple_numbers: function simple_numbers(page, pages) {
      return ['previous', _numbers(page, pages), 'next'];
    },
    full_numbers: function full_numbers(page, pages) {
      return ['first', 'previous', _numbers(page, pages), 'next', 'last'];
    },
    first_last_numbers: function first_last_numbers(page, pages) {
      return ['first', _numbers(page, pages), 'last'];
    },
    // For testing and plug-ins to use
    _numbers: _numbers,
    // Number of number buttons (including ellipsis) to show. _Must be odd!_
    numbers_length: 7
  });
  $.extend(true, DataTable.ext.renderer, {
    pageButton: {
      _: function _(settings, host, idx, buttons, page, pages) {
        var classes = settings.oClasses;
        var lang = settings.oLanguage.oPaginate;
        var aria = settings.oLanguage.oAria.paginate || {};
        var btnDisplay,
            btnClass,
            counter = 0;

        var attach = function attach(container, buttons) {
          var i, ien, node, button;

          var clickHandler = function clickHandler(e) {
            _fnPageChange(settings, e.data.action, true);
          };

          for (i = 0, ien = buttons.length; i < ien; i++) {
            button = buttons[i];

            if ($.isArray(button)) {
              var inner = $('<' + (button.DT_el || 'div') + '/>').appendTo(container);
              attach(inner, button);
            } else {
              btnDisplay = null;
              btnClass = '';

              switch (button) {
                case 'ellipsis':
                  container.append('<span class="ellipsis">&#x2026;</span>');
                  break;

                case 'first':
                  btnDisplay = lang.sFirst;
                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                case 'previous':
                  btnDisplay = lang.sPrevious;
                  btnClass = button + (page > 0 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                case 'next':
                  btnDisplay = lang.sNext;
                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                case 'last':
                  btnDisplay = lang.sLast;
                  btnClass = button + (page < pages - 1 ? '' : ' ' + classes.sPageButtonDisabled);
                  break;

                default:
                  btnDisplay = button + 1;
                  btnClass = page === button ? classes.sPageButtonActive : '';
                  break;
              }

              if (btnDisplay !== null) {
                node = $('<a>', {
                  'class': classes.sPageButton + ' ' + btnClass,
                  'aria-controls': settings.sTableId,
                  'aria-label': aria[button],
                  'data-dt-idx': counter,
                  'tabindex': settings.iTabIndex,
                  'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
                }).html(btnDisplay).appendTo(container);

                _fnBindAction(node, {
                  action: button
                }, clickHandler);

                counter++;
              }
            }
          }
        }; // IE9 throws an 'unknown error' if document.activeElement is used
        // inside an iframe or frame. Try / catch the error. Not good for
        // accessibility, but neither are frames.


        var activeEl;

        try {
          // Because this approach is destroying and recreating the paging
          // elements, focus is lost on the select button which is bad for
          // accessibility. So we want to restore focus once the draw has
          // completed
          activeEl = $(host).find(document.activeElement).data('dt-idx');
        } catch (e) {}

        attach($(host).empty(), buttons);

        if (activeEl !== undefined) {
          $(host).find('[data-dt-idx=' + activeEl + ']').focus();
        }
      }
    }
  }); // Built in type detection. See model.ext.aTypes for information about
  // what is required from this methods.

  $.extend(DataTable.ext.type.detect, [// Plain numbers - first since V8 detects some plain numbers as dates
  // e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
  function (d, settings) {
    var decimal = settings.oLanguage.sDecimal;
    return _isNumber(d, decimal) ? 'num' + decimal : null;
  }, // Dates (only those recognised by the browser's Date.parse)
  function (d, settings) {
    // V8 tries _very_ hard to make a string passed into `Date.parse()`
    // valid, so we need to use a regex to restrict date formats. Use a
    // plug-in for anything other than ISO8601 style strings
    if (d && !(d instanceof Date) && !_re_date.test(d)) {
      return null;
    }

    var parsed = Date.parse(d);
    return parsed !== null && !isNaN(parsed) || _empty(d) ? 'date' : null;
  }, // Formatted numbers
  function (d, settings) {
    var decimal = settings.oLanguage.sDecimal;
    return _isNumber(d, decimal, true) ? 'num-fmt' + decimal : null;
  }, // HTML numeric
  function (d, settings) {
    var decimal = settings.oLanguage.sDecimal;
    return _htmlNumeric(d, decimal) ? 'html-num' + decimal : null;
  }, // HTML numeric, formatted
  function (d, settings) {
    var decimal = settings.oLanguage.sDecimal;
    return _htmlNumeric(d, decimal, true) ? 'html-num-fmt' + decimal : null;
  }, // HTML (this is strict checking - there must be html)
  function (d, settings) {
    return _empty(d) || typeof d === 'string' && d.indexOf('<') !== -1 ? 'html' : null;
  }]); // Filter formatting functions. See model.ext.ofnSearch for information about
  // what is required from these methods.
  // 
  // Note that additional search methods are added for the html numbers and
  // html formatted numbers by `_addNumericSort()` when we know what the decimal
  // place is

  $.extend(DataTable.ext.type.search, {
    html: function html(data) {
      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ").replace(_re_html, "") : '';
    },
    string: function string(data) {
      return _empty(data) ? data : typeof data === 'string' ? data.replace(_re_new_lines, " ") : data;
    }
  });

  var __numericReplace = function __numericReplace(d, decimalPlace, re1, re2) {
    if (d !== 0 && (!d || d === '-')) {
      return -Infinity;
    } // If a decimal place other than `.` is used, it needs to be given to the
    // function so we can detect it and replace with a `.` which is the only
    // decimal place Javascript recognises - it is not locale aware.


    if (decimalPlace) {
      d = _numToDecimal(d, decimalPlace);
    }

    if (d.replace) {
      if (re1) {
        d = d.replace(re1, '');
      }

      if (re2) {
        d = d.replace(re2, '');
      }
    }

    return d * 1;
  }; // Add the numeric 'deformatting' functions for sorting and search. This is done
  // in a function to provide an easy ability for the language options to add
  // additional methods if a non-period decimal place is used.


  function _addNumericSort(decimalPlace) {
    $.each({
      // Plain numbers
      "num": function num(d) {
        return __numericReplace(d, decimalPlace);
      },
      // Formatted numbers
      "num-fmt": function numFmt(d) {
        return __numericReplace(d, decimalPlace, _re_formatted_numeric);
      },
      // HTML numeric
      "html-num": function htmlNum(d) {
        return __numericReplace(d, decimalPlace, _re_html);
      },
      // HTML numeric, formatted
      "html-num-fmt": function htmlNumFmt(d) {
        return __numericReplace(d, decimalPlace, _re_html, _re_formatted_numeric);
      }
    }, function (key, fn) {
      // Add the ordering method
      _ext.type.order[key + decimalPlace + '-pre'] = fn; // For HTML types add a search formatter that will strip the HTML

      if (key.match(/^html\-/)) {
        _ext.type.search[key + decimalPlace] = _ext.type.search.html;
      }
    });
  } // Default sort methods


  $.extend(_ext.type.order, {
    // Dates
    "date-pre": function datePre(d) {
      return Date.parse(d) || -Infinity;
    },
    // html
    "html-pre": function htmlPre(a) {
      return _empty(a) ? '' : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + '';
    },
    // string
    "string-pre": function stringPre(a) {
      // This is a little complex, but faster than always calling toString,
      // http://jsperf.com/tostring-v-check
      return _empty(a) ? '' : typeof a === 'string' ? a.toLowerCase() : !a.toString ? '' : a.toString();
    },
    // string-asc and -desc are retained only for compatibility with the old
    // sort methods
    "string-asc": function stringAsc(x, y) {
      return x < y ? -1 : x > y ? 1 : 0;
    },
    "string-desc": function stringDesc(x, y) {
      return x < y ? 1 : x > y ? -1 : 0;
    }
  }); // Numeric sorting types - order doesn't matter here

  _addNumericSort('');

  $.extend(true, DataTable.ext.renderer, {
    header: {
      _: function _(settings, cell, column, classes) {
        // No additional mark-up required
        // Attach a sort listener to update on sort - note that using the
        // `DT` namespace will allow the event to be removed automatically
        // on destroy, while the `dt` namespaced event is the one we are
        // listening for
        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
          if (settings !== ctx) {
            // need to check this this is the host
            return; // table, not a nested one
          }

          var colIdx = column.idx;
          cell.removeClass(column.sSortingClass + ' ' + classes.sSortAsc + ' ' + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
        });
      },
      jqueryui: function jqueryui(settings, cell, column, classes) {
        $('<div/>').addClass(classes.sSortJUIWrapper).append(cell.contents()).append($('<span/>').addClass(classes.sSortIcon + ' ' + column.sSortingClassJUI)).appendTo(cell); // Attach a sort listener to update on sort

        $(settings.nTable).on('order.dt.DT', function (e, ctx, sorting, columns) {
          if (settings !== ctx) {
            return;
          }

          var colIdx = column.idx;
          cell.removeClass(classes.sSortAsc + " " + classes.sSortDesc).addClass(columns[colIdx] == 'asc' ? classes.sSortAsc : columns[colIdx] == 'desc' ? classes.sSortDesc : column.sSortingClass);
          cell.find('span.' + classes.sSortIcon).removeClass(classes.sSortJUIAsc + " " + classes.sSortJUIDesc + " " + classes.sSortJUI + " " + classes.sSortJUIAscAllowed + " " + classes.sSortJUIDescAllowed).addClass(columns[colIdx] == 'asc' ? classes.sSortJUIAsc : columns[colIdx] == 'desc' ? classes.sSortJUIDesc : column.sSortingClassJUI);
        });
      }
    }
  });
  /*
   * Public helper functions. These aren't used internally by DataTables, or
   * called by any of the options passed into DataTables, but they can be used
   * externally by developers working with DataTables. They are helper functions
   * to make working with DataTables a little bit easier.
   */

  var __htmlEscapeEntities = function __htmlEscapeEntities(d) {
    return typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : d;
  };
  /**
   * Helpers for `columns.render`.
   *
   * The options defined here can be used with the `columns.render` initialisation
   * option to provide a display renderer. The following functions are defined:
   *
   * * `number` - Will format numeric data (defined by `columns.data`) for
   *   display, retaining the original unformatted data for sorting and filtering.
   *   It takes 5 parameters:
   *   * `string` - Thousands grouping separator
   *   * `string` - Decimal point indicator
   *   * `integer` - Number of decimal points to show
   *   * `string` (optional) - Prefix.
   *   * `string` (optional) - Postfix (/suffix).
   * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
   *   parameters.
   *
   * @example
   *   // Column definition using the number renderer
   *   {
   *     data: "salary",
   *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
   *   }
   *
   * @namespace
   */


  DataTable.render = {
    number: function number(thousands, decimal, precision, prefix, postfix) {
      return {
        display: function display(d) {
          if (typeof d !== 'number' && typeof d !== 'string') {
            return d;
          }

          var negative = d < 0 ? '-' : '';
          var flo = parseFloat(d); // If NaN then there isn't much formatting that we can do - just
          // return immediately, escaping any HTML (this was supposed to
          // be a number after all)

          if (isNaN(flo)) {
            return __htmlEscapeEntities(d);
          }

          flo = flo.toFixed(precision);
          d = Math.abs(flo);
          var intPart = parseInt(d, 10);
          var floatPart = precision ? decimal + (d - intPart).toFixed(precision).substring(2) : '';
          return negative + (prefix || '') + intPart.toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousands) + floatPart + (postfix || '');
        }
      };
    },
    text: function text() {
      return {
        display: __htmlEscapeEntities
      };
    }
  };
  /*
   * This is really a good bit rubbish this method of exposing the internal methods
   * publicly... - To be fixed in 2.0 using methods on the prototype
   */

  /**
   * Create a wrapper function for exporting an internal functions to an external API.
   *  @param {string} fn API function name
   *  @returns {function} wrapped function
   *  @memberof DataTable#internal
   */

  function _fnExternApiFunc(fn) {
    return function () {
      var args = [_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
      return DataTable.ext.internal[fn].apply(this, args);
    };
  }
  /**
   * Reference to internal functions for use by plug-in developers. Note that
   * these methods are references to internal functions and are considered to be
   * private. If you use these methods, be aware that they are liable to change
   * between versions.
   *  @namespace
   */


  $.extend(DataTable.ext.internal, {
    _fnExternApiFunc: _fnExternApiFunc,
    _fnBuildAjax: _fnBuildAjax,
    _fnAjaxUpdate: _fnAjaxUpdate,
    _fnAjaxParameters: _fnAjaxParameters,
    _fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
    _fnAjaxDataSrc: _fnAjaxDataSrc,
    _fnAddColumn: _fnAddColumn,
    _fnColumnOptions: _fnColumnOptions,
    _fnAdjustColumnSizing: _fnAdjustColumnSizing,
    _fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
    _fnColumnIndexToVisible: _fnColumnIndexToVisible,
    _fnVisbleColumns: _fnVisbleColumns,
    _fnGetColumns: _fnGetColumns,
    _fnColumnTypes: _fnColumnTypes,
    _fnApplyColumnDefs: _fnApplyColumnDefs,
    _fnHungarianMap: _fnHungarianMap,
    _fnCamelToHungarian: _fnCamelToHungarian,
    _fnLanguageCompat: _fnLanguageCompat,
    _fnBrowserDetect: _fnBrowserDetect,
    _fnAddData: _fnAddData,
    _fnAddTr: _fnAddTr,
    _fnNodeToDataIndex: _fnNodeToDataIndex,
    _fnNodeToColumnIndex: _fnNodeToColumnIndex,
    _fnGetCellData: _fnGetCellData,
    _fnSetCellData: _fnSetCellData,
    _fnSplitObjNotation: _fnSplitObjNotation,
    _fnGetObjectDataFn: _fnGetObjectDataFn,
    _fnSetObjectDataFn: _fnSetObjectDataFn,
    _fnGetDataMaster: _fnGetDataMaster,
    _fnClearTable: _fnClearTable,
    _fnDeleteIndex: _fnDeleteIndex,
    _fnInvalidate: _fnInvalidate,
    _fnGetRowElements: _fnGetRowElements,
    _fnCreateTr: _fnCreateTr,
    _fnBuildHead: _fnBuildHead,
    _fnDrawHead: _fnDrawHead,
    _fnDraw: _fnDraw,
    _fnReDraw: _fnReDraw,
    _fnAddOptionsHtml: _fnAddOptionsHtml,
    _fnDetectHeader: _fnDetectHeader,
    _fnGetUniqueThs: _fnGetUniqueThs,
    _fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
    _fnFilterComplete: _fnFilterComplete,
    _fnFilterCustom: _fnFilterCustom,
    _fnFilterColumn: _fnFilterColumn,
    _fnFilter: _fnFilter,
    _fnFilterCreateSearch: _fnFilterCreateSearch,
    _fnEscapeRegex: _fnEscapeRegex,
    _fnFilterData: _fnFilterData,
    _fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
    _fnUpdateInfo: _fnUpdateInfo,
    _fnInfoMacros: _fnInfoMacros,
    _fnInitialise: _fnInitialise,
    _fnInitComplete: _fnInitComplete,
    _fnLengthChange: _fnLengthChange,
    _fnFeatureHtmlLength: _fnFeatureHtmlLength,
    _fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
    _fnPageChange: _fnPageChange,
    _fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
    _fnProcessingDisplay: _fnProcessingDisplay,
    _fnFeatureHtmlTable: _fnFeatureHtmlTable,
    _fnScrollDraw: _fnScrollDraw,
    _fnApplyToChildren: _fnApplyToChildren,
    _fnCalculateColumnWidths: _fnCalculateColumnWidths,
    _fnThrottle: _fnThrottle,
    _fnConvertToWidth: _fnConvertToWidth,
    _fnGetWidestNode: _fnGetWidestNode,
    _fnGetMaxLenString: _fnGetMaxLenString,
    _fnStringToCss: _fnStringToCss,
    _fnSortFlatten: _fnSortFlatten,
    _fnSort: _fnSort,
    _fnSortAria: _fnSortAria,
    _fnSortListener: _fnSortListener,
    _fnSortAttachListener: _fnSortAttachListener,
    _fnSortingClasses: _fnSortingClasses,
    _fnSortData: _fnSortData,
    _fnSaveState: _fnSaveState,
    _fnLoadState: _fnLoadState,
    _fnSettingsFromNode: _fnSettingsFromNode,
    _fnLog: _fnLog,
    _fnMap: _fnMap,
    _fnBindAction: _fnBindAction,
    _fnCallbackReg: _fnCallbackReg,
    _fnCallbackFire: _fnCallbackFire,
    _fnLengthOverflow: _fnLengthOverflow,
    _fnRenderer: _fnRenderer,
    _fnDataSource: _fnDataSource,
    _fnRowAttributes: _fnRowAttributes,
    _fnCalculateEnd: function _fnCalculateEnd() {} // Used by a lot of plug-ins, but redundant
    // in 1.10, so this dead-end function is
    // added to prevent errors

  }); // jQuery access

  $.fn.dataTable = DataTable; // Provide access to the host jQuery object (circular reference)

  DataTable.$ = $; // Legacy aliases

  $.fn.dataTableSettings = DataTable.settings;
  $.fn.dataTableExt = DataTable.ext; // With a capital `D` we return a DataTables API instance rather than a
  // jQuery object

  $.fn.DataTable = function (opts) {
    return $(this).dataTable(opts).api();
  }; // All properties that are available to $.fn.dataTable should also be
  // available on $.fn.DataTable


  $.each(DataTable, function (prop, val) {
    $.fn.DataTable[prop] = val;
  }); // Information about events fired by DataTables - for documentation.

  /**
   * Draw event, fired whenever the table is redrawn on the page, at the same
   * point as fnDrawCallback. This may be useful for binding events or
   * performing calculations when the table is altered at all.
   *  @name DataTable#draw.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Search event, fired when the searching applied to the table (using the
   * built-in global search, or column filters) is altered.
   *  @name DataTable#search.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Page change event, fired when the paging of the table is altered.
   *  @name DataTable#page.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Order event, fired when the ordering applied to the table is altered.
   *  @name DataTable#order.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * DataTables initialisation complete event, fired when the table is fully
   * drawn, including Ajax data loaded, if Ajax data is required.
   *  @name DataTable#init.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The JSON object request from the server - only
   *    present if client-side Ajax sourced data is used</li></ol>
   */

  /**
   * State save event, fired when the table has changed state a new state save
   * is required. This event allows modification of the state saving object
   * prior to actually doing the save, including addition or other state
   * properties (for plug-ins) or modification of a DataTables core property.
   *  @name DataTable#stateSaveParams.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The state information to be saved
   */

  /**
   * State load event, fired when the table is loading state from the stored
   * data, but prior to the settings object being modified by the saved state
   * - allowing modification of the saved state is required or loading of
   * state for a plug-in.
   *  @name DataTable#stateLoadParams.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The saved state information
   */

  /**
   * State loaded event, fired when state has been loaded from stored data and
   * the settings object has been modified by the loaded data.
   *  @name DataTable#stateLoaded.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {object} json The saved state information
   */

  /**
   * Processing event, fired when DataTables is doing some kind of processing
   * (be it, order, searcg or anything else). It can be used to indicate to
   * the end user that there is something happening, or that something has
   * finished.
   *  @name DataTable#processing.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} oSettings DataTables settings object
   *  @param {boolean} bShow Flag for if DataTables is doing processing or not
   */

  /**
   * Ajax (XHR) event, fired whenever an Ajax request is completed from a
   * request to made to the server for new data. This event is called before
   * DataTables processed the returned data, so it can also be used to pre-
   * process the data returned from the server, if needed.
   *
   * Note that this trigger is called in `fnServerData`, if you override
   * `fnServerData` and which to use this event, you need to trigger it in you
   * success function.
   *  @name DataTable#xhr.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {object} json JSON returned from the server
   *
   *  @example
   *     // Use a custom property returned from the server in another DOM element
   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
   *       $('#status').html( json.status );
   *     } );
   *
   *  @example
   *     // Pre-process the data returned from the server
   *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
   *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
   *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
   *       }
   *       // Note no return - manipulate the data directly in the JSON object.
   *     } );
   */

  /**
   * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
   * or passing the bDestroy:true parameter in the initialisation object. This
   * can be used to remove bound events, added DOM nodes, etc.
   *  @name DataTable#destroy.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Page length change event, fired when number of records to show on each
   * page (the length) is changed.
   *  @name DataTable#length.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {integer} len New length
   */

  /**
   * Column sizing has changed.
   *  @name DataTable#column-sizing.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   */

  /**
   * Column visibility has changed.
   *  @name DataTable#column-visibility.dt
   *  @event
   *  @param {event} e jQuery event object
   *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
   *  @param {int} column Column index
   *  @param {bool} vis `false` if column now hidden, or `true` if visible
   */

  return $.fn.dataTable;
});
/*! DataTables Bootstrap 3 integration
 * ©2011-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
 * DataTables 1.10 or newer.
 *
 * This file sets the defaults and adds options to DataTables to style its
 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
 * for further information.
 */


(function (factory) {
  if (true) {
    // AMD
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), Object(function webpackMissingModule() { var e = new Error("Cannot find module 'datatables.net'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_RESULT__ = (function ($) {
      return factory($, window, document);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function ($, window, document, undefined) {
  'use strict';

  var DataTable = $.fn.dataTable;
  /* Set the defaults for DataTables initialisation */

  $.extend(true, DataTable.defaults, {
    dom: "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" + "<'row'<'col-sm-12'tr>>" + "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
    renderer: 'bootstrap'
  });
  /* Default class modification */

  $.extend(DataTable.ext.classes, {
    sWrapper: "dataTables_wrapper container-fluid dt-bootstrap4",
    sFilterInput: "form-control",
    sLengthSelect: "form-control",
    sProcessing: "dataTables_processing card",
    sPageButton: "paginate_button page-item"
  });
  /* Bootstrap paging button renderer */

  DataTable.ext.renderer.pageButton.bootstrap = function (settings, host, idx, buttons, page, pages) {
    var api = new DataTable.Api(settings);
    var classes = settings.oClasses;
    var lang = settings.oLanguage.oPaginate;
    var aria = settings.oLanguage.oAria.paginate || {};
    var btnDisplay,
        btnClass,
        counter = 0;

    var attach = function attach(container, buttons) {
      var i, ien, node, button;

      var clickHandler = function clickHandler(e) {
        e.preventDefault();

        if (!$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action) {
          api.page(e.data.action).draw('page');
        }
      };

      for (i = 0, ien = buttons.length; i < ien; i++) {
        button = buttons[i];

        if ($.isArray(button)) {
          attach(container, button);
        } else {
          btnDisplay = '';
          btnClass = '';

          switch (button) {
            case 'ellipsis':
              btnDisplay = '&#x2026;';
              btnClass = 'disabled';
              break;

            case 'first':
              btnDisplay = lang.sFirst;
              btnClass = button + (page > 0 ? '' : ' disabled');
              break;

            case 'previous':
              btnDisplay = lang.sPrevious;
              btnClass = button + (page > 0 ? '' : ' disabled');
              break;

            case 'next':
              btnDisplay = lang.sNext;
              btnClass = button + (page < pages - 1 ? '' : ' disabled');
              break;

            case 'last':
              btnDisplay = lang.sLast;
              btnClass = button + (page < pages - 1 ? '' : ' disabled');
              break;

            default:
              btnDisplay = button + 1;
              btnClass = page === button ? 'active' : '';
              break;
          }

          if (btnDisplay) {
            node = $('<li>', {
              'class': classes.sPageButton + ' ' + btnClass,
              'id': idx === 0 && typeof button === 'string' ? settings.sTableId + '_' + button : null
            }).append($('<a>', {
              'href': '#',
              'aria-controls': settings.sTableId,
              'aria-label': aria[button],
              'data-dt-idx': counter,
              'tabindex': settings.iTabIndex,
              'class': 'page-link'
            }).html(btnDisplay)).appendTo(container);

            settings.oApi._fnBindAction(node, {
              action: button
            }, clickHandler);

            counter++;
          }
        }
      }
    }; // IE9 throws an 'unknown error' if document.activeElement is used
    // inside an iframe or frame. 


    var activeEl;

    try {
      // Because this approach is destroying and recreating the paging
      // elements, focus is lost on the select button which is bad for
      // accessibility. So we want to restore focus once the draw has
      // completed
      activeEl = $(host).find(document.activeElement).data('dt-idx');
    } catch (e) {}

    attach($(host).empty().html('<ul class="pagination"/>').children('ul'), buttons);

    if (activeEl !== undefined) {
      $(host).find('[data-dt-idx=' + activeEl + ']').focus();
    }
  };

  return DataTable;
});

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

		// Support: Chrome <=57, Firefox <=52
		// In some browsers, typeof returns "function" for HTML <object> elements
		// (i.e., `typeof document.createElement( "object" ) === "function"`).
		// We don't want to classify *any* DOM node as a function.
		// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
		// Plus for old WebKit, typeof returns "function" for HTML collections
		// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
		return typeof obj === "function" && typeof obj.nodeType !== "number" &&
			typeof obj.item !== "function";
	};


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.6.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
						[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( _i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.6
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2021-02-16
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem && elem.namespaceURI,
		docElem = elem && ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

	return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

}
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the primary Deferred
			primary = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						primary.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( primary.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return primary.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
		}

		return primary.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
				dataPriv.get( this, "events" ) || Object.create( null )
			)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
						return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
						return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						// Support: Chrome 86+
						// In Chrome, if an element having a focusout handler is blurred by
						// clicking outside of it, it invokes the handler synchronously. If
						// that handler calls `.remove()` on the element, the data is cleared,
						// leaving `result` undefined. We need to guard against this.
						return result && result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		// Suppress native focus or blur as it's already being fired
		// in leverageNative.
		_default: function() {
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is display: block
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("./public/template/cork/assets/js/app.js");
/******/ 	// This entry module doesn't tell about it's top-level declarations so it can't be inlined
/******/ 	__webpack_require__("./public/template/cork/assets/js/custom.js");
/******/ 	__webpack_require__("./public/template/cork/plugins/apex/apexcharts.min.js");
/******/ 	__webpack_require__("./public/template/cork/assets/js/widgets/modules-widgets.js");
/******/ 	__webpack_require__("./public/template/cork/plugins/table/datatable/datatables.js");
/******/ 	__webpack_require__("./public/template/cork/assets/js/scrollspyNav.js");
/******/ 	__webpack_require__("./public/template/cork/plugins/counter/jquery.countTo.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./public/template/cork/assets/js/components/custom-counter.js");
/******/ 	
/******/ })()
;