import{createFactory as t,$eq as e,$ne as s,$lt as i,$lte as n,$gt as r,$gte as o,$in as c,$nin as u,$all as h,$size as l,$regex as a,$options as f,$elemMatch as d,$exists as p,eq as b,ne as y,lt as w,lte as g,gt as $,gte as m,within as E,nin as A,all as j,size as M,regex as x,elemMatch as v,exists as _,and as F}from"@ucast/mongo2js";function O(t){return Array.isArray(t)?t:[t]}const C="__caslSubjectType__";function R(t,e){if(e)if(!e.hasOwnProperty(C))Object.defineProperty(e,C,{value:t});else if(t!==e[C])throw new Error(`Trying to cast object to subject type ${t} but previously it was casted to ${e[C]}`);return e}const T=t=>{const e=typeof t;return"string"===e||"function"===e};const B=t=>t.modelName||t.name;const P=t=>"string"===typeof t?t:B(t);function S(t){if(t.hasOwnProperty(C))return t[C];return B(t.constructor)}function q(t,e,s){let i=O(e);let n=0;while(n<i.length){const e=i[n++];if(t.hasOwnProperty(e))i=s(i,t[e])}return i}function z(t,e){if("string"===typeof e&&-1!==t.indexOf(e))return e;for(let s=0;s<e.length;s++)if(-1!==t.indexOf(e[s]))return e[s];return null}const D=(t,e)=>t.concat(e);function Y(t,e){if(e in t)throw new Error(`Cannot use "${e}" as an alias because it's reserved action.`);const s=Object.keys(t);const i=(t,s)=>{const i=z(t,s);if(i)throw new Error(`Detected cycle ${i} -> ${t.join(", ")}`);const n="string"===typeof s&&s===e||-1!==t.indexOf(e)||Array.isArray(s)&&-1!==s.indexOf(e);if(n)throw new Error(`Cannot make an alias to "${e}" because this is reserved action`);return t.concat(s)};for(let e=0;e<s.length;e++)q(t,s[e],i)}function k(t,e){if(!e||false!==e.skipValidate)Y(t,e&&e.anyAction||"manage");return e=>q(t,e,D)}function I(t,e,s){for(let i=s;i<e.length;i++)t.push(e[i])}function L(t,e){if(!t||!t.length)return e||[];if(!e||!e.length)return t||[];let s=0;let i=0;const n=[];while(s<t.length&&i<e.length)if(t[s].priority<e[i].priority){n.push(t[s]);s++}else{n.push(e[i]);i++}I(n,t,s);I(n,e,i);return n}function U(t,e,s){let i=t.get(e);if(!i){i=s();t.set(e,i)}return i}const G=t=>t;function H(t,e){if(Array.isArray(t.fields)&&!t.fields.length)throw new Error("`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa");if(t.fields&&!e.fieldMatcher)throw new Error('You need to pass "fieldMatcher" option in order to restrict access by fields');if(t.conditions&&!e.conditionsMatcher)throw new Error('You need to pass "conditionsMatcher" option in order to restrict access by conditions')}class J{constructor(t,e,s=0){H(t,e);this.action=e.resolveAction(t.action);this.subject=t.subject;this.inverted=!!t.inverted;this.conditions=t.conditions;this.reason=t.reason;this.fields=t.fields?O(t.fields):void 0;this.priority=s;this.t=e}i(){if(this.conditions&&!this.o)this.o=this.t.conditionsMatcher(this.conditions);return this.o}get ast(){const t=this.i();return t?t.ast:void 0}matchesConditions(t){if(!this.conditions)return true;if(!t||T(t))return!this.inverted;const e=this.i();return e(t)}matchesField(t){if(!this.fields)return true;if(!t)return!this.inverted;if(this.fields&&!this.u)this.u=this.t.fieldMatcher(this.fields);return this.u(t)}}const K=(t,e)=>{const s={value:t,prev:e,next:null};if(e)e.next=s;return s};const N=t=>{if(t.next)t.next.prev=t.prev;if(t.prev)t.prev.next=t.next;t.next=t.prev=null};const Q=()=>({rules:[],merged:false});const V=()=>new Map;const W=(t,e)=>{if(!t.h&&e.fields)t.h=true};class X{constructor(t=[],e={}){this.h=false;this.l=new Map;this.p={conditionsMatcher:e.conditionsMatcher,fieldMatcher:e.fieldMatcher,resolveAction:e.resolveAction||G};this.g=e.anyAction||"manage";this.$=e.anySubjectType||"all";this.m=e.detectSubjectType||S;this.A=t;this.j=this.M(t)}get rules(){return this.A}detectSubjectType(t){if(T(t))return t;if(!t)return this.$;return this.m(t)}update(t){const e={rules:t,ability:this,target:this};this.v("update",e);this.A=t;this.j=this.M(t);this.v("updated",e);return this}M(t){const e=new Map;for(let s=t.length-1;s>=0;s--){const i=t.length-s-1;const n=new J(t[s],this.p,i);const r=O(n.action);const o=O(n.subject||this.$);W(this,n);for(let t=0;t<o.length;t++){const s=U(e,o[t],V);for(let t=0;t<r.length;t++)U(s,r[t],Q).rules.push(n)}}return e}possibleRulesFor(t,e=this.$){if(!T(e))throw new Error('"possibleRulesFor" accepts only subject types (i.e., string or class) as the 2nd parameter');const s=U(this.j,e,V);const i=U(s,t,Q);if(i.merged)return i.rules;const n=t!==this.g&&s.has(this.g)?s.get(this.g).rules:void 0;let r=L(i.rules,n);if(e!==this.$)r=L(r,this.possibleRulesFor(t,this.$));i.rules=r;i.merged=true;return r}rulesFor(t,e,s){const i=this.possibleRulesFor(t,e);if(s&&"string"!==typeof s)throw new Error("The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details");if(!this.h)return i;return i.filter((t=>t.matchesField(s)))}on(t,e){const s=this.l.get(t)||null;const i=K(e,s);this.l.set(t,i);return()=>{if(!i.next&&!i.prev&&this.l.get(t)===i)this.l.delete(t);else N(i)}}v(t,e){let s=this.l.get(t)||null;while(null!==s){const t=s.prev;s.value(e);s=t}}}class PureAbility extends X{can(...t){const e=this.relevantRuleFor(...t);return!!e&&!e.inverted}relevantRuleFor(t,e,s){const i=this.detectSubjectType(e);const n=this.rulesFor(t,i,s);for(let t=0,s=n.length;t<s;t++)if(n[t].matchesConditions(e))return n[t];return null}cannot(...t){return!this.can(...t)}}const Z={$eq:e,$ne:s,$lt:i,$lte:n,$gt:r,$gte:o,$in:c,$nin:u,$all:h,$size:l,$regex:a,$options:f,$elemMatch:d,$exists:p};const tt={eq:b,ne:y,lt:w,lte:g,gt:$,gte:m,in:E,nin:A,all:j,size:M,regex:x,elemMatch:v,exists:_,and:F};const et=(e,s,i)=>t(Object.assign({},Z,e),Object.assign({},tt,s),i);const st=t(Z,tt);const it=/[-/\\^$+?.()|[\]{}]/g;const nt=/\.?\*+\.?/g;const rt=/\*+/;const ot=/\./g;function ct(t,e,s){const i="*"===s[0]||"."===t[0]&&"."===t[t.length-1]?"+":"*";const n=-1===t.indexOf("**")?"[^.]":".";const r=t.replace(ot,"\\$&").replace(rt,n+i);return e+t.length===s.length?`(?:${r})?`:r}function ut(t,e,s){if("."===t&&("*"===s[e-1]||"*"===s[e+1]))return t;return`\\${t}`}function ht(t){const e=t.map((t=>t.replace(it,ut).replace(nt,ct)));const s=e.length>1?`(?:${e.join("|")})`:e[0];return new RegExp(`^${s}$`)}const lt=t=>{let e;return s=>{if("undefined"===typeof e)e=t.every((t=>-1===t.indexOf("*")))?null:ht(t);return null===e?-1!==t.indexOf(s):e.test(s)}};class Ability extends PureAbility{constructor(t=[],e={}){super(t,Object.assign({conditionsMatcher:st,fieldMatcher:lt},e))}}class at{constructor(t){this._=t}because(t){this._.reason=t;return this}}class AbilityBuilder{constructor(t){this.rules=[];this.F=t;this.can=this.can.bind(this);this.cannot=this.cannot.bind(this);this.build=this.build.bind(this)}can(t,e,s,i){const n={action:t};if(e){n.subject=e;if(Array.isArray(s)||"string"===typeof s)n.fields=s;else if("undefined"!==typeof s)n.conditions=s;if("undefined"!==typeof i)n.conditions=i}this.rules.push(n);return new at(n)}cannot(t,e,s,i){const n=this.can(t,e,s,i);n._.inverted=true;return n}build(t){return new this.F(this.rules,t)}}function defineAbility(t,e){const s=new AbilityBuilder(Ability);const i=t(s.can,s.cannot);if(i&&"function"===typeof i.then)return i.then((()=>s.build(e)));return s.build(e)}const ft=t=>`Cannot execute "${t.action}" on "${t.subjectType}"`;const dt=function t(e){this.message=e};dt.prototype=Object.create(Error.prototype);class ForbiddenError extends dt{static setDefaultMessage(t){this.O="string"===typeof t?()=>t:t}static from(t){return new this(t)}constructor(t){super("");this.ability=t;if("function"===typeof Error.captureStackTrace){this.name="ForbiddenError";Error.captureStackTrace(this,this.constructor)}}setMessage(t){this.message=t;return this}throwUnlessCan(...t){const e=this.ability.relevantRuleFor(...t);if(e&&!e.inverted)return;this.action=t[0];this.subject=t[1];this.subjectType=P(this.ability.detectSubjectType(t[1]));this.field=t[2];const s=e?e.reason:"";this.message=this.message||s||this.constructor.O(this);throw this}}ForbiddenError.O=ft;var pt=Object.freeze({__proto__:null});export{Ability,AbilityBuilder,ForbiddenError,PureAbility,et as buildMongoQueryMatcher,k as createAliasResolver,defineAbility,S as detectSubjectType,lt as fieldPatternMatcher,ft as getDefaultErrorMessage,pt as hkt,st as mongoQueryMatcher,R as subject,O as wrapArray};
//# sourceMappingURL=index.mjs.map
